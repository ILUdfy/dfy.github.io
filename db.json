{"meta":{"version":1,"warehouse":"4.0.2"},"models":{"Asset":[{"_id":"themes/hexo-theme-matery-develop/source/favicon.ico","path":"favicon.ico","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery-develop/source/origin_favicon.png","path":"origin_favicon.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery-develop/source/css/barrager.css","path":"css/barrager.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery-develop/source/css/bb.css","path":"css/bb.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery-develop/source/css/dark.css","path":"css/dark.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery-develop/source/css/gallery.css","path":"css/gallery.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery-develop/source/css/gitment.css","path":"css/gitment.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery-develop/source/css/matery.css","path":"css/matery.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery-develop/source/css/indexcover.css","path":"css/indexcover.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery-develop/source/css/my-gitalk.css","path":"css/my-gitalk.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery-develop/source/css/my.css","path":"css/my.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery-develop/source/css/post.css","path":"css/post.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery-develop/source/css/reward.css","path":"css/reward.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery-develop/source/medias/avatar.jpg","path":"medias/avatar.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery-develop/source/medias/cover.jpg","path":"medias/cover.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery-develop/source/medias/comment_bg.png","path":"medias/comment_bg.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery-develop/source/medias/icp.png","path":"medias/icp.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery-develop/source/medias/logo.png","path":"medias/logo.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery-develop/source/js/crypto-js.js","path":"js/crypto-js.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery-develop/source/js/gallery-encrypt.js","path":"js/gallery-encrypt.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery-develop/source/js/jquery.barrager.js","path":"js/jquery.barrager.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery-develop/source/js/matery.js","path":"js/matery.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery-develop/source/js/search.js","path":"js/search.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery-develop/source/js/tw_cn.js","path":"js/tw_cn.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery-develop/source/libs/animate/animate.min.css","path":"libs/animate/animate.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery-develop/source/libs/aos/aos.css","path":"libs/aos/aos.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery-develop/source/libs/aos/aos.js","path":"libs/aos/aos.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery-develop/source/libs/aplayer/APlayer.min.css","path":"libs/aplayer/APlayer.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery-develop/source/libs/aplayer/APlayer.min.js","path":"libs/aplayer/APlayer.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery-develop/source/libs/aplayer/Meting.min.js","path":"libs/aplayer/Meting.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery-develop/source/libs/codeBlock/codeBlockFuction.js","path":"libs/codeBlock/codeBlockFuction.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery-develop/source/libs/codeBlock/codeCopy.js","path":"libs/codeBlock/codeCopy.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery-develop/source/libs/cryptojs/crypto-js.min.js","path":"libs/cryptojs/crypto-js.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery-develop/source/libs/codeBlock/codeShrink.js","path":"libs/codeBlock/codeShrink.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery-develop/source/libs/background/canvas-nest.js","path":"libs/background/canvas-nest.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery-develop/source/libs/background/ribbon-dynamic.js","path":"libs/background/ribbon-dynamic.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery-develop/source/libs/codeBlock/codeLang.js","path":"libs/codeBlock/codeLang.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery-develop/source/libs/background/ribbon.min.js","path":"libs/background/ribbon.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery-develop/source/libs/dplayer/DPlayer.min.css","path":"libs/dplayer/DPlayer.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery-develop/source/libs/dplayer/DPlayer.min.js","path":"libs/dplayer/DPlayer.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery-develop/source/libs/echarts/echarts.min.js","path":"libs/echarts/echarts.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery-develop/source/libs/background/ribbon-refresh.min.js","path":"libs/background/ribbon-refresh.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery-develop/source/libs/fancybox/jquery.fancybox.css","path":"libs/fancybox/jquery.fancybox.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery-develop/source/libs/fancybox/fancybox.js","path":"libs/fancybox/fancybox.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery-develop/source/libs/gitment/gitment-default.css","path":"libs/gitment/gitment-default.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery-develop/source/libs/gitalk/gitalk.min.js","path":"libs/gitalk/gitalk.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery-develop/source/libs/gitment/gitment.js","path":"libs/gitment/gitment.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery-develop/source/libs/instantpage/instantpage.js","path":"libs/instantpage/instantpage.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery-develop/source/libs/jqcloud/jqcloud-1.0.4.min.js","path":"libs/jqcloud/jqcloud-1.0.4.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery-develop/source/libs/jqcloud/jqcloud.css","path":"libs/jqcloud/jqcloud.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery-develop/source/libs/jquery/jquery-3.6.0.min.js","path":"libs/jquery/jquery-3.6.0.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery-develop/source/libs/justifiedGallery/justifiedGallery.min.css","path":"libs/justifiedGallery/justifiedGallery.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery-develop/source/libs/justifiedGallery/justifiedGallery.min.js","path":"libs/justifiedGallery/justifiedGallery.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery-develop/source/libs/masonry/masonry.pkgd.min.js","path":"libs/masonry/masonry.pkgd.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery-develop/source/libs/gitalk/gitalk.css","path":"libs/gitalk/gitalk.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery-develop/source/libs/mermaid/mermaid.js","path":"libs/mermaid/mermaid.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery-develop/source/libs/materialize/materialize.min.js","path":"libs/materialize/materialize.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery-develop/source/libs/mermaid/mermaid.min.css","path":"libs/mermaid/mermaid.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery-develop/source/libs/mermaid/mermaid.min.js","path":"libs/mermaid/mermaid.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery-develop/source/libs/minivaline/MiniValine.js","path":"libs/minivaline/MiniValine.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery-develop/source/libs/scrollprogress/scrollProgress.min.js","path":"libs/scrollprogress/scrollProgress.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery-develop/source/libs/materialize/materialize.min.css","path":"libs/materialize/materialize.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery-develop/source/libs/prism/prism.min.css","path":"libs/prism/prism.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery-develop/source/libs/prism/prism.min.js","path":"libs/prism/prism.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery-develop/source/libs/others/TencentCaptcha.js","path":"libs/others/TencentCaptcha.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery-develop/source/libs/others/busuanzi.pure.mini.js","path":"libs/others/busuanzi.pure.mini.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery-develop/source/libs/others/sakura-half.js","path":"libs/others/sakura-half.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery-develop/source/libs/others/clicklove.js","path":"libs/others/clicklove.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery-develop/source/libs/others/sakura-reduce.js","path":"libs/others/sakura-reduce.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery-develop/source/libs/others/sakura-small.js","path":"libs/others/sakura-small.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery-develop/source/libs/twikoo/twikoo.all.min.js","path":"libs/twikoo/twikoo.all.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery-develop/source/libs/others/sakura.js","path":"libs/others/sakura.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery-develop/source/libs/twikoo/twikoo.all.min.js.LICENSE.txt","path":"libs/twikoo/twikoo.all.min.js.LICENSE.txt","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery-develop/source/libs/others/snow.js","path":"libs/others/snow.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery-develop/source/libs/tocbot/tocbot.css","path":"libs/tocbot/tocbot.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery-develop/source/libs/tocbot/tocbot.min.js","path":"libs/tocbot/tocbot.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery-develop/source/libs/others/star.js","path":"libs/others/star.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery-develop/source/libs/typed/typed.js","path":"libs/typed/typed.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery-develop/source/libs/valine/av-min.js","path":"libs/valine/av-min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery-develop/source/libs/valine/Valine.min.js","path":"libs/valine/Valine.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery-develop/source/medias/banner/0.jpg","path":"medias/banner/0.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery-develop/source/medias/banner/1.jpg","path":"medias/banner/1.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery-develop/source/medias/banner/2.jpg","path":"medias/banner/2.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery-develop/source/medias/banner/3.jpg","path":"medias/banner/3.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery-develop/source/medias/banner/4.jpg","path":"medias/banner/4.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery-develop/source/medias/banner/5.jpg","path":"medias/banner/5.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery-develop/source/medias/barrager/0.png","path":"medias/barrager/0.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery-develop/source/medias/banner/6.jpg","path":"medias/banner/6.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery-develop/source/medias/featureimages/0.jpg","path":"medias/featureimages/0.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery-develop/source/medias/barrager/1.png","path":"medias/barrager/1.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery-develop/source/medias/featureimages/1.jpg","path":"medias/featureimages/1.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery-develop/source/medias/barrager/close.png","path":"medias/barrager/close.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery-develop/source/medias/barrager/2.png","path":"medias/barrager/2.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery-develop/source/medias/featureimages/11.jpg","path":"medias/featureimages/11.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery-develop/source/medias/featureimages/10.jpg","path":"medias/featureimages/10.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery-develop/source/medias/featureimages/12.jpg","path":"medias/featureimages/12.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery-develop/source/medias/featureimages/13.jpg","path":"medias/featureimages/13.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery-develop/source/medias/featureimages/14.jpg","path":"medias/featureimages/14.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery-develop/source/medias/featureimages/15.jpg","path":"medias/featureimages/15.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery-develop/source/medias/featureimages/16.jpg","path":"medias/featureimages/16.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery-develop/source/medias/featureimages/17.jpg","path":"medias/featureimages/17.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery-develop/source/medias/featureimages/18.jpg","path":"medias/featureimages/18.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery-develop/source/medias/featureimages/19.jpg","path":"medias/featureimages/19.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery-develop/source/medias/featureimages/2.jpg","path":"medias/featureimages/2.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery-develop/source/medias/featureimages/20.jpg","path":"medias/featureimages/20.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery-develop/source/medias/featureimages/21.jpg","path":"medias/featureimages/21.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery-develop/source/medias/featureimages/22.jpg","path":"medias/featureimages/22.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery-develop/source/medias/featureimages/23.jpg","path":"medias/featureimages/23.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery-develop/source/medias/featureimages/4.jpg","path":"medias/featureimages/4.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery-develop/source/medias/featureimages/5.jpg","path":"medias/featureimages/5.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery-develop/source/medias/featureimages/6.jpg","path":"medias/featureimages/6.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery-develop/source/medias/featureimages/3.jpg","path":"medias/featureimages/3.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery-develop/source/medias/featureimages/7.jpg","path":"medias/featureimages/7.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery-develop/source/libs/waline/Waline.min.js","path":"libs/waline/Waline.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery-develop/source/medias/images/01.jpg","path":"medias/images/01.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery-develop/source/medias/images/02.jpg","path":"medias/images/02.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery-develop/source/medias/images/03.jpg","path":"medias/images/03.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery-develop/source/medias/reward/alipay.jpg","path":"medias/reward/alipay.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery-develop/source/medias/reward/wechat.png","path":"medias/reward/wechat.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery-develop/source/medias/musics/bigboy-cover.jpg","path":"medias/musics/bigboy-cover.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery-develop/source/medias/musics/bigboy.mp3","path":"medias/musics/bigboy.mp3","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery-develop/source/medias/featureimages/9.jpg","path":"medias/featureimages/9.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery-develop/source/medias/featureimages/8.jpg","path":"medias/featureimages/8.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery-develop/source/libs/awesome/css/all.css","path":"libs/awesome/css/all.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery-develop/source/libs/lightGallery/css/lightgallery.min.css","path":"libs/lightGallery/css/lightgallery.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery-develop/source/libs/lightGallery/fonts/lg.svg","path":"libs/lightGallery/fonts/lg.svg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery-develop/source/libs/awesome/css/all.min.css","path":"libs/awesome/css/all.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery-develop/source/libs/lightGallery/fonts/lg.ttf","path":"libs/lightGallery/fonts/lg.ttf","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery-develop/source/libs/lightGallery/img/loading.gif","path":"libs/lightGallery/img/loading.gif","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery-develop/source/libs/lightGallery/img/video-play.png","path":"libs/lightGallery/img/video-play.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery-develop/source/libs/lightGallery/img/vimeo-play.png","path":"libs/lightGallery/img/vimeo-play.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery-develop/source/libs/lightGallery/img/youtube-play.png","path":"libs/lightGallery/img/youtube-play.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery-develop/source/libs/lightGallery/js/lightgallery-all.min.js","path":"libs/lightGallery/js/lightgallery-all.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery-develop/source/libs/share/css/share.min.css","path":"libs/share/css/share.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery-develop/source/libs/lightGallery/fonts/lg.woff","path":"libs/lightGallery/fonts/lg.woff","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery-develop/source/libs/awesome/webfonts/fa-brands-400.ttf","path":"libs/awesome/webfonts/fa-brands-400.ttf","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery-develop/source/libs/awesome/webfonts/fa-brands-400.woff2","path":"libs/awesome/webfonts/fa-brands-400.woff2","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery-develop/source/libs/awesome/webfonts/fa-regular-400.ttf","path":"libs/awesome/webfonts/fa-regular-400.ttf","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery-develop/source/libs/awesome/webfonts/fa-regular-400.woff2","path":"libs/awesome/webfonts/fa-regular-400.woff2","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery-develop/source/libs/awesome/webfonts/fa-solid-900.ttf","path":"libs/awesome/webfonts/fa-solid-900.ttf","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery-develop/source/libs/awesome/webfonts/fa-solid-900.woff2","path":"libs/awesome/webfonts/fa-solid-900.woff2","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery-develop/source/libs/awesome/webfonts/fa-v4compatibility.ttf","path":"libs/awesome/webfonts/fa-v4compatibility.ttf","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery-develop/source/libs/awesome/webfonts/fa-v4compatibility.woff2","path":"libs/awesome/webfonts/fa-v4compatibility.woff2","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery-develop/source/libs/share/fonts/iconfont.eot","path":"libs/share/fonts/iconfont.eot","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery-develop/source/libs/share/js/jquery.share.min.js","path":"libs/share/js/jquery.share.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery-develop/source/libs/share/fonts/iconfont.svg","path":"libs/share/fonts/iconfont.svg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery-develop/source/libs/share/fonts/iconfont.woff","path":"libs/share/fonts/iconfont.woff","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery-develop/source/libs/share/fonts/iconfont.ttf","path":"libs/share/fonts/iconfont.ttf","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery-develop/source/libs/share/js/social-share.min.js","path":"libs/share/js/social-share.min.js","modified":0,"renderable":1}],"Cache":[{"_id":"source/about/index.md","hash":"06b2cac7786c80011c1bb3a57891654b24715b30","modified":1712660365135},{"_id":"source/_drafts/centos7下安装NVIDIA显卡驱动和CUDA.md","hash":"3119fb44c91463c458c4fb7c3e3d749d06bb34fc","modified":1712660365103},{"_id":"source/_posts/Async注解失效记录.md","hash":"d9180dcb02f1de6e0d57680a25e8f10a1d6a4d8d","modified":1712660365103},{"_id":"source/_posts/Spring-Boot常用注解.md","hash":"fac674329c973f88cff3a657f45dc56e0f52318f","modified":1712660365103},{"_id":"source/_posts/centos7下配置ssd和yolov5的环境.md","hash":"d9be9bc2fb130419740cc9b33c6ef22fc3d682f7","modified":1712660365103},{"_id":"source/_posts/Ubuntu20-04下，nginx-ffmpeg-nginx-http-flv-module实现播放视频，docker部署算法的环境配置.md","hash":"97b185fa908c15c386345e96a23e573431fd9e52","modified":1712660365103},{"_id":"source/_posts/matlab编译dll文件.md","hash":"f78d6a274d3dac8f17d62ed317dc8c17b111e9f1","modified":1712660365103},{"_id":"source/_posts/thymeleaf基本使用.md","hash":"e695f504fb0e35633be8327303d246ed902dfc95","modified":1712660365120},{"_id":"source/_posts/docker基本使用.md","hash":"8a91fcfa3fcc9b9491fa48e15c69284c8fe3cd45","modified":1712660365103},{"_id":"source/_posts/一道缝合怪算法题的总结-LeetCode2818.md","hash":"700ec405ecfedf8f8a4ccf590bc8265753f5e416","modified":1712660365135},{"_id":"source/_posts/ubuntu安装mysql8-0流程记录.md","hash":"15896543e69106a356595e0b51c3b956971e6aaa","modified":1712660365120},{"_id":"source/_posts/支持cuda的opencv编译流程.md","hash":"34039a70b0ac69fc67441cb83701c983a4643fe2","modified":1712660365135},{"_id":"source/_posts/mysql-基础篇.md","hash":"d49cb24fa81da1810c623da1b4b6d35b30f2b487","modified":1712660365103},{"_id":"source/_posts/启用博客第一天.md","hash":"10b8f2b567a934a5fe8db93323119bb3b848d53e","modified":1712660365135},{"_id":"source/categories/index.md","hash":"a0d8ecc3143689e654f429de2cfb7c748b3c4924","modified":1712660365135},{"_id":"source/_posts/数列通项公式总结.md","hash":"26718a7c9e62e18cb0e9351e17ba11902bfa18b4","modified":1712660365135},{"_id":"source/_posts/最长递增子序列（LIS）问题.md","hash":"44db58df10ee9e5464b85f53059ff57777ce37c4","modified":1712660365135},{"_id":"source/tags/index.md","hash":"526d94db4011d498756d0fb5a13234680b889a3e","modified":1712660365135},{"_id":"source/_posts/解决failed to configure a datasource ‘url‘ attribute is not specified.md","hash":"3137930df8ea7fea0a21f61047d2ab46b1221056","modified":1712660365135},{"_id":"source/_posts/Spring-Boot常用注解/@Bean1.png","hash":"ea3f8821b1e6e3a98022493086cc6a653ca26fef","modified":1712660365103},{"_id":"source/_posts/Spring-Boot常用注解/@Bean2.png","hash":"0804ecdb251ece76f23762d06e0467a85a13108e","modified":1712660365103},{"_id":"source/_posts/Spring-Boot常用注解/@Bean3.png","hash":"bd0aff293fffa30b00dbb210ae07d15457529004","modified":1712660365103},{"_id":"source/_posts/Spring-Boot常用注解/@Bean4.png","hash":"f52ac7e565eae27d157ed01a1ef69af2e108d00f","modified":1712660365103},{"_id":"source/_posts/Spring-Boot常用注解/@Component2.png","hash":"5ec42540929e93d0bd6e7775ae0af2ba7406dd46","modified":1712660365103},{"_id":"source/_posts/Spring-Boot常用注解/@Component1.png","hash":"d5a01f9e9f00e9bad47267659dd30012c15b8d7b","modified":1712660365103},{"_id":"source/_posts/Spring-Boot常用注解/@Configuration2.png","hash":"ab94b1ea377f399bceb9c3831cc2f373c8ee9388","modified":1712660365103},{"_id":"source/_posts/Spring-Boot常用注解/@ControllerAdvice1.png","hash":"d95e0dc170a46356305872e757ae19e545c5e70e","modified":1712660365103},{"_id":"source/_posts/Spring-Boot常用注解/@Configuration1.png","hash":"2be16e82256a3364f6ee6bf1c74fed9e735fc0a6","modified":1712660365103},{"_id":"source/_posts/Spring-Boot常用注解/@ControllerAdvice2.png","hash":"4f37859b6d02bb932d8119f64adac2a9913ba864","modified":1712660365103},{"_id":"source/_posts/Spring-Boot常用注解/@Lazy1.png","hash":"2a11da27ea677857ccfe8bf79b965ed325f96b75","modified":1712660365103},{"_id":"source/_posts/matlab编译dll文件/deploytool.png","hash":"df5410aa519419ce3d9e429fc219ecc318613837","modified":1712660365103},{"_id":"source/_posts/Spring-Boot常用注解/@ModelAttribute1.png","hash":"f42e74bb71042f8ac2e60e228134e02569ea476f","modified":1712660365103},{"_id":"source/_posts/matlab编译dll文件/deploytool3.png","hash":"26be9eb127be8c9f6eb33f580bf9f99614889a8d","modified":1712660365103},{"_id":"source/_posts/Spring-Boot常用注解/@ModelAttribute2.png","hash":"12c470b0e76a638f4399271c6cae4274d0562527","modified":1712660365103},{"_id":"source/_posts/Spring-Boot常用注解/@PreDestroy1.png","hash":"c8f3117af036943860fe5adefd8140e72ee75807","modified":1712660365103},{"_id":"source/_posts/Spring-Boot常用注解/@RequestBody1.png","hash":"52779b1a5af858096afffdc2177f41c19810fd0e","modified":1712660365103},{"_id":"source/_posts/解决failed to configure a datasource ‘url‘ attribute is not specified/application.png","hash":"c6fda1f702d44678f5df65636387bfc9cf490535","modified":1712660365135},{"_id":"source/_posts/matlab编译dll文件/deploytool2.png","hash":"aa3e58ea9a196212d697f02f7c155f49cecd277c","modified":1712660365103},{"_id":"source/_posts/数列通项公式总结.pdf","hash":"1b52524420bcb14f48aff26bdb719bcf41d146f0","modified":1712660365135},{"_id":"source/_posts/ubuntu安装mysql8-0流程记录/mysql8安装2.png","hash":"6ab548a2a612bd8fb163e5ebdaea7c12d9e466e0","modified":1712660365120},{"_id":"source/_posts/ubuntu安装mysql8-0流程记录/mysql8安装4.png","hash":"36d592ed5ef0872476e32814a4fd3580b86e1398","modified":1712660365120},{"_id":"source/_posts/ubuntu安装mysql8-0流程记录/mysql8安装1.png","hash":"7b16fba279d6eb7d12111508ff0f15eed3d5f335","modified":1712660365120},{"_id":"source/_posts/thymeleaf基本使用/thymeleaf1.png","hash":"20632b1d9a55d701d2de14d559f926983de12c1b","modified":1712660365120},{"_id":"source/_posts/ubuntu安装mysql8-0流程记录/mysql8安装3.png","hash":"daeafd995ae6ec10b274d90ff89aba75d62fe0ab","modified":1712660365120},{"_id":"source/_posts/ubuntu安装mysql8-0流程记录/mysql8安装5.png","hash":"38125b62b47c5be396d375ea70cbf4bee0d87e49","modified":1712660365135},{"_id":"source/_posts/ubuntu安装mysql8-0流程记录/小丑.png","hash":"6a74af3a11a6fad8dfd0b7a07feaaaa96453eaef","modified":1712660365135},{"_id":"themes/hexo-theme-matery-develop/.gitignore","hash":"5340c994462c7345373e075529f40e60c1952f00","modified":1712660365135},{"_id":"themes/hexo-theme-matery-develop/CHANGELOG.md","hash":"484a703733b839bd98e016ddb015f028c2593fef","modified":1712660365135},{"_id":"themes/hexo-theme-matery-develop/README.md","hash":"93ae00dc14ff64e0b6f2faa3b14b12e4df135e2f","modified":1712660365135},{"_id":"themes/hexo-theme-matery-develop/LICENSE","hash":"b314c7ebb7d599944981908b7f3ed33a30e78f3a","modified":1712660365135},{"_id":"themes/hexo-theme-matery-develop/README_CN.md","hash":"190a389a85e524592f19c745adbaeef4214a2291","modified":1712660365135},{"_id":"themes/hexo-theme-matery-develop/languages/default.yml","hash":"f5c69f3e107474da19630e136abed5d87609e59f","modified":1712660365135},{"_id":"themes/hexo-theme-matery-develop/_config.yml","hash":"b2a3b26642fcad2384c13e44744b45be2093e9ca","modified":1712660365135},{"_id":"themes/hexo-theme-matery-develop/languages/jp.yml","hash":"c3d2849348bd52fab85b38040818b429057d3101","modified":1712660365135},{"_id":"themes/hexo-theme-matery-develop/languages/zh-CN.yml","hash":"c6de0de68bdc75a8a905787a0526b70ee9821da8","modified":1712660365135},{"_id":"themes/hexo-theme-matery-develop/layout/404.ejs","hash":"4d2bb286d9903f770344e11898bd3f13444760bf","modified":1712660365135},{"_id":"themes/hexo-theme-matery-develop/languages/zh-HK.yml","hash":"51c06005927e8bde5b3e23353d2bf2c32ed855f3","modified":1712660365135},{"_id":"themes/hexo-theme-matery-develop/layout/about.ejs","hash":"626d28dbc7fa2e0fb6601e324dcad08993bcf002","modified":1712660365153},{"_id":"themes/hexo-theme-matery-develop/layout/archive.ejs","hash":"57733d52d17361e735fcc95f875e0b1b9ebdcbd8","modified":1712660365153},{"_id":"themes/hexo-theme-matery-develop/layout/bb.ejs","hash":"6deb819e47fe11edd2fc87a6296cae725a0275f9","modified":1712660365153},{"_id":"themes/hexo-theme-matery-develop/layout/categories.ejs","hash":"c431e772d0f7700592228bbd9502793bdc28a893","modified":1712660365153},{"_id":"themes/hexo-theme-matery-develop/layout/category.ejs","hash":"4ac716d15d84e7c37f07308a5ec008a2ac090c9b","modified":1712660365153},{"_id":"themes/hexo-theme-matery-develop/layout/friends.ejs","hash":"7e92c983794c5c4a2b16eca2452eb187316262ef","modified":1712660365153},{"_id":"themes/hexo-theme-matery-develop/layout/contact.ejs","hash":"71ef2540fa586cd0c3b1f216f59fa9ec85fc6a38","modified":1712660365153},{"_id":"themes/hexo-theme-matery-develop/layout/galleries.ejs","hash":"85b8b9e583ffa7a4ee6d0c2be4779cb2f7d91777","modified":1712660365153},{"_id":"themes/hexo-theme-matery-develop/layout/gallery.ejs","hash":"fcc7364b03329148ba4920cddb0d34d5b7410788","modified":1712660365153},{"_id":"themes/hexo-theme-matery-develop/layout/index.ejs","hash":"eb3875f997767bc6c500a158535cfadcbca96f8f","modified":1712660365153},{"_id":"themes/hexo-theme-matery-develop/layout/layout.ejs","hash":"c170d2e1413c9b89863effd4e0a26c413c633a71","modified":1712660365153},{"_id":"themes/hexo-theme-matery-develop/layout/movies.ejs","hash":"abce85ffdd99e787e3652fbd466447e032b626bd","modified":1712660365153},{"_id":"themes/hexo-theme-matery-develop/layout/musics.ejs","hash":"9ac6053e09ed2c8a844d7e93c3fdce4ded95248a","modified":1712660365153},{"_id":"themes/hexo-theme-matery-develop/layout/tag.ejs","hash":"058eb27ff10f5314d8b9e334c54419b9a6572315","modified":1712660365153},{"_id":"themes/hexo-theme-matery-develop/layout/tags.ejs","hash":"851c0ee599e91e7b1d657673859e8b6ff79cf50b","modified":1712660365153},{"_id":"themes/hexo-theme-matery-develop/source/favicon.ico","hash":"06031b004b509ab1cc2d417ab4f944c5cdb17920","modified":1712660365169},{"_id":"themes/hexo-theme-matery-develop/source/origin_favicon.png","hash":"774fee8c6d0be9dbb010b20f36c06848d06e3da0","modified":1712660365373},{"_id":"themes/hexo-theme-matery-develop/layout/_widget/category-cloud.ejs","hash":"3ef458166041a8a12e493cc5963a5af5d98c1dfc","modified":1712660365153},{"_id":"themes/hexo-theme-matery-develop/layout/_widget/artitalk.ejs","hash":"b14e486f12b9ac42a273b80e4d785fcb94cf04b2","modified":1712660365153},{"_id":"themes/hexo-theme-matery-develop/layout/post.ejs","hash":"444ecca1cb35bad81b063f1d7cb9fd80ead195dd","modified":1712660365153},{"_id":"themes/hexo-theme-matery-develop/layout/_widget/category-radar.ejs","hash":"131e2eabf6b216210efd0746300889adfee357be","modified":1712660365153},{"_id":"themes/hexo-theme-matery-develop/layout/_widget/day-night.ejs","hash":"ff21dd5e49e1fc9a9ab8c7d164fd4b32a8265ea2","modified":1712660365153},{"_id":"themes/hexo-theme-matery-develop/layout/_widget/dream.ejs","hash":"d6692f8c81013191fce59f47df1b6171649181ca","modified":1712660365153},{"_id":"themes/hexo-theme-matery-develop/layout/_widget/music.ejs","hash":"d84f2f464209f02f49917423ac5accf1c548f38c","modified":1712660365153},{"_id":"themes/hexo-theme-matery-develop/layout/_widget/my-gallery.ejs","hash":"f5259f18a906f2862fe72b90c28125b5f6b7d0b1","modified":1712660365153},{"_id":"themes/hexo-theme-matery-develop/layout/_widget/my-skills.ejs","hash":"9edbeb1ec6212762d597ae7a05b5a219f72c8f98","modified":1712660365153},{"_id":"themes/hexo-theme-matery-develop/layout/_widget/musics.ejs","hash":"bfebdf0731fee0cd4fd51efa0da1d0184565ae25","modified":1712660365153},{"_id":"themes/hexo-theme-matery-develop/layout/_widget/post-calendar.ejs","hash":"fb5ee7674070956d134ddca6890a9bd3f398cc0f","modified":1712660365153},{"_id":"themes/hexo-theme-matery-develop/layout/_widget/recommend.ejs","hash":"5f64edd00d0a7c3b5e90d5ff99c9ebba61482d75","modified":1712660365153},{"_id":"themes/hexo-theme-matery-develop/layout/_widget/post-charts.ejs","hash":"20f0b6155eee348276dd91790f6a52b1005a0518","modified":1712660365153},{"_id":"themes/hexo-theme-matery-develop/layout/_partial/back-top.ejs","hash":"be527741c39c9dc4a13ad712b49fe8db0147fe1e","modified":1712660365135},{"_id":"themes/hexo-theme-matery-develop/layout/_partial/background.ejs","hash":"442c710d69892eb56d3d257cf4c2e195e6913eea","modified":1712660365135},{"_id":"themes/hexo-theme-matery-develop/layout/_widget/tag-cloud.ejs","hash":"d32898104477acef56c33d00a68b48db15dcf2e6","modified":1712660365153},{"_id":"themes/hexo-theme-matery-develop/layout/_widget/tag-wordcloud.ejs","hash":"03dcd0a7a9fdbcc2bc38a99a8fad96ae17a340fa","modified":1712660365153},{"_id":"themes/hexo-theme-matery-develop/layout/_widget/my-projects.ejs","hash":"141f19a8aa41b7a21436f23ce114bd5fda932512","modified":1712660365153},{"_id":"themes/hexo-theme-matery-develop/layout/_partial/baidu-analytics.ejs","hash":"4b01030b7136192bdbd704e29a0fe12f92767551","modified":1712660365135},{"_id":"themes/hexo-theme-matery-develop/layout/_partial/bg-cover-content.ejs","hash":"dee1bf78556a2422e2f6dfc9a7563f37806d9c9f","modified":1712660365135},{"_id":"themes/hexo-theme-matery-develop/layout/_widget/video.ejs","hash":"c2f785f4986d6ed1da0d1f2cd339f33754625004","modified":1712660365153},{"_id":"themes/hexo-theme-matery-develop/layout/_partial/baidu-push.ejs","hash":"2841870e0c625787de348221e5ddb7bbe99ec5a2","modified":1712660365135},{"_id":"themes/hexo-theme-matery-develop/layout/_partial/bg-cover.ejs","hash":"d5a7b9bb96e04c0a3485dd873748f19c50a6a04f","modified":1712660365135},{"_id":"themes/hexo-theme-matery-develop/layout/_partial/bg-video.ejs","hash":"963422029eb5158eb5f5bc97ce19b66e5399db97","modified":1712660365135},{"_id":"themes/hexo-theme-matery-develop/layout/_partial/codeblock.ejs","hash":"a924658cbc1a1aeafe9fa455b08bd495071285a1","modified":1712660365135},{"_id":"themes/hexo-theme-matery-develop/layout/_partial/changyan.ejs","hash":"cd919d31564e118c2ee8d5cbfb7d51ee6da15d82","modified":1712660365135},{"_id":"themes/hexo-theme-matery-develop/layout/_partial/cover-style.ejs","hash":"4288b9d91b2d71404e7a509a81a5d7f7a4b8b5e8","modified":1712660365135},{"_id":"themes/hexo-theme-matery-develop/layout/_partial/disqus.ejs","hash":"1b392f2160f962f62f3ddf5e1155c7f2f4888e1d","modified":1712660365135},{"_id":"themes/hexo-theme-matery-develop/layout/_partial/footer.ejs","hash":"96a20785870b24c4e307d49a3b27c5077437743a","modified":1712660365135},{"_id":"themes/hexo-theme-matery-develop/layout/_partial/gitalk.ejs","hash":"27764936791ce36b527bea63689435346bbfb425","modified":1712660365135},{"_id":"themes/hexo-theme-matery-develop/layout/_partial/github-link.ejs","hash":"fd4034bca2eb3987dcf113e6477260bee97eb1e7","modified":1712660365135},{"_id":"themes/hexo-theme-matery-develop/layout/_partial/gitment.ejs","hash":"90888c945384aa1ee4650bd43bd7ea670f25828c","modified":1712660365135},{"_id":"themes/hexo-theme-matery-develop/layout/_partial/google-analytics.ejs","hash":"890c8f04c1f4905dfceb3ea9fd6efdd040d79c01","modified":1712660365135},{"_id":"themes/hexo-theme-matery-develop/layout/_partial/head.ejs","hash":"e10a37e82a4fc9c806025ad791e82c3b22fdfa4d","modified":1712660365135},{"_id":"themes/hexo-theme-matery-develop/layout/_partial/header.ejs","hash":"4bcdbd27273dd1b7098d4cfa6479b5d6b138cd12","modified":1712660365135},{"_id":"themes/hexo-theme-matery-develop/layout/_partial/index-cover.ejs","hash":"c6ad79f25fdd038df06aaaead4b9e45f8078e34a","modified":1712660365135},{"_id":"themes/hexo-theme-matery-develop/layout/_partial/livere.ejs","hash":"42728561c09589f79b698eb059ab4def53ed3642","modified":1712660365135},{"_id":"themes/hexo-theme-matery-develop/layout/_partial/main-style.ejs","hash":"8819b334509682355a5e53fa0f307f90166d175c","modified":1712660365151},{"_id":"themes/hexo-theme-matery-develop/layout/_partial/mobile-nav.ejs","hash":"f3d6b20ac07f1b096c5cf0b091523867fd4fd0b5","modified":1712660365151},{"_id":"themes/hexo-theme-matery-develop/layout/_partial/post-cover.ejs","hash":"7f583c935253e2bf6421791715ee9de4989add6e","modified":1712660365152},{"_id":"themes/hexo-theme-matery-develop/layout/_partial/navigation.ejs","hash":"c9ce806110db632d29bdb0eea3b55b1fb4b1aff3","modified":1712660365151},{"_id":"themes/hexo-theme-matery-develop/layout/_partial/post-detail-toc.ejs","hash":"05ac5b4df05e80e3123e464e7df2dfc589b0bbd2","modified":1712660365152},{"_id":"themes/hexo-theme-matery-develop/layout/_partial/paging.ejs","hash":"d8773abab5d0b672b70a9df20a8f9f7f6b0a2dae","modified":1712660365152},{"_id":"themes/hexo-theme-matery-develop/layout/_partial/post-detail.ejs","hash":"3590cebe5d6729300f2ac83ff9e0ceceb66da4b9","modified":1712660365152},{"_id":"themes/hexo-theme-matery-develop/layout/_partial/post-statis.ejs","hash":"de0d5763ddd64463f43135678b64c044884b8406","modified":1712660365152},{"_id":"themes/hexo-theme-matery-develop/layout/_partial/post-style.ejs","hash":"243c3ba783553f25955d524fd47a5bb59a5e732b","modified":1712660365152},{"_id":"themes/hexo-theme-matery-develop/layout/_partial/reprint-statement.ejs","hash":"f67bc52bc5a2464ebe30f42c65c0ee38eeec2fda","modified":1712660365153},{"_id":"themes/hexo-theme-matery-develop/layout/_partial/prev-next.ejs","hash":"1fb43f421de58aa24458f7d4a4cda44b8a3d62cc","modified":1712660365153},{"_id":"themes/hexo-theme-matery-develop/layout/_partial/reward-style.ejs","hash":"8256ed940c0185ccf01890d59fb4262f196e2323","modified":1712660365153},{"_id":"themes/hexo-theme-matery-develop/layout/_partial/reward.ejs","hash":"ab6de30729d48669476372ccd4aefa7e15d92c38","modified":1712660365153},{"_id":"themes/hexo-theme-matery-develop/layout/_partial/search.ejs","hash":"4218ed406c43ed781fe78ad8bf1834fa4b76b049","modified":1712660365153},{"_id":"themes/hexo-theme-matery-develop/layout/_partial/share.ejs","hash":"e50fae64b6cfdbed18861eb49eca5018a920c7a4","modified":1712660365153},{"_id":"themes/hexo-theme-matery-develop/layout/_partial/social-link.ejs","hash":"f640583d45179abc1ef57951e7f61fb9e10f44c9","modified":1712660365153},{"_id":"themes/hexo-theme-matery-develop/layout/_partial/twikoo.ejs","hash":"d1d7c4da3d56f42541eea965a6ebf1f8e2fff0f4","modified":1712660365153},{"_id":"themes/hexo-theme-matery-develop/layout/_partial/valine.ejs","hash":"5ee3ade52bc7494226ed30e7dd4531d1d91ca67c","modified":1712660365153},{"_id":"themes/hexo-theme-matery-develop/scripts/tags/button.js","hash":"18415c69461d706cf8039580cc79d00c029c637c","modified":1712660365153},{"_id":"themes/hexo-theme-matery-develop/layout/_partial/waline.ejs","hash":"beb3044890bfe7cfd26328565da4f8f955563424","modified":1712660365153},{"_id":"themes/hexo-theme-matery-develop/scripts/tags/index.js","hash":"223a31ea3aa4a689d45a033c7d680cb4fff8d8af","modified":1712660365153},{"_id":"themes/hexo-theme-matery-develop/scripts/tags/note.js","hash":"98e7c48678c69f089d0d42f6d005c83265e9f400","modified":1712660365153},{"_id":"themes/hexo-theme-matery-develop/source/css/barrager.css","hash":"f59b2f1351d7977b676a4d51634b7dad648d3e99","modified":1712660365153},{"_id":"themes/hexo-theme-matery-develop/source/css/bb.css","hash":"328a49b26ce663d9824c53aced118db4d55f2ac7","modified":1712660365167},{"_id":"themes/hexo-theme-matery-develop/source/css/dark.css","hash":"9397fa73847ea0e8d61f321580ce22a83231d91d","modified":1712660365167},{"_id":"themes/hexo-theme-matery-develop/source/css/gallery.css","hash":"015097ca1271dd44e6d663332587dbe58ae2ade8","modified":1712660365167},{"_id":"themes/hexo-theme-matery-develop/source/css/gitment.css","hash":"d5ef623065d1fbc897119f7b70ccf7563e329917","modified":1712660365169},{"_id":"themes/hexo-theme-matery-develop/source/css/matery.css","hash":"36d90a4b90df89c8fdc588203e394903b11747c8","modified":1712660365169},{"_id":"themes/hexo-theme-matery-develop/source/css/indexcover.css","hash":"e4a478c91cd6750a9f18b65b914ff0b316fb08b3","modified":1712660365169},{"_id":"themes/hexo-theme-matery-develop/source/css/my-gitalk.css","hash":"52b3b36a0ed3db3bdf8bf1f999e37731078c485b","modified":1712660365169},{"_id":"themes/hexo-theme-matery-develop/source/css/my.css","hash":"37683a9f11c68903a53e2b8593ca8c095a721896","modified":1712660365169},{"_id":"themes/hexo-theme-matery-develop/source/css/post.css","hash":"1ebbf9ddee7db4b3039d8d4e25f2605072ab6e24","modified":1712660365169},{"_id":"themes/hexo-theme-matery-develop/source/css/reward.css","hash":"56f8d21c3bb1dc57c762a63d13b08161d8260738","modified":1712660365169},{"_id":"themes/hexo-theme-matery-develop/source/medias/avatar.jpg","hash":"2a6287308628881ce27b9a7de53ba15c2be00d02","modified":1712660365265},{"_id":"themes/hexo-theme-matery-develop/source/medias/comment_bg.png","hash":"dfc93d24081884fbc58cab0f8fd19e77d31d6123","modified":1712660365278},{"_id":"themes/hexo-theme-matery-develop/source/medias/icp.png","hash":"27a96f31f7d0413c6ade6f40e06f021f501151c7","modified":1712660365294},{"_id":"themes/hexo-theme-matery-develop/source/medias/logo.png","hash":"a486ca952e79184bfe549d53fbf6ad627d5800a9","modified":1712660365294},{"_id":"themes/hexo-theme-matery-develop/source/js/gallery-encrypt.js","hash":"f611a391d62da17b71f75577a72ad246ef6c5a71","modified":1712660365169},{"_id":"themes/hexo-theme-matery-develop/source/js/matery.js","hash":"713eca7dcc8d4d02a03652367abc1afcc74e6c75","modified":1712660365169},{"_id":"themes/hexo-theme-matery-develop/source/js/search.js","hash":"72fac8fd3671f3525a574423985ee522958989d3","modified":1712660365169},{"_id":"themes/hexo-theme-matery-develop/source/js/jquery.barrager.js","hash":"8db5b764f940614a209a332a4a11a53e5ea52fbc","modified":1712660365169},{"_id":"themes/hexo-theme-matery-develop/source/js/tw_cn.js","hash":"8ab118a6f3e115efb50283c0fe408ad91ce7021b","modified":1712660365169},{"_id":"themes/hexo-theme-matery-develop/source/libs/animate/animate.min.css","hash":"5dfcbcee866e9dc564916416281885f3e320871e","modified":1712660365169},{"_id":"themes/hexo-theme-matery-develop/source/libs/aos/aos.css","hash":"ded9739f803d114c9168d3351fded72b3b478b4c","modified":1712660365169},{"_id":"themes/hexo-theme-matery-develop/source/libs/aos/aos.js","hash":"5a8e6d07ffa55642418ab3fd4b263aa08284b77a","modified":1712660365169},{"_id":"themes/hexo-theme-matery-develop/source/libs/aplayer/APlayer.min.css","hash":"7f4f8913f2d46ade2def5134e2cc8684a4b87939","modified":1712660365169},{"_id":"themes/hexo-theme-matery-develop/source/libs/aplayer/Meting.min.js","hash":"ff60e62a9486505283582e8ad9226b35ba93d5c5","modified":1712660365169},{"_id":"themes/hexo-theme-matery-develop/source/libs/aplayer/APlayer.min.js","hash":"70c0c4a9bf698747b7c058c21287ad617355e5dd","modified":1712660365169},{"_id":"themes/hexo-theme-matery-develop/source/libs/codeBlock/codeBlockFuction.js","hash":"a8133367d48199e7505c2d831ca848b4202b9ba6","modified":1712660365183},{"_id":"themes/hexo-theme-matery-develop/source/libs/codeBlock/codeCopy.js","hash":"6ab7871d36cab438bbd4d781bc1fe7618b46b6e7","modified":1712660365183},{"_id":"themes/hexo-theme-matery-develop/source/libs/cryptojs/crypto-js.min.js","hash":"33810b2b757fc4327bc1d3b83bb5e0d3dc1fec5b","modified":1712660365197},{"_id":"themes/hexo-theme-matery-develop/source/libs/codeBlock/codeShrink.js","hash":"3edbe498f7bb9e7daa77f9db30e1b5eeab40e067","modified":1712660365183},{"_id":"themes/hexo-theme-matery-develop/source/libs/background/canvas-nest.js","hash":"d2569ef80127ed2f4af7ef4d9f82b037794eec69","modified":1712660365183},{"_id":"themes/hexo-theme-matery-develop/source/libs/background/ribbon-dynamic.js","hash":"8f53dbd5f9a40c377664bf8ca0d5d5ed75b91757","modified":1712660365183},{"_id":"themes/hexo-theme-matery-develop/source/libs/codeBlock/codeLang.js","hash":"066d2c89ad429e44f6467b9267da782ccaad57de","modified":1712660365183},{"_id":"themes/hexo-theme-matery-develop/source/libs/background/ribbon.min.js","hash":"6a99d494c030388f96f6086a7aaa0f03f3fe532e","modified":1712660365183},{"_id":"themes/hexo-theme-matery-develop/source/libs/dplayer/DPlayer.min.css","hash":"5d52d3b34fceb9d7e11f1beaf7ed380b4249dec4","modified":1712660365197},{"_id":"themes/hexo-theme-matery-develop/source/libs/background/ribbon-refresh.min.js","hash":"6d98692b2cad8c746a562db18b170b35c24402f4","modified":1712660365183},{"_id":"themes/hexo-theme-matery-develop/source/libs/fancybox/jquery.fancybox.css","hash":"1be9b79be02a1cfc5d96c4a5e0feb8f472babd95","modified":1712660365199},{"_id":"themes/hexo-theme-matery-develop/source/libs/gitment/gitment-default.css","hash":"a0625d8b432af8bdc820f8768d36cde439e7257c","modified":1712660365199},{"_id":"themes/hexo-theme-matery-develop/source/libs/instantpage/instantpage.js","hash":"043eba3c85c2e2009a9fabf3c4fc55537852fd86","modified":1712660365199},{"_id":"themes/hexo-theme-matery-develop/source/libs/jqcloud/jqcloud-1.0.4.min.js","hash":"26849509f196a2d21bbfd15696e5d5153163b8f1","modified":1712660365199},{"_id":"themes/hexo-theme-matery-develop/source/libs/jqcloud/jqcloud.css","hash":"4e6538c8312aeeab845d361c37a8c1a0931241f0","modified":1712660365199},{"_id":"themes/hexo-theme-matery-develop/source/libs/justifiedGallery/justifiedGallery.min.css","hash":"b9323091d50785ad6c617d7cae76a41a89eb44b3","modified":1712660365199},{"_id":"themes/hexo-theme-matery-develop/source/libs/justifiedGallery/justifiedGallery.min.js","hash":"6f5433cc9f19ce2403e903e5d01a4c7b38f0969b","modified":1712660365199},{"_id":"themes/hexo-theme-matery-develop/source/libs/masonry/masonry.pkgd.min.js","hash":"137e1c0f71e472fb7004c1832972287fb2dfc343","modified":1712660365214},{"_id":"themes/hexo-theme-matery-develop/source/libs/gitalk/gitalk.css","hash":"4c0d5510ea487b0fe63e96464ab0b381565cc273","modified":1712660365199},{"_id":"themes/hexo-theme-matery-develop/source/libs/mermaid/mermaid.min.css","hash":"1dbcd9312e57f2a0b569451d0028d88316614481","modified":1712660365230},{"_id":"themes/hexo-theme-matery-develop/source/libs/minivaline/MiniValine.js","hash":"f7f6cdc1b22297e02334e304444e9a8351acb455","modified":1712660365246},{"_id":"themes/hexo-theme-matery-develop/source/libs/scrollprogress/scrollProgress.min.js","hash":"777ffe5d07e85a14fbe97d846f45ffc0087251cc","modified":1712660365247},{"_id":"themes/hexo-theme-matery-develop/source/libs/prism/prism.min.css","hash":"1aec6cfcbf8c833f728b8736060fe5690e19d92f","modified":1712660365247},{"_id":"themes/hexo-theme-matery-develop/source/libs/others/TencentCaptcha.js","hash":"fb4d34c48567b7b992aac1c75f0d24c3eb2cc3fa","modified":1712660365247},{"_id":"themes/hexo-theme-matery-develop/source/libs/others/sakura-half.js","hash":"a41b64af88fdd0e2d3502752d059661c1bc743dc","modified":1712660365247},{"_id":"themes/hexo-theme-matery-develop/source/libs/others/busuanzi.pure.mini.js","hash":"6e41f31100ae7eb3a6f23f2c168f6dd56e7f7a9a","modified":1712660365247},{"_id":"themes/hexo-theme-matery-develop/source/libs/others/clicklove.js","hash":"6a39b8c683ba5dcd92f70c6ab45d1cfac3213e8e","modified":1712660365247},{"_id":"themes/hexo-theme-matery-develop/source/libs/others/sakura-reduce.js","hash":"f7527e9fb4e6fe2cc7c8880692d77bcda95900c7","modified":1712660365247},{"_id":"themes/hexo-theme-matery-develop/source/libs/others/sakura-small.js","hash":"3284a9ab71454e574d80663f3a05735cd12a6a05","modified":1712660365247},{"_id":"themes/hexo-theme-matery-develop/source/libs/twikoo/twikoo.all.min.js.LICENSE.txt","hash":"6e1c8f7b23f06ca4c727c805fda053dc1d9193d0","modified":1712660365265},{"_id":"themes/hexo-theme-matery-develop/source/libs/others/sakura.js","hash":"b6ebe8f040c84f067300996a5f377846f01605fa","modified":1712660365247},{"_id":"themes/hexo-theme-matery-develop/source/libs/others/snow.js","hash":"07b1e7932403b38aebb1c024ef3c3f5bb0c6aa2e","modified":1712660365247},{"_id":"themes/hexo-theme-matery-develop/source/libs/tocbot/tocbot.css","hash":"f646f2bb75bcd1eb65b2788ac7bf15d4fd243ce9","modified":1712660365260},{"_id":"themes/hexo-theme-matery-develop/source/libs/tocbot/tocbot.min.js","hash":"39055053a477e7d54b46cfb46591f84cc3818eeb","modified":1712660365260},{"_id":"themes/hexo-theme-matery-develop/source/libs/others/star.js","hash":"1ddc9448fbba8915f9452b4f0a970f33635e46a7","modified":1712660365247},{"_id":"themes/hexo-theme-matery-develop/source/libs/typed/typed.js","hash":"eceb98f80392cb57df1af5b160d85924f69fb2e0","modified":1712660365265},{"_id":"themes/hexo-theme-matery-develop/source/medias/barrager/0.png","hash":"b30416fd3b3aec5af3fa90823a7e2e9c0af4cda8","modified":1712660365278},{"_id":"themes/hexo-theme-matery-develop/source/medias/barrager/1.png","hash":"b8c211690dba3addedfe7b928e3936cd487df0d6","modified":1712660365278},{"_id":"themes/hexo-theme-matery-develop/source/medias/barrager/close.png","hash":"045346df61ee01abe5018c5d9ba805d2831ce7b1","modified":1712660365278},{"_id":"themes/hexo-theme-matery-develop/source/medias/barrager/2.png","hash":"52b2b13373fe611ad2327b9b40426d6dc05b69cd","modified":1712660365278},{"_id":"themes/hexo-theme-matery-develop/source/medias/featureimages/10.jpg","hash":"98e7f6fd9c97d4de9044b6871ca08ebf14db11b9","modified":1712660365278},{"_id":"themes/hexo-theme-matery-develop/source/medias/featureimages/13.jpg","hash":"35a320174f8e316e3eadaec658024276b651c6e9","modified":1712660365278},{"_id":"themes/hexo-theme-matery-develop/source/medias/featureimages/15.jpg","hash":"da0fbee3b7bde1607eace377ddf834c0be99edfe","modified":1712660365278},{"_id":"themes/hexo-theme-matery-develop/source/medias/featureimages/16.jpg","hash":"97a829c4bc94f9d2929b20a1a9b798c57b9f7205","modified":1712660365278},{"_id":"themes/hexo-theme-matery-develop/source/medias/featureimages/2.jpg","hash":"4bba691cf71a517ecaeaf42afd3e8f8b31e346c1","modified":1712660365278},{"_id":"themes/hexo-theme-matery-develop/source/medias/featureimages/21.jpg","hash":"b26edb128bb0bf58b23fd2f014e9555e89a2ca3b","modified":1712660365294},{"_id":"themes/hexo-theme-matery-develop/source/medias/featureimages/22.jpg","hash":"754579747a3e99747d890fca3162f370b96a7941","modified":1712660365294},{"_id":"themes/hexo-theme-matery-develop/source/medias/featureimages/23.jpg","hash":"7d7f37da3fa7128343adac23866449eb2c6a549a","modified":1712660365294},{"_id":"themes/hexo-theme-matery-develop/source/medias/featureimages/5.jpg","hash":"41ca20129a37fedc573eec28dd7d7b9e5b09228a","modified":1712660365294},{"_id":"themes/hexo-theme-matery-develop/source/medias/featureimages/3.jpg","hash":"6ec646c2a70f5f11edacf225c1477f2200a37a96","modified":1712660365294},{"_id":"themes/hexo-theme-matery-develop/source/medias/featureimages/7.jpg","hash":"7975141cd64e875122c0ea33daaca1a06bf00b8e","modified":1712660365294},{"_id":"themes/hexo-theme-matery-develop/source/medias/musics/bigboy-cover.jpg","hash":"d97b91fefcced5cab6d2c052086f49506e980b73","modified":1712660365294},{"_id":"themes/hexo-theme-matery-develop/source/medias/featureimages/8.jpg","hash":"8e4b7186352085483ca1174c7c0800114c48df8b","modified":1712660365294},{"_id":"themes/hexo-theme-matery-develop/source/libs/lightGallery/css/lightgallery.min.css","hash":"7873d80020ae04955bb57521bd249a6974d1180f","modified":1712660365199},{"_id":"themes/hexo-theme-matery-develop/source/libs/lightGallery/fonts/lg.svg","hash":"94c83160bddccf08bd7424de40d738716f1eeb3a","modified":1712660365214},{"_id":"themes/hexo-theme-matery-develop/source/libs/lightGallery/fonts/lg.ttf","hash":"49693fa946534a56d7e5d4274e1ce55b05d782c3","modified":1712660365214},{"_id":"themes/hexo-theme-matery-develop/source/libs/lightGallery/img/loading.gif","hash":"15a76af2739482d8de7354abc6d8dc4fca8d145e","modified":1712660365214},{"_id":"themes/hexo-theme-matery-develop/source/libs/lightGallery/img/video-play.png","hash":"2962e03ddbe04d7e201a5acccac531a2bbccddfc","modified":1712660365214},{"_id":"themes/hexo-theme-matery-develop/source/libs/lightGallery/img/vimeo-play.png","hash":"9b72fc0f86a01467ed0b68c9cc4d604ec316d517","modified":1712660365214},{"_id":"themes/hexo-theme-matery-develop/source/libs/lightGallery/img/youtube-play.png","hash":"f8d11384d33b7a79ee2ba8d522844f14d5067a80","modified":1712660365214},{"_id":"themes/hexo-theme-matery-develop/source/libs/lightGallery/js/lightgallery-all.min.js","hash":"c55278b00976c96e1df949ca5afee79b8ab385b2","modified":1712660365214},{"_id":"themes/hexo-theme-matery-develop/source/libs/share/css/share.min.css","hash":"7126de5cec8371e580b7b1f22512da0985cc39e5","modified":1712660365247},{"_id":"themes/hexo-theme-matery-develop/source/libs/lightGallery/fonts/lg.woff","hash":"04f09ad797ced119d6608909d06e500f16a03bbb","modified":1712660365214},{"_id":"themes/hexo-theme-matery-develop/source/libs/awesome/webfonts/fa-regular-400.ttf","hash":"9b26d745a1e69b23d71b7ea36d5de1209c997901","modified":1712660365183},{"_id":"themes/hexo-theme-matery-develop/source/libs/awesome/webfonts/fa-regular-400.woff2","hash":"f7a09bcbd996fd634045d4e79b6504c945730686","modified":1712660365183},{"_id":"themes/hexo-theme-matery-develop/source/libs/awesome/webfonts/fa-v4compatibility.ttf","hash":"3fc15c8154f8bd2d7bd1dfe55ae5ab1c33e5e40f","modified":1712660365183},{"_id":"themes/hexo-theme-matery-develop/source/libs/awesome/webfonts/fa-v4compatibility.woff2","hash":"37ab2a6a0810d5a6c10a355fe1d7af0042bd6a2a","modified":1712660365183},{"_id":"themes/hexo-theme-matery-develop/source/libs/share/fonts/iconfont.eot","hash":"00ff749c8e202401190cc98d56087cdda716abe4","modified":1712660365247},{"_id":"themes/hexo-theme-matery-develop/source/libs/share/js/jquery.share.min.js","hash":"de34668d902ec082d17ddb6dd7ad24255fb547c5","modified":1712660365260},{"_id":"themes/hexo-theme-matery-develop/source/libs/share/fonts/iconfont.svg","hash":"1d56c9d5db0273f07c43cc1397e440f98ba7827a","modified":1712660365247},{"_id":"themes/hexo-theme-matery-develop/source/libs/share/fonts/iconfont.woff","hash":"2e3fce1dcfbd6e2114e7bfbeaf72d3c62e15a1bd","modified":1712660365247},{"_id":"themes/hexo-theme-matery-develop/source/libs/share/fonts/iconfont.ttf","hash":"afd898f59d363887418669520b24d175f966a083","modified":1712660365247},{"_id":"themes/hexo-theme-matery-develop/source/libs/share/js/social-share.min.js","hash":"ba635a17a9d9d132369f9fe4b1fbcaf001ea6ac9","modified":1712660365260},{"_id":"source/_drafts/Spring-Boot常用注解.pdf","hash":"6fe014cecca8501168c1bb1219a1af353a4d5d4f","modified":1712660365103},{"_id":"source/_posts/mysql-基础篇/JOIN.png","hash":"56312c4b91584253287b4489ff9538703292e328","modified":1712660365120},{"_id":"themes/hexo-theme-matery-develop/source/libs/fancybox/fancybox.js","hash":"eef46b6fb2e460838cd7328a6e13ecda0cb1e194","modified":1712660365199},{"_id":"themes/hexo-theme-matery-develop/source/libs/gitment/gitment.js","hash":"5a13983930b019450e4fe01a407c64b3dd316be4","modified":1712660365199},{"_id":"themes/hexo-theme-matery-develop/source/libs/jquery/jquery-3.6.0.min.js","hash":"4cd5ddc413b3024d7b56331c0d0d0b2bd933f27f","modified":1712660365199},{"_id":"themes/hexo-theme-matery-develop/source/medias/banner/0.jpg","hash":"69ec96cd9b4bc3aa631adc9da61353f50c39f031","modified":1712660365265},{"_id":"themes/hexo-theme-matery-develop/source/medias/banner/2.jpg","hash":"39fb2535460ce66cc0b34e07ffb9411db1405f09","modified":1712660365265},{"_id":"themes/hexo-theme-matery-develop/source/medias/banner/3.jpg","hash":"4ac047e92d0363b1a61ab756aca6dac13fb77494","modified":1712660365265},{"_id":"themes/hexo-theme-matery-develop/source/medias/featureimages/0.jpg","hash":"1c3300f029fc85d6dda6fa4f1d699551034cdaf7","modified":1712660365278},{"_id":"themes/hexo-theme-matery-develop/source/medias/featureimages/1.jpg","hash":"684ae89de8cb7acefae19f5aee6c612037c46393","modified":1712660365278},{"_id":"themes/hexo-theme-matery-develop/source/medias/featureimages/11.jpg","hash":"f55972ce7175684f2b11c3c9fc2b5b14bccbfae8","modified":1712660365278},{"_id":"themes/hexo-theme-matery-develop/source/medias/featureimages/12.jpg","hash":"8a4b2e7d92ae95c3b0c921db23c35aa9a41a7d58","modified":1712660365278},{"_id":"themes/hexo-theme-matery-develop/source/medias/featureimages/14.jpg","hash":"38e11221406785bcd93aa9cd23e568e164630ef1","modified":1712660365278},{"_id":"themes/hexo-theme-matery-develop/source/medias/featureimages/18.jpg","hash":"64829272ec85bb819d55ff89e5b5fd6f64aa436b","modified":1712660365278},{"_id":"themes/hexo-theme-matery-develop/source/medias/featureimages/17.jpg","hash":"42d47903551ee81885c1386022982cae165841c5","modified":1712660365278},{"_id":"themes/hexo-theme-matery-develop/source/medias/featureimages/19.jpg","hash":"eb250906fdbc0c408f42ae9933725bc1a05d79fb","modified":1712660365278},{"_id":"themes/hexo-theme-matery-develop/source/medias/featureimages/20.jpg","hash":"3b11f9b461168d907073f793190865fe621a8573","modified":1712660365278},{"_id":"themes/hexo-theme-matery-develop/source/medias/featureimages/4.jpg","hash":"e06c47de27619984be9d5d02947f8370a432dfea","modified":1712660365294},{"_id":"themes/hexo-theme-matery-develop/source/medias/featureimages/6.jpg","hash":"c8f2aa4bbb041158b4e73733a341e6a77c8583f7","modified":1712660365294},{"_id":"themes/hexo-theme-matery-develop/source/medias/reward/wechat.png","hash":"5156030d10d1f4c82a4dce4609629f7a3870054f","modified":1712660365373},{"_id":"themes/hexo-theme-matery-develop/source/medias/featureimages/9.jpg","hash":"b956a2291a04b2132366b53666cf34858b8bdb1f","modified":1712660365294},{"_id":"themes/hexo-theme-matery-develop/source/libs/awesome/css/all.min.css","hash":"6ceed6950e44336bb51f1b19d4658e4324afcebd","modified":1712660365169},{"_id":"themes/hexo-theme-matery-develop/source/libs/awesome/webfonts/fa-brands-400.woff2","hash":"e219af1e3bbc2219359d3d0916e263b279c4abfd","modified":1712660365183},{"_id":"themes/hexo-theme-matery-develop/source/medias/cover.jpg","hash":"d4957ff7cc5e88555cd840f2956ab0561e6f1ccf","modified":1712660365278},{"_id":"themes/hexo-theme-matery-develop/source/libs/dplayer/DPlayer.min.js","hash":"104613de917a8576ff26aaa36d1c0c7bb4730f4e","modified":1712660365199},{"_id":"themes/hexo-theme-matery-develop/source/libs/materialize/materialize.min.css","hash":"a69d456e3345e7f59cd0d47d1b3e70fd4a496a05","modified":1712660365214},{"_id":"themes/hexo-theme-matery-develop/source/libs/valine/Valine.min.js","hash":"c2f2b1b0346e28ceae19f4b3d174f033311aa060","modified":1712660365265},{"_id":"themes/hexo-theme-matery-develop/source/medias/banner/1.jpg","hash":"ab122a36998a4f62a61e61a4fc5e00248113413b","modified":1712660365265},{"_id":"themes/hexo-theme-matery-develop/source/medias/banner/5.jpg","hash":"852418f4f09e796e12bc3bab7a1488d3f37d6486","modified":1712660365278},{"_id":"themes/hexo-theme-matery-develop/source/medias/banner/6.jpg","hash":"ed7282cc129c4ff9f322d2f2897fb4aac5c48589","modified":1712660365278},{"_id":"themes/hexo-theme-matery-develop/source/libs/awesome/webfonts/fa-brands-400.ttf","hash":"fa5745d421c0fc90928626be98e9f8cf7580b327","modified":1712660365183},{"_id":"themes/hexo-theme-matery-develop/source/js/crypto-js.js","hash":"ddacd177f23f65ff97b93b0417048f51928ee17e","modified":1712660365169},{"_id":"themes/hexo-theme-matery-develop/source/libs/materialize/materialize.min.js","hash":"c843f0dc497314574c608ca28cc742bb041786d5","modified":1712660365214},{"_id":"themes/hexo-theme-matery-develop/source/libs/valine/av-min.js","hash":"e47dd1412564cd6aacc4e0a596fd83074a747870","modified":1712660365265},{"_id":"themes/hexo-theme-matery-develop/source/libs/waline/Waline.min.js","hash":"3a17de5f24e0437c3c681b15f147ceef3980736f","modified":1712660365265},{"_id":"themes/hexo-theme-matery-develop/source/medias/images/02.jpg","hash":"a5b656606811f4d7e10307f48c0e3c373e0b886d","modified":1712660365294},{"_id":"themes/hexo-theme-matery-develop/source/medias/reward/alipay.jpg","hash":"c3a1a98d78af266397a2e94c3f8dccbf011a4e2f","modified":1712660365373},{"_id":"themes/hexo-theme-matery-develop/source/libs/awesome/css/all.css","hash":"9a8303b1c6334e2500da617810206ece45a8ac6b","modified":1712660365169},{"_id":"themes/hexo-theme-matery-develop/source/libs/awesome/webfonts/fa-solid-900.woff2","hash":"1979128e8ba1517d85f5e4ee505abf486c51557c","modified":1712660365183},{"_id":"themes/hexo-theme-matery-develop/source/medias/banner/4.jpg","hash":"e5ac5033678afa9d69edffe9a61004f836cb5734","modified":1712660365265},{"_id":"themes/hexo-theme-matery-develop/source/medias/images/03.jpg","hash":"2bd3815508a9f5b0ae79aa780bc02ac80b2a354e","modified":1712660365294},{"_id":"themes/hexo-theme-matery-develop/source/libs/awesome/webfonts/fa-solid-900.ttf","hash":"e3339400ef6214cfa077d003daed2bfa659e2956","modified":1712660365183},{"_id":"themes/hexo-theme-matery-develop/source/libs/prism/prism.min.js","hash":"5f1dde1f98a32a9910d6bdba4021375727120af7","modified":1712660365247},{"_id":"themes/hexo-theme-matery-develop/source/medias/images/01.jpg","hash":"6a81f437fb876666bafaa98b2a09bd8bd7f21832","modified":1712660365294},{"_id":"themes/hexo-theme-matery-develop/source/libs/twikoo/twikoo.all.min.js","hash":"d1ec95821873a81eddf4e5698698b39d54d2a8cc","modified":1712660365265},{"_id":"themes/hexo-theme-matery-develop/source/libs/gitalk/gitalk.min.js","hash":"1df59d7e5481ac2917c7043b28883393675dcaf9","modified":1712660365199},{"_id":"themes/hexo-theme-matery-develop/source/libs/echarts/echarts.min.js","hash":"8789b5e4daf0029a6c88f238f10e54d01c4fce82","modified":1712660365199},{"_id":"themes/hexo-theme-matery-develop/source/libs/mermaid/mermaid.min.js","hash":"5755d222f96a897b9f509d2859be21996a3dbfd0","modified":1712660365230},{"_id":"themes/hexo-theme-matery-develop/source/libs/mermaid/mermaid.js","hash":"3889e37cafaaace5e745ccd3e10c9255e32cae3a","modified":1712660365230},{"_id":"themes/hexo-theme-matery-develop/source/medias/musics/bigboy.mp3","hash":"a17bba45095c932a2a9c732be85ab3035a1c75fb","modified":1712660365373},{"_id":"public/search.xml","hash":"ec25034326124e8544f894798e98e40178628e25","modified":1712660946923},{"_id":"public/about/index.html","hash":"785fdc6482aa9ac680090d1ac702b4c7d816b337","modified":1712660946923},{"_id":"public/categories/index.html","hash":"77240435b08cac03dd146f504a3d13e83b67b0b8","modified":1712660946923},{"_id":"public/tags/index.html","hash":"833d124f5ca46827307bf95dffebe1a3d24d8cbd","modified":1712660946923},{"_id":"public/2024/04/07/yi-dao-feng-he-guai-suan-fa-ti-de-zong-jie-leetcode2818/index.html","hash":"822b4f9421201c9c0cec8f01f1345c528d577784","modified":1712660946923},{"_id":"public/2024/04/06/mysql-ji-chu-pian/index.html","hash":"cd631f4218d289ab189df22943097b66d487841d","modified":1712660946923},{"_id":"public/2024/04/06/zui-chang-di-zeng-zi-xu-lie-lis-wen-ti/index.html","hash":"66b0a5827df989273b27577fbab5c2986954d636","modified":1712660946923},{"_id":"public/2023/08/15/docker-ji-ben-shi-yong/index.html","hash":"e2c66dbf398f5ee08736237810246618e822364e","modified":1712660946923},{"_id":"public/2023/05/15/shu-lie-tong-xiang-gong-shi-zong-jie/index.html","hash":"36c9cc7863f4d80ce9c310501b9adab8af8f792f","modified":1712660946923},{"_id":"public/2023/05/08/ubuntu-an-zhuang-mysql8-0-liu-cheng-ji-lu/index.html","hash":"6368f4a9349d7e75697f8e7d8ab732894862fa2c","modified":1712660946923},{"_id":"public/2023/04/21/zhi-chi-cuda-de-opencv-bian-yi-liu-cheng/index.html","hash":"95fffd977703748e52c847cd5e69f3ae2684b58c","modified":1712660946923},{"_id":"public/2023/04/06/async-zhu-jie-shi-xiao-ji-lu/index.html","hash":"a8c2ffe3fe232a698eee4c5d07d2766de8234d7b","modified":1712660946923},{"_id":"public/2023/03/31/ubuntu20-04-xia-nginx-ffmpeg-nginx-http-flv-module-shi-xian-bo-fang-shi-pin-docker-bu-shu-suan-fa-de-huan-jing-pei-zhi/index.html","hash":"b989e728e99ab6dd19d0fa305ad8138fac90ad74","modified":1712660946923},{"_id":"public/2023/03/31/jie-jue-failed-to-configure-a-datasource-url-attribute-is-not-specified/index.html","hash":"cc16bbe9b25569aa55672295c995c6e6e61fdfcc","modified":1712660946923},{"_id":"public/2023/03/14/matlab-bian-yi-dll-wen-jian/index.html","hash":"91f35c1329117118291dd59969bf59ca9678db86","modified":1712660946923},{"_id":"public/2023/03/08/centos7-xia-pei-zhi-ssd-he-yolov5-de-huan-jing/index.html","hash":"2ddb59f53966417739eada53049b91057c73babc","modified":1712660946923},{"_id":"public/2023/02/04/spring-boot-chang-yong-zhu-jie/index.html","hash":"aa8c858e31800a4c8aabcf359dcfd21928efcc72","modified":1712660946923},{"_id":"public/2023/01/20/thymeleaf-ji-ben-shi-yong/index.html","hash":"8be8454ccfc2e86901e5ac29c6a8ffcef25d1f93","modified":1712660946923},{"_id":"public/2023/01/11/qi-yong-bo-ke-di-yi-tian/index.html","hash":"c971f6f138fad3d6ae447fa00734fa1975ad7a2c","modified":1712660946923},{"_id":"public/archives/index.html","hash":"02f7b91ca9d3dd8662de7725a1524305f8a38f4e","modified":1712660946923},{"_id":"public/archives/page/2/index.html","hash":"fa9aba1b6df2819e12e99a5fb8f1ab3afbc656a1","modified":1712660946923},{"_id":"public/archives/2023/index.html","hash":"66012a824315657cac178df9838d6caa3de5443b","modified":1712660946923},{"_id":"public/archives/2023/01/index.html","hash":"dfc6ce6be3c031e24daa490a81b460fd3d778b8d","modified":1712660946923},{"_id":"public/archives/2023/02/index.html","hash":"e4bef50ccb3a6a03a9a594bd8cc12892799fd5d3","modified":1712660946923},{"_id":"public/archives/2023/03/index.html","hash":"e59990764281514681b2ef82f4803a000d3ea4e2","modified":1712660946923},{"_id":"public/archives/2023/04/index.html","hash":"6b815f065c76c228e82a37ee2dc0b453c5de3010","modified":1712660946923},{"_id":"public/archives/2023/05/index.html","hash":"c615503d2035eb72134cf2d64e12f3feff992920","modified":1712660946923},{"_id":"public/archives/2023/08/index.html","hash":"963ac2442b672b6cb72ab7a7159625f70a6c33d3","modified":1712660946923},{"_id":"public/archives/2024/index.html","hash":"ea23c225b023162ec1a9c74f4d07f76fc2e922b9","modified":1712660946923},{"_id":"public/archives/2024/04/index.html","hash":"f1b8dc195a718297765d60cb1cb70a9b5cc129f7","modified":1712660946923},{"_id":"public/categories/spring/index.html","hash":"c3a74744fa0dcd00de6833fd4a339741c9588328","modified":1712660946923},{"_id":"public/categories/pytorch/index.html","hash":"44c156962404014956ec77f07c4f735323927784","modified":1712660946923},{"_id":"public/categories/环境配置/index.html","hash":"6f12c34b98805251b545bbae24a0ecde4c9f27b6","modified":1712660946923},{"_id":"public/categories/docker/index.html","hash":"eb3227fea09b6d91dcc2689ffb1b8d3527275bad","modified":1712660946923},{"_id":"public/categories/thymeleaf/index.html","hash":"3841f77435de14a72d93bfc16be6007f38529893","modified":1712660946923},{"_id":"public/categories/算法/index.html","hash":"b808039bb15d4d9c9166feecc58f7ab1f88e97b1","modified":1712660946923},{"_id":"public/categories/mysql/index.html","hash":"2e21761250811aa1c302bc27a1f0b29be8dcce51","modified":1712660946923},{"_id":"public/categories/高中数学/index.html","hash":"29b8de0f2dc0cf7841af912a30a8dcaa1c07dc6b","modified":1712660946923},{"_id":"public/categories/spring-boot/index.html","hash":"2c25247b9eac0aae14414afb0117015e4191dc03","modified":1712660946923},{"_id":"public/categories/opencv/index.html","hash":"3993ed16a38149bf8d08570a17aa750b7e32f1be","modified":1712660946923},{"_id":"public/index.html","hash":"bad4d3566e4548feda41012f0b0ce07c7b542222","modified":1712660946923},{"_id":"public/page/2/index.html","hash":"747cf99f8a69dfb0af178870f8c1fb8665ccdbee","modified":1712660946923},{"_id":"public/tags/cuda/index.html","hash":"179ba469792667e396d6d8600287e21e31d9d62b","modified":1712660946923},{"_id":"public/tags/spring/index.html","hash":"f6a6063fe3883c9da92d58024dd11844da0c04df","modified":1712660946923},{"_id":"public/tags/spring-boot/index.html","hash":"287ea815c1a9b2070a3583ba18fd2a9bd2152d9d","modified":1712660946923},{"_id":"public/tags/pytorch/index.html","hash":"899bc1fa2c3687df8c12c54a9c9c16514318657c","modified":1712660946923},{"_id":"public/tags/ssd/index.html","hash":"1eec0563784adaeab3050f0cea097768490468bd","modified":1712660946923},{"_id":"public/tags/yolov5/index.html","hash":"88f428103b5ade5d189fe6223f35ed013dbdc98c","modified":1712660946923},{"_id":"public/tags/centos/index.html","hash":"6e349e5130fcaaa2cb34a8815e503edc93cec922","modified":1712660946923},{"_id":"public/tags/nginx/index.html","hash":"cbe8fedb48f1a792d2f10f82364ad0e5e780b5e8","modified":1712660946923},{"_id":"public/tags/ffmpeg/index.html","hash":"1b9dbfda68aba4fa4cbd5f0bbbfcaeaa5a5608e0","modified":1712660946923},{"_id":"public/tags/docker/index.html","hash":"bfcbf4b67997983807483d2175f16eec1eef358e","modified":1712660946923},{"_id":"public/tags/java/index.html","hash":"3b40f3f2ae1c7d4e5bc21c043a65600b1e8cb213","modified":1712660946923},{"_id":"public/tags/mysql/index.html","hash":"a13f06e4fa8cf8a877cabea73692803f5399554e","modified":1712660946923},{"_id":"public/tags/matlab/index.html","hash":"9420dbb71e2f31902e2b986468ff66679c70c4af","modified":1712660946923},{"_id":"public/tags/thymeleaf/index.html","hash":"a191b64279c9a359333030089740ed155685789a","modified":1712660946923},{"_id":"public/tags/素数/index.html","hash":"82b034d8471bf63a31918e543e24b4bff0ce2a04","modified":1712660946923},{"_id":"public/tags/单调栈/index.html","hash":"ba1a1f05bc79ba931e26168d212e018b53b3d074","modified":1712660946923},{"_id":"public/tags/快速幂/index.html","hash":"c809dc41d56cb8b4e30b824f4f3a1415cfa9f645","modified":1712660946923},{"_id":"public/tags/贪心/index.html","hash":"4cff1f17132d544bb20ce45dab070abb292baed7","modified":1712660946923},{"_id":"public/tags/ubuntu/index.html","hash":"cdd2ccb0367ee40b70cb8503ae4c6a6485527796","modified":1712660946923},{"_id":"public/tags/启用博客第一天/index.html","hash":"3f0794abf3ed7f495c28bf5a32928c11e06e3b87","modified":1712660946923},{"_id":"public/tags/高中数学/index.html","hash":"d3db75c7f1bc80e1ee8654678273a27864919e22","modified":1712660946923},{"_id":"public/tags/数列/index.html","hash":"7afb9dc731757bab84119af95714576a26442ed2","modified":1712660946923},{"_id":"public/tags/通项公式/index.html","hash":"0725d5e26ac8f05a3e588707092d5f31499668ee","modified":1712660946923},{"_id":"public/tags/spring-boot错误记录/index.html","hash":"057922f07f50de83dc63fd4a31c89a7496d4cb36","modified":1712660946923},{"_id":"public/tags/Maven/index.html","hash":"cccb494b21e25200cda43cbb7b00bfc73b014f2d","modified":1712660946923},{"_id":"public/tags/LIS/index.html","hash":"4dae0af6900565fbc772bf3eb4a187f49c39170f","modified":1712660946923},{"_id":"public/tags/二分查找/index.html","hash":"7556db1d44da64ef6fb4f8c1b0b62df84dbf78b7","modified":1712660946923},{"_id":"public/tags/opencv/index.html","hash":"12c824d0fcabc75b931ede70af6e7ac04dbb24d3","modified":1712660946923},{"_id":"public/favicon.ico","hash":"06031b004b509ab1cc2d417ab4f944c5cdb17920","modified":1712660946923},{"_id":"public/origin_favicon.png","hash":"774fee8c6d0be9dbb010b20f36c06848d06e3da0","modified":1712660946923},{"_id":"public/medias/avatar.jpg","hash":"2a6287308628881ce27b9a7de53ba15c2be00d02","modified":1712660946923},{"_id":"public/medias/comment_bg.png","hash":"dfc93d24081884fbc58cab0f8fd19e77d31d6123","modified":1712660946923},{"_id":"public/medias/logo.png","hash":"a486ca952e79184bfe549d53fbf6ad627d5800a9","modified":1712660946923},{"_id":"public/medias/icp.png","hash":"27a96f31f7d0413c6ade6f40e06f021f501151c7","modified":1712660946923},{"_id":"public/libs/twikoo/twikoo.all.min.js.LICENSE.txt","hash":"6e1c8f7b23f06ca4c727c805fda053dc1d9193d0","modified":1712660946923},{"_id":"public/medias/barrager/1.png","hash":"b8c211690dba3addedfe7b928e3936cd487df0d6","modified":1712660946923},{"_id":"public/medias/barrager/close.png","hash":"045346df61ee01abe5018c5d9ba805d2831ce7b1","modified":1712660946923},{"_id":"public/medias/barrager/2.png","hash":"52b2b13373fe611ad2327b9b40426d6dc05b69cd","modified":1712660946923},{"_id":"public/medias/barrager/0.png","hash":"b30416fd3b3aec5af3fa90823a7e2e9c0af4cda8","modified":1712660946923},{"_id":"public/medias/featureimages/10.jpg","hash":"98e7f6fd9c97d4de9044b6871ca08ebf14db11b9","modified":1712660946923},{"_id":"public/medias/featureimages/13.jpg","hash":"35a320174f8e316e3eadaec658024276b651c6e9","modified":1712660946923},{"_id":"public/medias/featureimages/16.jpg","hash":"97a829c4bc94f9d2929b20a1a9b798c57b9f7205","modified":1712660946923},{"_id":"public/medias/featureimages/15.jpg","hash":"da0fbee3b7bde1607eace377ddf834c0be99edfe","modified":1712660946923},{"_id":"public/medias/featureimages/2.jpg","hash":"4bba691cf71a517ecaeaf42afd3e8f8b31e346c1","modified":1712660946923},{"_id":"public/medias/featureimages/21.jpg","hash":"b26edb128bb0bf58b23fd2f014e9555e89a2ca3b","modified":1712660946923},{"_id":"public/medias/featureimages/22.jpg","hash":"754579747a3e99747d890fca3162f370b96a7941","modified":1712660946923},{"_id":"public/medias/featureimages/23.jpg","hash":"7d7f37da3fa7128343adac23866449eb2c6a549a","modified":1712660946923},{"_id":"public/medias/featureimages/5.jpg","hash":"41ca20129a37fedc573eec28dd7d7b9e5b09228a","modified":1712660946923},{"_id":"public/medias/featureimages/3.jpg","hash":"6ec646c2a70f5f11edacf225c1477f2200a37a96","modified":1712660946923},{"_id":"public/medias/featureimages/7.jpg","hash":"7975141cd64e875122c0ea33daaca1a06bf00b8e","modified":1712660946923},{"_id":"public/medias/musics/bigboy-cover.jpg","hash":"d97b91fefcced5cab6d2c052086f49506e980b73","modified":1712660946923},{"_id":"public/medias/featureimages/8.jpg","hash":"8e4b7186352085483ca1174c7c0800114c48df8b","modified":1712660946923},{"_id":"public/libs/lightGallery/fonts/lg.svg","hash":"94c83160bddccf08bd7424de40d738716f1eeb3a","modified":1712660946923},{"_id":"public/libs/lightGallery/fonts/lg.ttf","hash":"49693fa946534a56d7e5d4274e1ce55b05d782c3","modified":1712660946923},{"_id":"public/libs/lightGallery/img/loading.gif","hash":"15a76af2739482d8de7354abc6d8dc4fca8d145e","modified":1712660946923},{"_id":"public/libs/lightGallery/img/vimeo-play.png","hash":"9b72fc0f86a01467ed0b68c9cc4d604ec316d517","modified":1712660946923},{"_id":"public/libs/lightGallery/img/youtube-play.png","hash":"f8d11384d33b7a79ee2ba8d522844f14d5067a80","modified":1712660946923},{"_id":"public/libs/lightGallery/img/video-play.png","hash":"2962e03ddbe04d7e201a5acccac531a2bbccddfc","modified":1712660946923},{"_id":"public/libs/lightGallery/fonts/lg.woff","hash":"04f09ad797ced119d6608909d06e500f16a03bbb","modified":1712660946923},{"_id":"public/libs/awesome/webfonts/fa-regular-400.ttf","hash":"9b26d745a1e69b23d71b7ea36d5de1209c997901","modified":1712660946923},{"_id":"public/libs/awesome/webfonts/fa-regular-400.woff2","hash":"f7a09bcbd996fd634045d4e79b6504c945730686","modified":1712660946923},{"_id":"public/libs/share/fonts/iconfont.eot","hash":"00ff749c8e202401190cc98d56087cdda716abe4","modified":1712660946923},{"_id":"public/libs/awesome/webfonts/fa-v4compatibility.ttf","hash":"3fc15c8154f8bd2d7bd1dfe55ae5ab1c33e5e40f","modified":1712660946923},{"_id":"public/libs/awesome/webfonts/fa-v4compatibility.woff2","hash":"37ab2a6a0810d5a6c10a355fe1d7af0042bd6a2a","modified":1712660946923},{"_id":"public/libs/share/fonts/iconfont.woff","hash":"2e3fce1dcfbd6e2114e7bfbeaf72d3c62e15a1bd","modified":1712660946923},{"_id":"public/libs/share/fonts/iconfont.svg","hash":"1d56c9d5db0273f07c43cc1397e440f98ba7827a","modified":1712660946923},{"_id":"public/libs/share/fonts/iconfont.ttf","hash":"afd898f59d363887418669520b24d175f966a083","modified":1712660946923},{"_id":"public/2023/03/14/matlab-bian-yi-dll-wen-jian/deploytool.png","hash":"df5410aa519419ce3d9e429fc219ecc318613837","modified":1712660946923},{"_id":"public/2023/03/14/matlab-bian-yi-dll-wen-jian/deploytool3.png","hash":"26be9eb127be8c9f6eb33f580bf9f99614889a8d","modified":1712660946923},{"_id":"public/2023/03/31/jie-jue-failed-to-configure-a-datasource-url-attribute-is-not-specified/application.png","hash":"c6fda1f702d44678f5df65636387bfc9cf490535","modified":1712660946923},{"_id":"public/2023/02/04/spring-boot-chang-yong-zhu-jie/@Bean1.png","hash":"ea3f8821b1e6e3a98022493086cc6a653ca26fef","modified":1712660946923},{"_id":"public/2023/02/04/spring-boot-chang-yong-zhu-jie/@Bean2.png","hash":"0804ecdb251ece76f23762d06e0467a85a13108e","modified":1712660946923},{"_id":"public/2023/02/04/spring-boot-chang-yong-zhu-jie/@Bean3.png","hash":"bd0aff293fffa30b00dbb210ae07d15457529004","modified":1712660946923},{"_id":"public/2023/02/04/spring-boot-chang-yong-zhu-jie/@Bean4.png","hash":"f52ac7e565eae27d157ed01a1ef69af2e108d00f","modified":1712660946923},{"_id":"public/2023/02/04/spring-boot-chang-yong-zhu-jie/@Component1.png","hash":"d5a01f9e9f00e9bad47267659dd30012c15b8d7b","modified":1712660946923},{"_id":"public/2023/02/04/spring-boot-chang-yong-zhu-jie/@Component2.png","hash":"5ec42540929e93d0bd6e7775ae0af2ba7406dd46","modified":1712660946923},{"_id":"public/2023/02/04/spring-boot-chang-yong-zhu-jie/@Configuration1.png","hash":"2be16e82256a3364f6ee6bf1c74fed9e735fc0a6","modified":1712660946923},{"_id":"public/2023/02/04/spring-boot-chang-yong-zhu-jie/@Configuration2.png","hash":"ab94b1ea377f399bceb9c3831cc2f373c8ee9388","modified":1712660946923},{"_id":"public/2023/02/04/spring-boot-chang-yong-zhu-jie/@ControllerAdvice1.png","hash":"d95e0dc170a46356305872e757ae19e545c5e70e","modified":1712660946923},{"_id":"public/2023/02/04/spring-boot-chang-yong-zhu-jie/@ControllerAdvice2.png","hash":"4f37859b6d02bb932d8119f64adac2a9913ba864","modified":1712660946923},{"_id":"public/2023/02/04/spring-boot-chang-yong-zhu-jie/@Lazy1.png","hash":"2a11da27ea677857ccfe8bf79b965ed325f96b75","modified":1712660946923},{"_id":"public/2023/02/04/spring-boot-chang-yong-zhu-jie/@ModelAttribute1.png","hash":"f42e74bb71042f8ac2e60e228134e02569ea476f","modified":1712660946923},{"_id":"public/2023/02/04/spring-boot-chang-yong-zhu-jie/@ModelAttribute2.png","hash":"12c470b0e76a638f4399271c6cae4274d0562527","modified":1712660946923},{"_id":"public/2023/02/04/spring-boot-chang-yong-zhu-jie/@PreDestroy1.png","hash":"c8f3117af036943860fe5adefd8140e72ee75807","modified":1712660946923},{"_id":"public/2023/02/04/spring-boot-chang-yong-zhu-jie/@RequestBody1.png","hash":"52779b1a5af858096afffdc2177f41c19810fd0e","modified":1712660946923},{"_id":"public/medias/banner/0.jpg","hash":"69ec96cd9b4bc3aa631adc9da61353f50c39f031","modified":1712660946923},{"_id":"public/medias/banner/2.jpg","hash":"39fb2535460ce66cc0b34e07ffb9411db1405f09","modified":1712660946923},{"_id":"public/medias/featureimages/0.jpg","hash":"1c3300f029fc85d6dda6fa4f1d699551034cdaf7","modified":1712660946923},{"_id":"public/medias/banner/3.jpg","hash":"4ac047e92d0363b1a61ab756aca6dac13fb77494","modified":1712660946923},{"_id":"public/medias/featureimages/1.jpg","hash":"684ae89de8cb7acefae19f5aee6c612037c46393","modified":1712660946923},{"_id":"public/medias/featureimages/11.jpg","hash":"f55972ce7175684f2b11c3c9fc2b5b14bccbfae8","modified":1712660946923},{"_id":"public/medias/featureimages/12.jpg","hash":"8a4b2e7d92ae95c3b0c921db23c35aa9a41a7d58","modified":1712660946923},{"_id":"public/medias/featureimages/14.jpg","hash":"38e11221406785bcd93aa9cd23e568e164630ef1","modified":1712660946923},{"_id":"public/medias/featureimages/17.jpg","hash":"42d47903551ee81885c1386022982cae165841c5","modified":1712660946923},{"_id":"public/medias/featureimages/18.jpg","hash":"64829272ec85bb819d55ff89e5b5fd6f64aa436b","modified":1712660946923},{"_id":"public/medias/featureimages/19.jpg","hash":"eb250906fdbc0c408f42ae9933725bc1a05d79fb","modified":1712660946923},{"_id":"public/medias/featureimages/20.jpg","hash":"3b11f9b461168d907073f793190865fe621a8573","modified":1712660946923},{"_id":"public/medias/featureimages/4.jpg","hash":"e06c47de27619984be9d5d02947f8370a432dfea","modified":1712660946923},{"_id":"public/medias/featureimages/6.jpg","hash":"c8f2aa4bbb041158b4e73733a341e6a77c8583f7","modified":1712660946923},{"_id":"public/medias/reward/wechat.png","hash":"5156030d10d1f4c82a4dce4609629f7a3870054f","modified":1712660946923},{"_id":"public/medias/featureimages/9.jpg","hash":"b956a2291a04b2132366b53666cf34858b8bdb1f","modified":1712660946923},{"_id":"public/libs/awesome/webfonts/fa-brands-400.woff2","hash":"e219af1e3bbc2219359d3d0916e263b279c4abfd","modified":1712660946923},{"_id":"public/2023/03/14/matlab-bian-yi-dll-wen-jian/deploytool2.png","hash":"aa3e58ea9a196212d697f02f7c155f49cecd277c","modified":1712660946923},{"_id":"public/medias/cover.jpg","hash":"d4957ff7cc5e88555cd840f2956ab0561e6f1ccf","modified":1712660946923},{"_id":"public/medias/banner/1.jpg","hash":"ab122a36998a4f62a61e61a4fc5e00248113413b","modified":1712660946923},{"_id":"public/medias/banner/5.jpg","hash":"852418f4f09e796e12bc3bab7a1488d3f37d6486","modified":1712660946923},{"_id":"public/medias/banner/6.jpg","hash":"ed7282cc129c4ff9f322d2f2897fb4aac5c48589","modified":1712660946923},{"_id":"public/libs/awesome/webfonts/fa-solid-900.woff2","hash":"1979128e8ba1517d85f5e4ee505abf486c51557c","modified":1712660946923},{"_id":"public/2023/05/08/ubuntu-an-zhuang-mysql8-0-liu-cheng-ji-lu/mysql8安装2.png","hash":"6ab548a2a612bd8fb163e5ebdaea7c12d9e466e0","modified":1712660946923},{"_id":"public/2023/05/08/ubuntu-an-zhuang-mysql8-0-liu-cheng-ji-lu/mysql8安装1.png","hash":"7b16fba279d6eb7d12111508ff0f15eed3d5f335","modified":1712660946923},{"_id":"public/2023/05/08/ubuntu-an-zhuang-mysql8-0-liu-cheng-ji-lu/mysql8安装4.png","hash":"36d592ed5ef0872476e32814a4fd3580b86e1398","modified":1712660946923},{"_id":"public/css/barrager.css","hash":"862879d9313ed8d4c721fa32ef8f94ac2f0a28ae","modified":1712660946923},{"_id":"public/css/bb.css","hash":"aa15633888c7cf9baea8bb48d796c68b57cf14bf","modified":1712660946923},{"_id":"public/css/gallery.css","hash":"79dfdf68d675c17782271647283c568d086e4b98","modified":1712660946923},{"_id":"public/css/gitment.css","hash":"2bd15cc17dca35ac3ecc0acf167a23a1dd362acd","modified":1712660946923},{"_id":"public/css/my-gitalk.css","hash":"af18dd29e58642c18bab9b89541767b494c468dd","modified":1712660946923},{"_id":"public/css/indexcover.css","hash":"4dea2c489452c3efe70fa91a6a7678da64d895da","modified":1712660946923},{"_id":"public/css/my.css","hash":"497e50351f7838f8546cac76850a42e7e380a110","modified":1712660946923},{"_id":"public/css/post.css","hash":"d38c71eddb8af1752c48eb48595fbaf89450ff40","modified":1712660946923},{"_id":"public/css/reward.css","hash":"98b32aabeb908727844af04c31f08da6cab08335","modified":1712660946923},{"_id":"public/js/gallery-encrypt.js","hash":"18dcfa4a8da8847b64be75f287f45c0e830bbcab","modified":1712660946923},{"_id":"public/js/jquery.barrager.js","hash":"19c8b2498ca1083e537f7f443172970912107f83","modified":1712660946923},{"_id":"public/js/matery.js","hash":"aa957ea8cf6787f0ed6095fedc6cb9d7d1bf3522","modified":1712660946923},{"_id":"public/js/search.js","hash":"5caa2d6e3d34c334ac68dfaafc81a583d6123382","modified":1712660946923},{"_id":"public/libs/aos/aos.js","hash":"02bfb40b0c4b6e9b0b4081218357145cbb327d74","modified":1712660946923},{"_id":"public/libs/aplayer/APlayer.min.css","hash":"07372a2ba507388d0fed166d761b1c2c2a659dce","modified":1712660946923},{"_id":"public/libs/aplayer/Meting.min.js","hash":"f2b3d20b8bd64ccd031c64628f2b1323078ae324","modified":1712660946923},{"_id":"public/libs/codeBlock/codeBlockFuction.js","hash":"c7ab06d27a525b15b1eb69027135269e9b9132fb","modified":1712660946923},{"_id":"public/libs/codeBlock/codeCopy.js","hash":"6d39a766af62e625f177c4d5cf3adc35eed71e61","modified":1712660946923},{"_id":"public/libs/codeBlock/codeShrink.js","hash":"201e8cd761b4be557247bdaf1ebc7c11c83194f6","modified":1712660946923},{"_id":"public/libs/background/canvas-nest.js","hash":"65333d0dbb9c1173a1b13031b230161fc42c8b2f","modified":1712660946923},{"_id":"public/libs/codeBlock/codeLang.js","hash":"bac88b4d4e3679732d29bd037c34f089cf27cf05","modified":1712660946923},{"_id":"public/libs/background/ribbon.min.js","hash":"6a99d494c030388f96f6086a7aaa0f03f3fe532e","modified":1712660946923},{"_id":"public/libs/background/ribbon-dynamic.js","hash":"052b80c29e6bc585aa28d4504b743bdbac220a88","modified":1712660946923},{"_id":"public/libs/background/ribbon-refresh.min.js","hash":"6d98692b2cad8c746a562db18b170b35c24402f4","modified":1712660946923},{"_id":"public/libs/fancybox/jquery.fancybox.css","hash":"1be9b79be02a1cfc5d96c4a5e0feb8f472babd95","modified":1712660946923},{"_id":"public/libs/instantpage/instantpage.js","hash":"83ce8919b1a69b2f1809ffaf99b52a8627e650e9","modified":1712660946923},{"_id":"public/libs/jqcloud/jqcloud-1.0.4.min.js","hash":"257eaae3020599e4939f50d5008a743827f25b8c","modified":1712660946923},{"_id":"public/libs/jqcloud/jqcloud.css","hash":"20d9f11a19d95c70e27cb922e0d6dccbec4eae89","modified":1712660946923},{"_id":"public/libs/justifiedGallery/justifiedGallery.min.css","hash":"89fb099880771c23dce3005a87db36053c8c491c","modified":1712660946923},{"_id":"public/libs/mermaid/mermaid.min.css","hash":"1dbcd9312e57f2a0b569451d0028d88316614481","modified":1712660946923},{"_id":"public/libs/scrollprogress/scrollProgress.min.js","hash":"777ffe5d07e85a14fbe97d846f45ffc0087251cc","modified":1712660946923},{"_id":"public/libs/minivaline/MiniValine.js","hash":"f7f6cdc1b22297e02334e304444e9a8351acb455","modified":1712660946923},{"_id":"public/libs/prism/prism.min.css","hash":"ed3896649670cf142e514685da2b060cca5fd43a","modified":1712660946923},{"_id":"public/libs/others/busuanzi.pure.mini.js","hash":"6e41f31100ae7eb3a6f23f2c168f6dd56e7f7a9a","modified":1712660946923},{"_id":"public/libs/others/TencentCaptcha.js","hash":"10a034ac0b4ebe97ec5916b092b36fa2d6e9edd0","modified":1712660946923},{"_id":"public/libs/others/clicklove.js","hash":"6a39b8c683ba5dcd92f70c6ab45d1cfac3213e8e","modified":1712660946923},{"_id":"public/libs/others/snow.js","hash":"02b1eeaca737c47be637b304feb3d36d792ee0c4","modified":1712660946923},{"_id":"public/libs/tocbot/tocbot.css","hash":"15601837bf8557c2fd111e4450ed4c8495fd11a0","modified":1712660946923},{"_id":"public/libs/typed/typed.js","hash":"eaf2798298790ec3fad17f6c68b5d3b02dfd069c","modified":1712660946923},{"_id":"public/libs/others/star.js","hash":"cf32f8ce2a1a51ba65d3b6063fe2ee1482550190","modified":1712660946923},{"_id":"public/libs/tocbot/tocbot.min.js","hash":"39055053a477e7d54b46cfb46591f84cc3818eeb","modified":1712660946923},{"_id":"public/libs/share/css/share.min.css","hash":"8a778a86f3ce9a042df6be63a9f1039631e351a5","modified":1712660946923},{"_id":"public/medias/images/02.jpg","hash":"a5b656606811f4d7e10307f48c0e3c373e0b886d","modified":1712660946923},{"_id":"public/medias/reward/alipay.jpg","hash":"c3a1a98d78af266397a2e94c3f8dccbf011a4e2f","modified":1712660946923},{"_id":"public/js/tw_cn.js","hash":"29157cdfa87aec28e56d3d5717d486bf4de07db6","modified":1712660946923},{"_id":"public/libs/aos/aos.css","hash":"191a3705a8f63e589a50a0ff2f2c5559f1a1b6b2","modified":1712660946923},{"_id":"public/libs/gitment/gitment-default.css","hash":"2903c59ee06b965bef32e937bd69f5b0b2190717","modified":1712660946923},{"_id":"public/libs/justifiedGallery/justifiedGallery.min.js","hash":"82ab395176c927ffbb2f7c95132ee0a06cd5d64a","modified":1712660946923},{"_id":"public/libs/masonry/masonry.pkgd.min.js","hash":"d20252cf76c3be8af37a8415d13ad368c762b4d8","modified":1712660946923},{"_id":"public/libs/gitalk/gitalk.css","hash":"61d71cb30f5f34cbb1f2b5bc469784d6cb908c22","modified":1712660946923},{"_id":"public/libs/lightGallery/css/lightgallery.min.css","hash":"7873d80020ae04955bb57521bd249a6974d1180f","modified":1712660946923},{"_id":"public/libs/share/js/jquery.share.min.js","hash":"41367dcb857e02e3c417ebe68a554ce1d4430806","modified":1712660946923},{"_id":"public/libs/share/js/social-share.min.js","hash":"a3090a02786dcd4efc6355c1c1dc978add8d6827","modified":1712660946923},{"_id":"public/libs/awesome/webfonts/fa-brands-400.ttf","hash":"fa5745d421c0fc90928626be98e9f8cf7580b327","modified":1712660946923},{"_id":"public/2023/01/20/thymeleaf-ji-ben-shi-yong/thymeleaf1.png","hash":"20632b1d9a55d701d2de14d559f926983de12c1b","modified":1712660946923},{"_id":"public/2023/05/08/ubuntu-an-zhuang-mysql8-0-liu-cheng-ji-lu/mysql8安装5.png","hash":"38125b62b47c5be396d375ea70cbf4bee0d87e49","modified":1712660946923},{"_id":"public/libs/cryptojs/crypto-js.min.js","hash":"5989527a378b55011a59522f41eeb3981518325c","modified":1712660946923},{"_id":"public/libs/dplayer/DPlayer.min.css","hash":"f7d19655f873b813ffba5d1a17145c91f82631b8","modified":1712660946923},{"_id":"public/medias/banner/4.jpg","hash":"e5ac5033678afa9d69edffe9a61004f836cb5734","modified":1712660946923},{"_id":"public/2023/05/08/ubuntu-an-zhuang-mysql8-0-liu-cheng-ji-lu/mysql8安装3.png","hash":"daeafd995ae6ec10b274d90ff89aba75d62fe0ab","modified":1712660946923},{"_id":"public/2023/05/08/ubuntu-an-zhuang-mysql8-0-liu-cheng-ji-lu/小丑.png","hash":"6a74af3a11a6fad8dfd0b7a07feaaaa96453eaef","modified":1712660946923},{"_id":"public/css/dark.css","hash":"0dcd292d10f27f11c18d1a1a461b7e0cfe6c55cf","modified":1712660946923},{"_id":"public/css/matery.css","hash":"413ad9731332810823b57dd0f4c0284e3af2af63","modified":1712660946923},{"_id":"public/libs/animate/animate.min.css","hash":"97afa151569f046b2e01f27c1871646e9cd87caf","modified":1712660946923},{"_id":"public/libs/aplayer/APlayer.min.js","hash":"22caa28ff6b41a16ff40f15d38f1739e22359478","modified":1712660946923},{"_id":"public/libs/others/sakura-half.js","hash":"a41b64af88fdd0e2d3502752d059661c1bc743dc","modified":1712660946923},{"_id":"public/libs/others/sakura-reduce.js","hash":"f7527e9fb4e6fe2cc7c8880692d77bcda95900c7","modified":1712660946923},{"_id":"public/libs/others/sakura-small.js","hash":"3284a9ab71454e574d80663f3a05735cd12a6a05","modified":1712660946923},{"_id":"public/libs/others/sakura.js","hash":"9e196ab241799126e6a2dd23ee1708b1505ccbf0","modified":1712660946923},{"_id":"public/libs/lightGallery/js/lightgallery-all.min.js","hash":"aab2633f69581c2e26e22a23712f1501d7fcec18","modified":1712660946923},{"_id":"public/libs/fancybox/fancybox.js","hash":"6181412e73966696d08e1e5b1243a572d0f22ba6","modified":1712660946923},{"_id":"public/libs/gitment/gitment.js","hash":"28c02c45ce568e084cd1041dc493f83f9c6c88c6","modified":1712660946923},{"_id":"public/libs/awesome/webfonts/fa-solid-900.ttf","hash":"e3339400ef6214cfa077d003daed2bfa659e2956","modified":1712660946923},{"_id":"public/libs/jquery/jquery-3.6.0.min.js","hash":"b82d238d4e31fdf618bae8ac11a6c812c03dd0d4","modified":1712660946923},{"_id":"public/medias/images/03.jpg","hash":"2bd3815508a9f5b0ae79aa780bc02ac80b2a354e","modified":1712660946923},{"_id":"public/libs/awesome/css/all.min.css","hash":"0ae47fa834fb55de7b50c79021aeabecfae50c9c","modified":1712660946923},{"_id":"public/libs/materialize/materialize.min.css","hash":"a69d456e3345e7f59cd0d47d1b3e70fd4a496a05","modified":1712660946923},{"_id":"public/2024/04/06/mysql-ji-chu-pian/JOIN.png","hash":"56312c4b91584253287b4489ff9538703292e328","modified":1712660946923},{"_id":"public/libs/dplayer/DPlayer.min.js","hash":"490148a22ab2b03a880495cc733ecd1840c02ed6","modified":1712660946923},{"_id":"public/libs/waline/Waline.min.js","hash":"94f70e622e2a1ab05adb205033a9ddf371c61534","modified":1712660946923},{"_id":"public/libs/awesome/css/all.css","hash":"8d63fa8b0f60a50b07ac0f7e751f6f5e02ecdc44","modified":1712660946923},{"_id":"public/medias/images/01.jpg","hash":"6a81f437fb876666bafaa98b2a09bd8bd7f21832","modified":1712660946923},{"_id":"public/libs/materialize/materialize.min.js","hash":"c8b4c65651921d888cf5f27430dfe2ad190d35bf","modified":1712660946923},{"_id":"public/libs/valine/Valine.min.js","hash":"d081a412c63411a75a3a880ddece65335d1c3ee8","modified":1712660946923},{"_id":"public/js/crypto-js.js","hash":"3dd73b6f13dc818a3a9c5c7424c1c4a9649b00a2","modified":1712660946923},{"_id":"public/libs/valine/av-min.js","hash":"db56ef6acb789da00d39bd6b97c1b09c2d429195","modified":1712660946923},{"_id":"public/libs/twikoo/twikoo.all.min.js","hash":"c3f5f0a69b7864e7ef5bbf99fc774bec37947d7c","modified":1712660946923},{"_id":"public/libs/prism/prism.min.js","hash":"9fa9f22354ad315d762603d56fb6412b83eca3cb","modified":1712660946923},{"_id":"public/libs/echarts/echarts.min.js","hash":"9496f386a0da4601cad22c479cc5543913a4d67f","modified":1712660946923},{"_id":"public/libs/gitalk/gitalk.min.js","hash":"564fc7c731d05fa70d71ef853a2c8cc7725739e2","modified":1712660946923},{"_id":"public/libs/mermaid/mermaid.min.js","hash":"6bee48c26c32b90f50519f125890fcbb04779da6","modified":1712660946923},{"_id":"public/medias/musics/bigboy.mp3","hash":"a17bba45095c932a2a9c732be85ab3035a1c75fb","modified":1712660946923},{"_id":"public/libs/mermaid/mermaid.js","hash":"a7933bef8aba190825ba7716497209187ac1de5d","modified":1712660946923}],"Category":[{"name":"cuda","_id":"clusa3wnh00042s7eclplbq79"},{"name":"spring","_id":"clusa3wnl000a2s7ebsx5007d"},{"name":"pytorch","_id":"clusa3wnn000f2s7efz4ld0c3"},{"name":"环境配置","_id":"clusa3wnq000m2s7e6fek7jdo"},{"name":"docker","_id":"clusa3wnt000r2s7e3q5thnme"},{"name":"thymeleaf","_id":"clusa3wnw000x2s7e4qnx0pzc"},{"name":"算法","_id":"clusa3wny00102s7eesrb7mnv"},{"name":"mysql","_id":"clusa3wo000132s7e1ox9dt46"},{"name":"高中数学","_id":"clusa3wo000162s7e16bhfzyu"},{"name":"spring boot","_id":"clusa3wo1001b2s7e8o4bg9jd"},{"name":"opencv","_id":"clusa3woe002q2s7e9m6lgijc"}],"Data":[],"Page":[{"title":"about","date":"2023-01-11T08:00:28.000Z","type":"tags","layout":"tags","_content":"","source":"about/index.md","raw":"---\ntitle: about\ndate: 2023-01-11 16:00:28\ntype: \"tags\"\nlayout: \"tags\"\n---\n","updated":"2024-04-09T10:59:25.135Z","path":"about/index.html","comments":1,"_id":"clusa3wnb00002s7e8e4ncenl","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"categories","date":"2023-01-11T07:58:26.000Z","type":"categories","layout":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2023-01-11 15:58:26\ntype: \"categories\"\nlayout: \"categories\"\n---\n","updated":"2024-04-09T10:59:25.135Z","path":"categories/index.html","comments":1,"_id":"clusa3wnf00022s7e1l996ifg","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"tags","date":"2023-01-11T08:00:18.000Z","type":"tags","layout":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2023-01-11 16:00:18\ntype: \"tags\"\nlayout: \"tags\"\n---\n","updated":"2024-04-09T10:59:25.135Z","path":"tags/index.html","comments":1,"_id":"clusa3wnj00062s7e5iah1jww","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"centos7下安装NVIDIA显卡驱动和CUDA","date":"2023-03-09T08:00:21.000Z","_content":"# linux下安装NVIDIA显卡驱动和CUDA\n## NVIDIA显卡驱动安装\n<https://blog.csdn.net/tony_vip/article/details/104531383>\n## CUDA\nhttps://blog.csdn.net/shiner_chen/article/details/125857553\n<https://blog.csdn.net/laijianzong/article/details/127535345>\n\n## cudnn\nhttps://blog.csdn.net/weixin_46455141/article/details/125507029","source":"_drafts/centos7下安装NVIDIA显卡驱动和CUDA.md","raw":"---\ntitle: centos7下安装NVIDIA显卡驱动和CUDA\ndate: 2023-03-09 16:00:21\ntags: \n    - linux\n    - cuda\ncategories: cuda\n---\n# linux下安装NVIDIA显卡驱动和CUDA\n## NVIDIA显卡驱动安装\n<https://blog.csdn.net/tony_vip/article/details/104531383>\n## CUDA\nhttps://blog.csdn.net/shiner_chen/article/details/125857553\n<https://blog.csdn.net/laijianzong/article/details/127535345>\n\n## cudnn\nhttps://blog.csdn.net/weixin_46455141/article/details/125507029","slug":"centos7下安装NVIDIA显卡驱动和CUDA","published":0,"updated":"2024-04-09T10:59:25.103Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clusa3wnd00012s7eewuo901j","content":"<h1 id=\"linux下安装NVIDIA显卡驱动和CUDA\"><a href=\"#linux下安装NVIDIA显卡驱动和CUDA\" class=\"headerlink\" title=\"linux下安装NVIDIA显卡驱动和CUDA\"></a>linux下安装NVIDIA显卡驱动和CUDA</h1><h2 id=\"NVIDIA显卡驱动安装\"><a href=\"#NVIDIA显卡驱动安装\" class=\"headerlink\" title=\"NVIDIA显卡驱动安装\"></a>NVIDIA显卡驱动安装</h2><p><a href=\"https://blog.csdn.net/tony_vip/article/details/104531383\">https://blog.csdn.net/tony_vip/article/details/104531383</a></p>\n<h2 id=\"CUDA\"><a href=\"#CUDA\" class=\"headerlink\" title=\"CUDA\"></a>CUDA</h2><p><a href=\"https://blog.csdn.net/shiner_chen/article/details/125857553\">https://blog.csdn.net/shiner_chen/article/details/125857553</a><br><a href=\"https://blog.csdn.net/laijianzong/article/details/127535345\">https://blog.csdn.net/laijianzong/article/details/127535345</a></p>\n<h2 id=\"cudnn\"><a href=\"#cudnn\" class=\"headerlink\" title=\"cudnn\"></a>cudnn</h2><p><a href=\"https://blog.csdn.net/weixin_46455141/article/details/125507029\">https://blog.csdn.net/weixin_46455141/article/details/125507029</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"linux下安装NVIDIA显卡驱动和CUDA\"><a href=\"#linux下安装NVIDIA显卡驱动和CUDA\" class=\"headerlink\" title=\"linux下安装NVIDIA显卡驱动和CUDA\"></a>linux下安装NVIDIA显卡驱动和CUDA</h1><h2 id=\"NVIDIA显卡驱动安装\"><a href=\"#NVIDIA显卡驱动安装\" class=\"headerlink\" title=\"NVIDIA显卡驱动安装\"></a>NVIDIA显卡驱动安装</h2><p><a href=\"https://blog.csdn.net/tony_vip/article/details/104531383\">https://blog.csdn.net/tony_vip/article/details/104531383</a></p>\n<h2 id=\"CUDA\"><a href=\"#CUDA\" class=\"headerlink\" title=\"CUDA\"></a>CUDA</h2><p><a href=\"https://blog.csdn.net/shiner_chen/article/details/125857553\">https://blog.csdn.net/shiner_chen/article/details/125857553</a><br><a href=\"https://blog.csdn.net/laijianzong/article/details/127535345\">https://blog.csdn.net/laijianzong/article/details/127535345</a></p>\n<h2 id=\"cudnn\"><a href=\"#cudnn\" class=\"headerlink\" title=\"cudnn\"></a>cudnn</h2><p><a href=\"https://blog.csdn.net/weixin_46455141/article/details/125507029\">https://blog.csdn.net/weixin_46455141/article/details/125507029</a></p>\n"},{"title":"@Async注解失效记录","date":"2023-04-06T08:15:27.000Z","_content":"# @Async注解失效记录\n今天在做项目的时候，遇到了如下情景：\n> 业务场景：\n> 系统接入多个监控摄像头，并调用人脸识别算法，若视频中有人经过，启动录像，若无人，十秒后停止录像。\n\n我的做法如下：\n- 使用一个类```VideoRecorderService```来记录一个录制任务，它的部分代码如下：\n\n\n```java\n    private String inputFile;//文件输入路径\n\n    private String outputFile;//视频保存路径\n\n    private boolean status = false;//视频中是否有人\n\n    private boolean recording = false;//是否正在录制\n\n    private long noPersonTime;//记录视频中没有人的开始时刻\n\n    public void setStatus(boolean status){\n        if (!this.status && status){//上一时刻有人且这一时刻没人，记录noPersonTime\n            noPersonTime = System.currentTimeMillis();\n            log.info(\"开始录制，noPersonTime=\"+noPersonTime);\n        }\n        this.status = status;\n    }\n\n    @Async(\"threadPoolTaskExecutor\")//异步\n    public void startRecordVideo(VideoEntity video)\n            throws Exception {\n        //此处省略一系列流程\n\n        //开始录制视频\n        recording=true;\n            Frame frame = null;\n            while ( (frame = grabber.grabFrame()) != null) {//视频帧图像不为空\n                if (!status){\n                    if ((System.currentTimeMillis()-noPersonTime)>=(long)10*1000){//没人时间超过10s\n                        recording=false;\n                        log.info(\"许久无人，停止录制\");\n                        break;\n                    }\n                }\n                recorder.record(frame);//录制该帧\n            }\n        //停止录制视频\n    }   \n```\n\n> 录制视频的方法使用@Async实现异步，但是它失效了。\n> 一般@Async注解失效有如下三种原因：\n> 1. 在需要用到的 @Async 注解的类上加上 @EnableAsync，或者直接加在springboot启动类上；\n> 2. 异步处理方法（也就是加了 @Async 注解的方法）只能返回的是 void 或者 Future 类型；\n> 3. 同一个类中调用异步方法需要先获取代理类，因为 @Async 注解是基于Spring AOP （面向切面编程）的，而AOP的实现是基于动态代理模式实现的。有可能因为调用方法的是对象本身而不是代理对象，因为没有经过Spring容器。\n> \n> 我这里正是第三点出了问题，直接获取了```VideoRecorderService```对象而不是通过ioc容器获取它的动态代理。\n\n\n- 我的错误代码如下：\n```java\n    @Component\n    @Slf4j\n    public class InitFFmpeg implements ApplicationListener<ApplicationReadyEvent> {\n\n        @Autowired\n        private VideoMapping videoMapping;\n\n        public static HashMap<String,VideoRecorderService> map = new HashMap<>();\n\n        @Override//该方法在spring容器启动完成后自动调用\n        public void onApplicationEvent(ApplicationReadyEvent event) {\n            List<VideoEntity> videos = videoMapping.selectAllVideos();//查询摄像头信息\n\n            for (VideoEntity video : videos){\n\n                //初始化map，把摄像头和VideoRecorderService对象关联起来\n                map.put(video.getMonitorName(),new VideoRecorderService());\n\n                //这里是jar包启动就会自动推流\n                \n                //这里是调用算法的部分\n                \n            }\n        }}   \n```\n  > 由于这里直接new的对象，没有把它注册在ioc容器中，所以@Async失效。\n- 解决方法：\n  在```VideoConfiguration```类中写一个通过spring容器获取和注册bean的方法：\n```java\n    @Configuration\n    public class VideoConfiguration implements ApplicationContextAware {\n\n        private static ApplicationContext applicationContext;\n\n        @Override\n        public void setApplicationContext(ApplicationContext applicationContext) throws BeansException {\n            VideoConfiguration.applicationContext = applicationContext;\n        }\n\n        public static <T> T getBean(Class<T> tClass,String beanName){\n            if (applicationContext.containsBean(beanName)){\n                return applicationContext.getBean(beanName, tClass);\n            }else {\n                return null;\n            }\n        }\n\n        /**\n        *  动态注入bean\n        * @param requiredType 注入类\n        * @param beanName bean名称\n        */\n        public static void registerBean(Class<?> requiredType,String beanName){\n\n            //将applicationContext转换为ConfigurableApplicationContext\n            ConfigurableApplicationContext configurableApplicationContext = (ConfigurableApplicationContext) applicationContext;\n\n            //获取BeanFactory\n            DefaultListableBeanFactory defaultListableBeanFactory = (DefaultListableBeanFactory) configurableApplicationContext.getAutowireCapableBeanFactory();\n\n            //创建bean信息.\n            BeanDefinitionBuilder beanDefinitionBuilder = BeanDefinitionBuilder.genericBeanDefinition(requiredType);\n\n            //动态注册bean.\n            defaultListableBeanFactory.registerBeanDefinition(beanName, beanDefinitionBuilder.getBeanDefinition());\n\n        }}\n```\n\n\n> 把InitFFmpeg类中的map删掉，并改成动态注册bean对象：\n\n\n```java\nfor (VideoEntity video : videos){\n\n    //初始化map，把摄像头和VideoRecorderService对象关联起来\n    //map.put(video.getMonitorName(),new VideoRecorderService());\n\n    //在ioc容器中注册bean\n    //使用摄像头名称来命名bean对象，在使用时根据名称获取bean\n    VideoConfiguration.registerBean(VideoRecorderService.class, video.getMonitorName());\n\n    //这里是jar包启动就会自动推流\n    \n    //这里是调用算法的部分\n    \n}\n\n\n//使用下面的语句获取bean对象：\nVideoRecorderService videoRecorderService = VideoConfiguration.getBean(VideoRecorderService.class, video.getMonitorName());\n```\n\n再次尝试，异步成功，搞定！\n","source":"_posts/Async注解失效记录.md","raw":"---\ntitle: '@Async注解失效记录'\ndate: 2023-04-06 16:15:27\ntags:\n  - spring\n  - spring boot\ncategories: spring\n---\n# @Async注解失效记录\n今天在做项目的时候，遇到了如下情景：\n> 业务场景：\n> 系统接入多个监控摄像头，并调用人脸识别算法，若视频中有人经过，启动录像，若无人，十秒后停止录像。\n\n我的做法如下：\n- 使用一个类```VideoRecorderService```来记录一个录制任务，它的部分代码如下：\n\n\n```java\n    private String inputFile;//文件输入路径\n\n    private String outputFile;//视频保存路径\n\n    private boolean status = false;//视频中是否有人\n\n    private boolean recording = false;//是否正在录制\n\n    private long noPersonTime;//记录视频中没有人的开始时刻\n\n    public void setStatus(boolean status){\n        if (!this.status && status){//上一时刻有人且这一时刻没人，记录noPersonTime\n            noPersonTime = System.currentTimeMillis();\n            log.info(\"开始录制，noPersonTime=\"+noPersonTime);\n        }\n        this.status = status;\n    }\n\n    @Async(\"threadPoolTaskExecutor\")//异步\n    public void startRecordVideo(VideoEntity video)\n            throws Exception {\n        //此处省略一系列流程\n\n        //开始录制视频\n        recording=true;\n            Frame frame = null;\n            while ( (frame = grabber.grabFrame()) != null) {//视频帧图像不为空\n                if (!status){\n                    if ((System.currentTimeMillis()-noPersonTime)>=(long)10*1000){//没人时间超过10s\n                        recording=false;\n                        log.info(\"许久无人，停止录制\");\n                        break;\n                    }\n                }\n                recorder.record(frame);//录制该帧\n            }\n        //停止录制视频\n    }   \n```\n\n> 录制视频的方法使用@Async实现异步，但是它失效了。\n> 一般@Async注解失效有如下三种原因：\n> 1. 在需要用到的 @Async 注解的类上加上 @EnableAsync，或者直接加在springboot启动类上；\n> 2. 异步处理方法（也就是加了 @Async 注解的方法）只能返回的是 void 或者 Future 类型；\n> 3. 同一个类中调用异步方法需要先获取代理类，因为 @Async 注解是基于Spring AOP （面向切面编程）的，而AOP的实现是基于动态代理模式实现的。有可能因为调用方法的是对象本身而不是代理对象，因为没有经过Spring容器。\n> \n> 我这里正是第三点出了问题，直接获取了```VideoRecorderService```对象而不是通过ioc容器获取它的动态代理。\n\n\n- 我的错误代码如下：\n```java\n    @Component\n    @Slf4j\n    public class InitFFmpeg implements ApplicationListener<ApplicationReadyEvent> {\n\n        @Autowired\n        private VideoMapping videoMapping;\n\n        public static HashMap<String,VideoRecorderService> map = new HashMap<>();\n\n        @Override//该方法在spring容器启动完成后自动调用\n        public void onApplicationEvent(ApplicationReadyEvent event) {\n            List<VideoEntity> videos = videoMapping.selectAllVideos();//查询摄像头信息\n\n            for (VideoEntity video : videos){\n\n                //初始化map，把摄像头和VideoRecorderService对象关联起来\n                map.put(video.getMonitorName(),new VideoRecorderService());\n\n                //这里是jar包启动就会自动推流\n                \n                //这里是调用算法的部分\n                \n            }\n        }}   \n```\n  > 由于这里直接new的对象，没有把它注册在ioc容器中，所以@Async失效。\n- 解决方法：\n  在```VideoConfiguration```类中写一个通过spring容器获取和注册bean的方法：\n```java\n    @Configuration\n    public class VideoConfiguration implements ApplicationContextAware {\n\n        private static ApplicationContext applicationContext;\n\n        @Override\n        public void setApplicationContext(ApplicationContext applicationContext) throws BeansException {\n            VideoConfiguration.applicationContext = applicationContext;\n        }\n\n        public static <T> T getBean(Class<T> tClass,String beanName){\n            if (applicationContext.containsBean(beanName)){\n                return applicationContext.getBean(beanName, tClass);\n            }else {\n                return null;\n            }\n        }\n\n        /**\n        *  动态注入bean\n        * @param requiredType 注入类\n        * @param beanName bean名称\n        */\n        public static void registerBean(Class<?> requiredType,String beanName){\n\n            //将applicationContext转换为ConfigurableApplicationContext\n            ConfigurableApplicationContext configurableApplicationContext = (ConfigurableApplicationContext) applicationContext;\n\n            //获取BeanFactory\n            DefaultListableBeanFactory defaultListableBeanFactory = (DefaultListableBeanFactory) configurableApplicationContext.getAutowireCapableBeanFactory();\n\n            //创建bean信息.\n            BeanDefinitionBuilder beanDefinitionBuilder = BeanDefinitionBuilder.genericBeanDefinition(requiredType);\n\n            //动态注册bean.\n            defaultListableBeanFactory.registerBeanDefinition(beanName, beanDefinitionBuilder.getBeanDefinition());\n\n        }}\n```\n\n\n> 把InitFFmpeg类中的map删掉，并改成动态注册bean对象：\n\n\n```java\nfor (VideoEntity video : videos){\n\n    //初始化map，把摄像头和VideoRecorderService对象关联起来\n    //map.put(video.getMonitorName(),new VideoRecorderService());\n\n    //在ioc容器中注册bean\n    //使用摄像头名称来命名bean对象，在使用时根据名称获取bean\n    VideoConfiguration.registerBean(VideoRecorderService.class, video.getMonitorName());\n\n    //这里是jar包启动就会自动推流\n    \n    //这里是调用算法的部分\n    \n}\n\n\n//使用下面的语句获取bean对象：\nVideoRecorderService videoRecorderService = VideoConfiguration.getBean(VideoRecorderService.class, video.getMonitorName());\n```\n\n再次尝试，异步成功，搞定！\n","slug":"Async注解失效记录","published":1,"updated":"2024-04-09T10:59:25.103Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clusa3wnf00032s7efjvia08p","content":"<h1 id=\"Async注解失效记录\"><a href=\"#Async注解失效记录\" class=\"headerlink\" title=\"@Async注解失效记录\"></a>@Async注解失效记录</h1><p>今天在做项目的时候，遇到了如下情景：</p>\n<blockquote>\n<p>业务场景：<br>系统接入多个监控摄像头，并调用人脸识别算法，若视频中有人经过，启动录像，若无人，十秒后停止录像。</p>\n</blockquote>\n<p>我的做法如下：</p>\n<ul>\n<li>使用一个类<code>VideoRecorderService</code>来记录一个录制任务，它的部分代码如下：</li>\n</ul>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> inputFile<span class=\"token punctuation\">;</span><span class=\"token comment\">//文件输入路径</span>\n\n<span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> outputFile<span class=\"token punctuation\">;</span><span class=\"token comment\">//视频保存路径</span>\n\n<span class=\"token keyword\">private</span> <span class=\"token keyword\">boolean</span> status <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//视频中是否有人</span>\n\n<span class=\"token keyword\">private</span> <span class=\"token keyword\">boolean</span> recording <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//是否正在录制</span>\n\n<span class=\"token keyword\">private</span> <span class=\"token keyword\">long</span> noPersonTime<span class=\"token punctuation\">;</span><span class=\"token comment\">//记录视频中没有人的开始时刻</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setStatus</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">boolean</span> status<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>status <span class=\"token operator\">&amp;&amp;</span> status<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token comment\">//上一时刻有人且这一时刻没人，记录noPersonTime</span>\n        noPersonTime <span class=\"token operator\">=</span> <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentTimeMillis</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        log<span class=\"token punctuation\">.</span><span class=\"token function\">info</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"开始录制，noPersonTime=\"</span><span class=\"token operator\">+</span>noPersonTime<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>status <span class=\"token operator\">=</span> status<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token annotation punctuation\">@Async</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"threadPoolTaskExecutor\"</span><span class=\"token punctuation\">)</span><span class=\"token comment\">//异步</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">startRecordVideo</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">VideoEntity</span> video<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">//此处省略一系列流程</span>\n\n    <span class=\"token comment\">//开始录制视频</span>\n    recording<span class=\"token operator\">=</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Frame</span> frame <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span> <span class=\"token punctuation\">(</span>frame <span class=\"token operator\">=</span> grabber<span class=\"token punctuation\">.</span><span class=\"token function\">grabFrame</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token comment\">//视频帧图像不为空</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>status<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentTimeMillis</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span>noPersonTime<span class=\"token punctuation\">)</span><span class=\"token operator\">>=</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">long</span><span class=\"token punctuation\">)</span><span class=\"token number\">10</span><span class=\"token operator\">*</span><span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token comment\">//没人时间超过10s</span>\n                    recording<span class=\"token operator\">=</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n                    log<span class=\"token punctuation\">.</span><span class=\"token function\">info</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"许久无人，停止录制\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token punctuation\">&#125;</span>\n            recorder<span class=\"token punctuation\">.</span><span class=\"token function\">record</span><span class=\"token punctuation\">(</span>frame<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//录制该帧</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token comment\">//停止录制视频</span>\n<span class=\"token punctuation\">&#125;</span>   </code></pre>\n\n<blockquote>\n<p>录制视频的方法使用@Async实现异步，但是它失效了。<br>一般@Async注解失效有如下三种原因：</p>\n<ol>\n<li>在需要用到的 @Async 注解的类上加上 @EnableAsync，或者直接加在springboot启动类上；</li>\n<li>异步处理方法（也就是加了 @Async 注解的方法）只能返回的是 void 或者 Future 类型；</li>\n<li>同一个类中调用异步方法需要先获取代理类，因为 @Async 注解是基于Spring AOP （面向切面编程）的，而AOP的实现是基于动态代理模式实现的。有可能因为调用方法的是对象本身而不是代理对象，因为没有经过Spring容器。</li>\n</ol>\n<p>我这里正是第三点出了问题，直接获取了<code>VideoRecorderService</code>对象而不是通过ioc容器获取它的动态代理。</p>\n</blockquote>\n<ul>\n<li>我的错误代码如下：<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Component</span>\n<span class=\"token annotation punctuation\">@Slf4j</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">InitFFmpeg</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">ApplicationListener</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">ApplicationReadyEvent</span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">&#123;</span>\n\n    <span class=\"token annotation punctuation\">@Autowired</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">VideoMapping</span> videoMapping<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">VideoRecorderService</span><span class=\"token punctuation\">></span></span> map <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token annotation punctuation\">@Override</span><span class=\"token comment\">//该方法在spring容器启动完成后自动调用</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">onApplicationEvent</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ApplicationReadyEvent</span> event<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">VideoEntity</span><span class=\"token punctuation\">></span></span> videos <span class=\"token operator\">=</span> videoMapping<span class=\"token punctuation\">.</span><span class=\"token function\">selectAllVideos</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//查询摄像头信息</span>\n\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">VideoEntity</span> video <span class=\"token operator\">:</span> videos<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\n            <span class=\"token comment\">//初始化map，把摄像头和VideoRecorderService对象关联起来</span>\n            map<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span>video<span class=\"token punctuation\">.</span><span class=\"token function\">getMonitorName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">VideoRecorderService</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token comment\">//这里是jar包启动就会自动推流</span>\n            \n            <span class=\"token comment\">//这里是调用算法的部分</span>\n            \n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">&#125;</span>   </code></pre>\n<blockquote>\n<p>由于这里直接new的对象，没有把它注册在ioc容器中，所以@Async失效。</p>\n</blockquote>\n</li>\n<li>解决方法：<br>在<code>VideoConfiguration</code>类中写一个通过spring容器获取和注册bean的方法：<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Configuration</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">VideoConfiguration</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">ApplicationContextAware</span> <span class=\"token punctuation\">&#123;</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">ApplicationContext</span> applicationContext<span class=\"token punctuation\">;</span>\n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setApplicationContext</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ApplicationContext</span> applicationContext<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">BeansException</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">VideoConfiguration</span><span class=\"token punctuation\">.</span>applicationContext <span class=\"token operator\">=</span> applicationContext<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> <span class=\"token class-name\">T</span> <span class=\"token function\">getBean</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Class</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> tClass<span class=\"token punctuation\">,</span><span class=\"token class-name\">String</span> beanName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>applicationContext<span class=\"token punctuation\">.</span><span class=\"token function\">containsBean</span><span class=\"token punctuation\">(</span>beanName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> applicationContext<span class=\"token punctuation\">.</span><span class=\"token function\">getBean</span><span class=\"token punctuation\">(</span>beanName<span class=\"token punctuation\">,</span> tClass<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token comment\">/**\n    *  动态注入bean\n    * @param requiredType 注入类\n    * @param beanName bean名称\n    */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">registerBean</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Class</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span> requiredType<span class=\"token punctuation\">,</span><span class=\"token class-name\">String</span> beanName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\n        <span class=\"token comment\">//将applicationContext转换为ConfigurableApplicationContext</span>\n        <span class=\"token class-name\">ConfigurableApplicationContext</span> configurableApplicationContext <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">ConfigurableApplicationContext</span><span class=\"token punctuation\">)</span> applicationContext<span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">//获取BeanFactory</span>\n        <span class=\"token class-name\">DefaultListableBeanFactory</span> defaultListableBeanFactory <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">DefaultListableBeanFactory</span><span class=\"token punctuation\">)</span> configurableApplicationContext<span class=\"token punctuation\">.</span><span class=\"token function\">getAutowireCapableBeanFactory</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">//创建bean信息.</span>\n        <span class=\"token class-name\">BeanDefinitionBuilder</span> beanDefinitionBuilder <span class=\"token operator\">=</span> <span class=\"token class-name\">BeanDefinitionBuilder</span><span class=\"token punctuation\">.</span><span class=\"token function\">genericBeanDefinition</span><span class=\"token punctuation\">(</span>requiredType<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">//动态注册bean.</span>\n        defaultListableBeanFactory<span class=\"token punctuation\">.</span><span class=\"token function\">registerBeanDefinition</span><span class=\"token punctuation\">(</span>beanName<span class=\"token punctuation\">,</span> beanDefinitionBuilder<span class=\"token punctuation\">.</span><span class=\"token function\">getBeanDefinition</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">&#125;</span></code></pre></li>\n</ul>\n<blockquote>\n<p>把InitFFmpeg类中的map删掉，并改成动态注册bean对象：</p>\n</blockquote>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">VideoEntity</span> video <span class=\"token operator\">:</span> videos<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\n    <span class=\"token comment\">//初始化map，把摄像头和VideoRecorderService对象关联起来</span>\n    <span class=\"token comment\">//map.put(video.getMonitorName(),new VideoRecorderService());</span>\n\n    <span class=\"token comment\">//在ioc容器中注册bean</span>\n    <span class=\"token comment\">//使用摄像头名称来命名bean对象，在使用时根据名称获取bean</span>\n    <span class=\"token class-name\">VideoConfiguration</span><span class=\"token punctuation\">.</span><span class=\"token function\">registerBean</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">VideoRecorderService</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span> video<span class=\"token punctuation\">.</span><span class=\"token function\">getMonitorName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">//这里是jar包启动就会自动推流</span>\n    \n    <span class=\"token comment\">//这里是调用算法的部分</span>\n    \n<span class=\"token punctuation\">&#125;</span>\n\n\n<span class=\"token comment\">//使用下面的语句获取bean对象：</span>\n<span class=\"token class-name\">VideoRecorderService</span> videoRecorderService <span class=\"token operator\">=</span> <span class=\"token class-name\">VideoConfiguration</span><span class=\"token punctuation\">.</span><span class=\"token function\">getBean</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">VideoRecorderService</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span> video<span class=\"token punctuation\">.</span><span class=\"token function\">getMonitorName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n\n<p>再次尝试，异步成功，搞定！</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Async注解失效记录\"><a href=\"#Async注解失效记录\" class=\"headerlink\" title=\"@Async注解失效记录\"></a>@Async注解失效记录</h1><p>今天在做项目的时候，遇到了如下情景：</p>\n<blockquote>\n<p>业务场景：<br>系统接入多个监控摄像头，并调用人脸识别算法，若视频中有人经过，启动录像，若无人，十秒后停止录像。</p>\n</blockquote>\n<p>我的做法如下：</p>\n<ul>\n<li>使用一个类<code>VideoRecorderService</code>来记录一个录制任务，它的部分代码如下：</li>\n</ul>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> inputFile<span class=\"token punctuation\">;</span><span class=\"token comment\">//文件输入路径</span>\n\n<span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> outputFile<span class=\"token punctuation\">;</span><span class=\"token comment\">//视频保存路径</span>\n\n<span class=\"token keyword\">private</span> <span class=\"token keyword\">boolean</span> status <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//视频中是否有人</span>\n\n<span class=\"token keyword\">private</span> <span class=\"token keyword\">boolean</span> recording <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//是否正在录制</span>\n\n<span class=\"token keyword\">private</span> <span class=\"token keyword\">long</span> noPersonTime<span class=\"token punctuation\">;</span><span class=\"token comment\">//记录视频中没有人的开始时刻</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setStatus</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">boolean</span> status<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>status <span class=\"token operator\">&amp;&amp;</span> status<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token comment\">//上一时刻有人且这一时刻没人，记录noPersonTime</span>\n        noPersonTime <span class=\"token operator\">=</span> <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentTimeMillis</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        log<span class=\"token punctuation\">.</span><span class=\"token function\">info</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"开始录制，noPersonTime=\"</span><span class=\"token operator\">+</span>noPersonTime<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>status <span class=\"token operator\">=</span> status<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token annotation punctuation\">@Async</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"threadPoolTaskExecutor\"</span><span class=\"token punctuation\">)</span><span class=\"token comment\">//异步</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">startRecordVideo</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">VideoEntity</span> video<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">//此处省略一系列流程</span>\n\n    <span class=\"token comment\">//开始录制视频</span>\n    recording<span class=\"token operator\">=</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Frame</span> frame <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span> <span class=\"token punctuation\">(</span>frame <span class=\"token operator\">=</span> grabber<span class=\"token punctuation\">.</span><span class=\"token function\">grabFrame</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token comment\">//视频帧图像不为空</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>status<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentTimeMillis</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span>noPersonTime<span class=\"token punctuation\">)</span><span class=\"token operator\">>=</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">long</span><span class=\"token punctuation\">)</span><span class=\"token number\">10</span><span class=\"token operator\">*</span><span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token comment\">//没人时间超过10s</span>\n                    recording<span class=\"token operator\">=</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n                    log<span class=\"token punctuation\">.</span><span class=\"token function\">info</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"许久无人，停止录制\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token punctuation\">&#125;</span>\n            recorder<span class=\"token punctuation\">.</span><span class=\"token function\">record</span><span class=\"token punctuation\">(</span>frame<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//录制该帧</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token comment\">//停止录制视频</span>\n<span class=\"token punctuation\">&#125;</span>   </code></pre>\n\n<blockquote>\n<p>录制视频的方法使用@Async实现异步，但是它失效了。<br>一般@Async注解失效有如下三种原因：</p>\n<ol>\n<li>在需要用到的 @Async 注解的类上加上 @EnableAsync，或者直接加在springboot启动类上；</li>\n<li>异步处理方法（也就是加了 @Async 注解的方法）只能返回的是 void 或者 Future 类型；</li>\n<li>同一个类中调用异步方法需要先获取代理类，因为 @Async 注解是基于Spring AOP （面向切面编程）的，而AOP的实现是基于动态代理模式实现的。有可能因为调用方法的是对象本身而不是代理对象，因为没有经过Spring容器。</li>\n</ol>\n<p>我这里正是第三点出了问题，直接获取了<code>VideoRecorderService</code>对象而不是通过ioc容器获取它的动态代理。</p>\n</blockquote>\n<ul>\n<li>我的错误代码如下：<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Component</span>\n<span class=\"token annotation punctuation\">@Slf4j</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">InitFFmpeg</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">ApplicationListener</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">ApplicationReadyEvent</span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">&#123;</span>\n\n    <span class=\"token annotation punctuation\">@Autowired</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">VideoMapping</span> videoMapping<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">VideoRecorderService</span><span class=\"token punctuation\">></span></span> map <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token annotation punctuation\">@Override</span><span class=\"token comment\">//该方法在spring容器启动完成后自动调用</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">onApplicationEvent</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ApplicationReadyEvent</span> event<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">VideoEntity</span><span class=\"token punctuation\">></span></span> videos <span class=\"token operator\">=</span> videoMapping<span class=\"token punctuation\">.</span><span class=\"token function\">selectAllVideos</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//查询摄像头信息</span>\n\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">VideoEntity</span> video <span class=\"token operator\">:</span> videos<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\n            <span class=\"token comment\">//初始化map，把摄像头和VideoRecorderService对象关联起来</span>\n            map<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span>video<span class=\"token punctuation\">.</span><span class=\"token function\">getMonitorName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">VideoRecorderService</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token comment\">//这里是jar包启动就会自动推流</span>\n            \n            <span class=\"token comment\">//这里是调用算法的部分</span>\n            \n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">&#125;</span>   </code></pre>\n<blockquote>\n<p>由于这里直接new的对象，没有把它注册在ioc容器中，所以@Async失效。</p>\n</blockquote>\n</li>\n<li>解决方法：<br>在<code>VideoConfiguration</code>类中写一个通过spring容器获取和注册bean的方法：<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Configuration</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">VideoConfiguration</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">ApplicationContextAware</span> <span class=\"token punctuation\">&#123;</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">ApplicationContext</span> applicationContext<span class=\"token punctuation\">;</span>\n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setApplicationContext</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ApplicationContext</span> applicationContext<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">BeansException</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">VideoConfiguration</span><span class=\"token punctuation\">.</span>applicationContext <span class=\"token operator\">=</span> applicationContext<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> <span class=\"token class-name\">T</span> <span class=\"token function\">getBean</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Class</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> tClass<span class=\"token punctuation\">,</span><span class=\"token class-name\">String</span> beanName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>applicationContext<span class=\"token punctuation\">.</span><span class=\"token function\">containsBean</span><span class=\"token punctuation\">(</span>beanName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> applicationContext<span class=\"token punctuation\">.</span><span class=\"token function\">getBean</span><span class=\"token punctuation\">(</span>beanName<span class=\"token punctuation\">,</span> tClass<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token comment\">/**\n    *  动态注入bean\n    * @param requiredType 注入类\n    * @param beanName bean名称\n    */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">registerBean</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Class</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span> requiredType<span class=\"token punctuation\">,</span><span class=\"token class-name\">String</span> beanName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\n        <span class=\"token comment\">//将applicationContext转换为ConfigurableApplicationContext</span>\n        <span class=\"token class-name\">ConfigurableApplicationContext</span> configurableApplicationContext <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">ConfigurableApplicationContext</span><span class=\"token punctuation\">)</span> applicationContext<span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">//获取BeanFactory</span>\n        <span class=\"token class-name\">DefaultListableBeanFactory</span> defaultListableBeanFactory <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">DefaultListableBeanFactory</span><span class=\"token punctuation\">)</span> configurableApplicationContext<span class=\"token punctuation\">.</span><span class=\"token function\">getAutowireCapableBeanFactory</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">//创建bean信息.</span>\n        <span class=\"token class-name\">BeanDefinitionBuilder</span> beanDefinitionBuilder <span class=\"token operator\">=</span> <span class=\"token class-name\">BeanDefinitionBuilder</span><span class=\"token punctuation\">.</span><span class=\"token function\">genericBeanDefinition</span><span class=\"token punctuation\">(</span>requiredType<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">//动态注册bean.</span>\n        defaultListableBeanFactory<span class=\"token punctuation\">.</span><span class=\"token function\">registerBeanDefinition</span><span class=\"token punctuation\">(</span>beanName<span class=\"token punctuation\">,</span> beanDefinitionBuilder<span class=\"token punctuation\">.</span><span class=\"token function\">getBeanDefinition</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">&#125;</span></code></pre></li>\n</ul>\n<blockquote>\n<p>把InitFFmpeg类中的map删掉，并改成动态注册bean对象：</p>\n</blockquote>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">VideoEntity</span> video <span class=\"token operator\">:</span> videos<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\n    <span class=\"token comment\">//初始化map，把摄像头和VideoRecorderService对象关联起来</span>\n    <span class=\"token comment\">//map.put(video.getMonitorName(),new VideoRecorderService());</span>\n\n    <span class=\"token comment\">//在ioc容器中注册bean</span>\n    <span class=\"token comment\">//使用摄像头名称来命名bean对象，在使用时根据名称获取bean</span>\n    <span class=\"token class-name\">VideoConfiguration</span><span class=\"token punctuation\">.</span><span class=\"token function\">registerBean</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">VideoRecorderService</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span> video<span class=\"token punctuation\">.</span><span class=\"token function\">getMonitorName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">//这里是jar包启动就会自动推流</span>\n    \n    <span class=\"token comment\">//这里是调用算法的部分</span>\n    \n<span class=\"token punctuation\">&#125;</span>\n\n\n<span class=\"token comment\">//使用下面的语句获取bean对象：</span>\n<span class=\"token class-name\">VideoRecorderService</span> videoRecorderService <span class=\"token operator\">=</span> <span class=\"token class-name\">VideoConfiguration</span><span class=\"token punctuation\">.</span><span class=\"token function\">getBean</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">VideoRecorderService</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span> video<span class=\"token punctuation\">.</span><span class=\"token function\">getMonitorName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n\n<p>再次尝试，异步成功，搞定！</p>\n"},{"title":"centos7下配置ssd和yolov5的环境","date":"2023-03-08T07:22:40.000Z","_content":"# centos下配置ssd和yolov5的环境\n## 1.安装anaconda\n首先确定anaconda的版本，我这里用得是python3.9，查到对应的anaconda版本为Anaconda3-2021.11<br>\n**在用户主目录下：**\n```bash\nwget https://repo.anaconda.com/archive/Anaconda3-2021.11-Linux-x86_64.sh\n```\n之后用户主目录下回多出一个Anaconda3-2021.11-Linux-x86_64.sh文件，直接运行即可：\n```bash\n./Anaconda3-2021.11-Linux-x86_64.sh\n```\n会强制看完用户协议，一直按回车即可。\n最后会问：\n```\nDo you accept the license terms? [yes|no][no] \n>>> yes\n```\n输入yes即可。\n之后会让你确定安装路径：\n```\n# 使用默认路径，直接键入回车，使用自定义路径，直接输入安装路径\n# 此处使用默认路径作为安装路径\nAnaconda3 will now be installed into this location:\n/home/dfy/anaconda3  \n- Press ENTER to confirm the location  \n- Press CTRL-C to abort the installation  \n- Or specify a different location below\n \n[/home/dfy/anaconda3] >>> \n```\n最后会询问是否进行初始化，yes即可：\n```\n# 此处询问是否初始化conda的环境，直接输入yes\n \nDo you wish the installer to initialize Anaconda3\nby running conda init? \n \n[yes|no][no] >>> yes\n```\n初始化时将配置写入了./.bashrc文件中，输入下面命令就可以开始使用了：\n```\nsource ./.bashrc\n```\n会看到命令行开头会出现(bash)，说明已经进入conda环境了。\n要解除conda环境，只需```conda deactivate```即可。\n\n## 2.如果机器上没有pip，安装pip3：\n```\n1.  yum -y install epel-release               \n2.  yum -y install python3-pip                \n3.  pip3 --version  查看pip版本\n```\n\n## 3.生成requirements.txt文件\n这个文件用来记录所需要的环境和对应的版本号，最后使用pip读取该文件可以统一安装。\n> 1. 到你的算法根目录下\n> 2. 使用```pip freeze > requirements.txt```命令\n> \n两步即可生成requirements.txt文件。\n\n\n但是这样做的一个巨大问题是，它会将环境中所有的库名称和版本进行输出，有些库是在项目中没有用到的，但依然会进行输出。\n\n为了避免这种情况，有人就开发了一个pipreqs库，它可以进行一些过滤，仅将工程中用到的库和版本进行输出。\n\npipreqs安装：\n ```\n pip install pipreqs\n ```\n 安装好之后，在当前目录下运行：\n```\npipreqs . --encoding=utf8 --force\n```\n\n稍等一会就生成好了。\n我生成的requirements.txt内容如下：\n```\nalfred==0.3\nconfig==0.5.1\ncoremltools==6.2\nFlask==2.2.2\nglobals==0.3.35\nhelpers==0.2.0\nJinja2==3.0.3\nmatplotlib==3.5.2\nnb==0.1.2\nnumpy==1.21.5\nonnx==1.13.1\nopencv_python==4.7.0.68\npandas==1.4.4\nPillow==9.4.0\nPyYAML==6.0\nrequests==2.28.1\nscikit_image==0.19.2\nscipy==1.9.1\nseaborn==0.11.2\nsignals==0.0.2\nskimage==0.0\ntemplating==0.5.0\nthop==0.1.1.post2209072238\ntorch==1.9.1\ntorchvision==0.10.1\ntqdm==4.64.1\nWerkzeug==2.2.3\nWTForms==3.0.1\n\n```\n\n## 4.安装依赖文件（执行此步之前建议先看后续踩坑部分，节省时间）\n\n执行：\n```\npip install -r ./requirements.txt\n```\n漫长的下载过程\n## 5.踩的坑\n### skimage报错\n报错内容如下：\n>  error: subprocess-exited-with-error\n> \n>   × python setup.py egg_info did not run successfully.\n>   │ exit code: 1\n>   ╰─> [3 lines of output]\n> \n>       *** Please install the `scikit-image` package (instead of `skimage`) ***\n> \n>       [end of output]\n> \n>   note: This error originates from a subprocess, and is likely not a problem with pip.\n> error: metadata-generation-failed\n> \n> × Encountered error while generating package metadata.\n> ╰─> See above for output.\n> \n> note: This is an issue with the package mentioned above, not pip.\n> hint: See above for details.\n\n看字面意思是说，不要安装skimage，而是安装scikit-image。\n考虑到生成的requirements.txt文件中有这两行:\n```\nscikit_image==0.19.2\nskimage==0.0\n```\nscikit-image已经安装好了，那直接把```skimage==0.0```删除即可。\n\n### 安装成功后报dependency confilct错误\n报错内容如下：\n```\nERROR: pip's dependency resolver does not currently take into account all the packages that are installed. This behaviour is the source of the following dependency conflicts.\ndaal4py 2021.6.0 requires daal==2021.4.0, which is not installed.\nanaconda-project 0.11.1 requires ruamel-yaml, which is not installed.\n```\n\n是有两个依赖```daal==2021.4.0```和```ruamel-yaml```没有安装，按照提示逐个安装：\n```\npip install daal==2021.4.0\npip install ruamel-yaml\n```\n\n然而，在安装```daal==2021.4.0```这个库的时候，又给老子报了个错：\n```\nERROR: Cannot uninstall 'TBB'. It is a distutils installed project and thus we cannot accurately determine which files belong to it which would lead to only a partial uninstall.\n```\n意思是安装过程中无法卸载老版本的TBB库。\n那让我们友好地手动去卸载吧。\n通过命令```pip install tbb```确定已安装的tbb库的位置。\n我的输出如下：\n```\nLooking in indexes: https://mirrors.aliyun.com/pypi/simple\nRequirement already satisfied: tbb in ./anaconda3/lib/python3.9/site-packages (0.2)\n```\n意思是包位置在./anaconda3/lib/python3.9/site-packages (0.2)，进入这个目录，执行```ls```，找到和tbb有关的结果：\n```\ntbb\nTBB-0.2-py3.9.egg-info\nTBB.py\n```\n把这三个删掉\n```\nrm -rf tbb TBB.py TBB-0.2-py3.9.egg-info\n```\n再去安装dall应该没问题了。\n","source":"_posts/centos7下配置ssd和yolov5的环境.md","raw":"---\ntitle: centos7下配置ssd和yolov5的环境\ndate: 2023-03-08 15:22:40\ntags: \n    - pytorch\n    - ssd\n    - yolov5\n    - centos\ncategories: pytorch\n---\n# centos下配置ssd和yolov5的环境\n## 1.安装anaconda\n首先确定anaconda的版本，我这里用得是python3.9，查到对应的anaconda版本为Anaconda3-2021.11<br>\n**在用户主目录下：**\n```bash\nwget https://repo.anaconda.com/archive/Anaconda3-2021.11-Linux-x86_64.sh\n```\n之后用户主目录下回多出一个Anaconda3-2021.11-Linux-x86_64.sh文件，直接运行即可：\n```bash\n./Anaconda3-2021.11-Linux-x86_64.sh\n```\n会强制看完用户协议，一直按回车即可。\n最后会问：\n```\nDo you accept the license terms? [yes|no][no] \n>>> yes\n```\n输入yes即可。\n之后会让你确定安装路径：\n```\n# 使用默认路径，直接键入回车，使用自定义路径，直接输入安装路径\n# 此处使用默认路径作为安装路径\nAnaconda3 will now be installed into this location:\n/home/dfy/anaconda3  \n- Press ENTER to confirm the location  \n- Press CTRL-C to abort the installation  \n- Or specify a different location below\n \n[/home/dfy/anaconda3] >>> \n```\n最后会询问是否进行初始化，yes即可：\n```\n# 此处询问是否初始化conda的环境，直接输入yes\n \nDo you wish the installer to initialize Anaconda3\nby running conda init? \n \n[yes|no][no] >>> yes\n```\n初始化时将配置写入了./.bashrc文件中，输入下面命令就可以开始使用了：\n```\nsource ./.bashrc\n```\n会看到命令行开头会出现(bash)，说明已经进入conda环境了。\n要解除conda环境，只需```conda deactivate```即可。\n\n## 2.如果机器上没有pip，安装pip3：\n```\n1.  yum -y install epel-release               \n2.  yum -y install python3-pip                \n3.  pip3 --version  查看pip版本\n```\n\n## 3.生成requirements.txt文件\n这个文件用来记录所需要的环境和对应的版本号，最后使用pip读取该文件可以统一安装。\n> 1. 到你的算法根目录下\n> 2. 使用```pip freeze > requirements.txt```命令\n> \n两步即可生成requirements.txt文件。\n\n\n但是这样做的一个巨大问题是，它会将环境中所有的库名称和版本进行输出，有些库是在项目中没有用到的，但依然会进行输出。\n\n为了避免这种情况，有人就开发了一个pipreqs库，它可以进行一些过滤，仅将工程中用到的库和版本进行输出。\n\npipreqs安装：\n ```\n pip install pipreqs\n ```\n 安装好之后，在当前目录下运行：\n```\npipreqs . --encoding=utf8 --force\n```\n\n稍等一会就生成好了。\n我生成的requirements.txt内容如下：\n```\nalfred==0.3\nconfig==0.5.1\ncoremltools==6.2\nFlask==2.2.2\nglobals==0.3.35\nhelpers==0.2.0\nJinja2==3.0.3\nmatplotlib==3.5.2\nnb==0.1.2\nnumpy==1.21.5\nonnx==1.13.1\nopencv_python==4.7.0.68\npandas==1.4.4\nPillow==9.4.0\nPyYAML==6.0\nrequests==2.28.1\nscikit_image==0.19.2\nscipy==1.9.1\nseaborn==0.11.2\nsignals==0.0.2\nskimage==0.0\ntemplating==0.5.0\nthop==0.1.1.post2209072238\ntorch==1.9.1\ntorchvision==0.10.1\ntqdm==4.64.1\nWerkzeug==2.2.3\nWTForms==3.0.1\n\n```\n\n## 4.安装依赖文件（执行此步之前建议先看后续踩坑部分，节省时间）\n\n执行：\n```\npip install -r ./requirements.txt\n```\n漫长的下载过程\n## 5.踩的坑\n### skimage报错\n报错内容如下：\n>  error: subprocess-exited-with-error\n> \n>   × python setup.py egg_info did not run successfully.\n>   │ exit code: 1\n>   ╰─> [3 lines of output]\n> \n>       *** Please install the `scikit-image` package (instead of `skimage`) ***\n> \n>       [end of output]\n> \n>   note: This error originates from a subprocess, and is likely not a problem with pip.\n> error: metadata-generation-failed\n> \n> × Encountered error while generating package metadata.\n> ╰─> See above for output.\n> \n> note: This is an issue with the package mentioned above, not pip.\n> hint: See above for details.\n\n看字面意思是说，不要安装skimage，而是安装scikit-image。\n考虑到生成的requirements.txt文件中有这两行:\n```\nscikit_image==0.19.2\nskimage==0.0\n```\nscikit-image已经安装好了，那直接把```skimage==0.0```删除即可。\n\n### 安装成功后报dependency confilct错误\n报错内容如下：\n```\nERROR: pip's dependency resolver does not currently take into account all the packages that are installed. This behaviour is the source of the following dependency conflicts.\ndaal4py 2021.6.0 requires daal==2021.4.0, which is not installed.\nanaconda-project 0.11.1 requires ruamel-yaml, which is not installed.\n```\n\n是有两个依赖```daal==2021.4.0```和```ruamel-yaml```没有安装，按照提示逐个安装：\n```\npip install daal==2021.4.0\npip install ruamel-yaml\n```\n\n然而，在安装```daal==2021.4.0```这个库的时候，又给老子报了个错：\n```\nERROR: Cannot uninstall 'TBB'. It is a distutils installed project and thus we cannot accurately determine which files belong to it which would lead to only a partial uninstall.\n```\n意思是安装过程中无法卸载老版本的TBB库。\n那让我们友好地手动去卸载吧。\n通过命令```pip install tbb```确定已安装的tbb库的位置。\n我的输出如下：\n```\nLooking in indexes: https://mirrors.aliyun.com/pypi/simple\nRequirement already satisfied: tbb in ./anaconda3/lib/python3.9/site-packages (0.2)\n```\n意思是包位置在./anaconda3/lib/python3.9/site-packages (0.2)，进入这个目录，执行```ls```，找到和tbb有关的结果：\n```\ntbb\nTBB-0.2-py3.9.egg-info\nTBB.py\n```\n把这三个删掉\n```\nrm -rf tbb TBB.py TBB-0.2-py3.9.egg-info\n```\n再去安装dall应该没问题了。\n","slug":"centos7下配置ssd和yolov5的环境","published":1,"updated":"2024-04-09T10:59:25.103Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clusa3wnj00072s7e8of58gkl","content":"<h1 id=\"centos下配置ssd和yolov5的环境\"><a href=\"#centos下配置ssd和yolov5的环境\" class=\"headerlink\" title=\"centos下配置ssd和yolov5的环境\"></a>centos下配置ssd和yolov5的环境</h1><h2 id=\"1-安装anaconda\"><a href=\"#1-安装anaconda\" class=\"headerlink\" title=\"1.安装anaconda\"></a>1.安装anaconda</h2><p>首先确定anaconda的版本，我这里用得是python3.9，查到对应的anaconda版本为Anaconda3-2021.11<br><br><strong>在用户主目录下：</strong></p>\n<pre class=\"language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">wget</span> https://repo.anaconda.com/archive/Anaconda3-2021.11-Linux-x86_64.sh</code></pre>\n<p>之后用户主目录下回多出一个Anaconda3-2021.11-Linux-x86_64.sh文件，直接运行即可：</p>\n<pre class=\"language-bash\" data-language=\"bash\"><code class=\"language-bash\">./Anaconda3-2021.11-Linux-x86_64.sh</code></pre>\n<p>会强制看完用户协议，一直按回车即可。<br>最后会问：</p>\n<pre class=\"language-none\"><code class=\"language-none\">Do you accept the license terms? [yes|no][no] \n&gt;&gt;&gt; yes</code></pre>\n<p>输入yes即可。<br>之后会让你确定安装路径：</p>\n<pre class=\"language-none\"><code class=\"language-none\"># 使用默认路径，直接键入回车，使用自定义路径，直接输入安装路径\n# 此处使用默认路径作为安装路径\nAnaconda3 will now be installed into this location:\n&#x2F;home&#x2F;dfy&#x2F;anaconda3  \n- Press ENTER to confirm the location  \n- Press CTRL-C to abort the installation  \n- Or specify a different location below\n \n[&#x2F;home&#x2F;dfy&#x2F;anaconda3] &gt;&gt;&gt; </code></pre>\n<p>最后会询问是否进行初始化，yes即可：</p>\n<pre class=\"language-none\"><code class=\"language-none\"># 此处询问是否初始化conda的环境，直接输入yes\n \nDo you wish the installer to initialize Anaconda3\nby running conda init? \n \n[yes|no][no] &gt;&gt;&gt; yes</code></pre>\n<p>初始化时将配置写入了.&#x2F;.bashrc文件中，输入下面命令就可以开始使用了：</p>\n<pre class=\"language-none\"><code class=\"language-none\">source .&#x2F;.bashrc</code></pre>\n<p>会看到命令行开头会出现(bash)，说明已经进入conda环境了。<br>要解除conda环境，只需<code>conda deactivate</code>即可。</p>\n<h2 id=\"2-如果机器上没有pip，安装pip3：\"><a href=\"#2-如果机器上没有pip，安装pip3：\" class=\"headerlink\" title=\"2.如果机器上没有pip，安装pip3：\"></a>2.如果机器上没有pip，安装pip3：</h2><pre class=\"language-none\"><code class=\"language-none\">1.  yum -y install epel-release               \n2.  yum -y install python3-pip                \n3.  pip3 --version  查看pip版本</code></pre>\n\n<h2 id=\"3-生成requirements-txt文件\"><a href=\"#3-生成requirements-txt文件\" class=\"headerlink\" title=\"3.生成requirements.txt文件\"></a>3.生成requirements.txt文件</h2><p>这个文件用来记录所需要的环境和对应的版本号，最后使用pip读取该文件可以统一安装。</p>\n<blockquote>\n<ol>\n<li>到你的算法根目录下</li>\n<li>使用<code>pip freeze &gt; requirements.txt</code>命令</li>\n</ol>\n</blockquote>\n<p>两步即可生成requirements.txt文件。</p>\n<p>但是这样做的一个巨大问题是，它会将环境中所有的库名称和版本进行输出，有些库是在项目中没有用到的，但依然会进行输出。</p>\n<p>为了避免这种情况，有人就开发了一个pipreqs库，它可以进行一些过滤，仅将工程中用到的库和版本进行输出。</p>\n<p>pipreqs安装：<br> <pre class=\"language-none\"><code class=\"language-none\">pip install pipreqs</code></pre><br> 安装好之后，在当前目录下运行：</p>\n<pre class=\"language-none\"><code class=\"language-none\">pipreqs . --encoding&#x3D;utf8 --force</code></pre>\n\n<p>稍等一会就生成好了。<br>我生成的requirements.txt内容如下：</p>\n<pre class=\"language-none\"><code class=\"language-none\">alfred&#x3D;&#x3D;0.3\nconfig&#x3D;&#x3D;0.5.1\ncoremltools&#x3D;&#x3D;6.2\nFlask&#x3D;&#x3D;2.2.2\nglobals&#x3D;&#x3D;0.3.35\nhelpers&#x3D;&#x3D;0.2.0\nJinja2&#x3D;&#x3D;3.0.3\nmatplotlib&#x3D;&#x3D;3.5.2\nnb&#x3D;&#x3D;0.1.2\nnumpy&#x3D;&#x3D;1.21.5\nonnx&#x3D;&#x3D;1.13.1\nopencv_python&#x3D;&#x3D;4.7.0.68\npandas&#x3D;&#x3D;1.4.4\nPillow&#x3D;&#x3D;9.4.0\nPyYAML&#x3D;&#x3D;6.0\nrequests&#x3D;&#x3D;2.28.1\nscikit_image&#x3D;&#x3D;0.19.2\nscipy&#x3D;&#x3D;1.9.1\nseaborn&#x3D;&#x3D;0.11.2\nsignals&#x3D;&#x3D;0.0.2\nskimage&#x3D;&#x3D;0.0\ntemplating&#x3D;&#x3D;0.5.0\nthop&#x3D;&#x3D;0.1.1.post2209072238\ntorch&#x3D;&#x3D;1.9.1\ntorchvision&#x3D;&#x3D;0.10.1\ntqdm&#x3D;&#x3D;4.64.1\nWerkzeug&#x3D;&#x3D;2.2.3\nWTForms&#x3D;&#x3D;3.0.1\n</code></pre>\n\n<h2 id=\"4-安装依赖文件（执行此步之前建议先看后续踩坑部分，节省时间）\"><a href=\"#4-安装依赖文件（执行此步之前建议先看后续踩坑部分，节省时间）\" class=\"headerlink\" title=\"4.安装依赖文件（执行此步之前建议先看后续踩坑部分，节省时间）\"></a>4.安装依赖文件（执行此步之前建议先看后续踩坑部分，节省时间）</h2><p>执行：</p>\n<pre class=\"language-none\"><code class=\"language-none\">pip install -r .&#x2F;requirements.txt</code></pre>\n<p>漫长的下载过程</p>\n<h2 id=\"5-踩的坑\"><a href=\"#5-踩的坑\" class=\"headerlink\" title=\"5.踩的坑\"></a>5.踩的坑</h2><h3 id=\"skimage报错\"><a href=\"#skimage报错\" class=\"headerlink\" title=\"skimage报错\"></a>skimage报错</h3><p>报错内容如下：</p>\n<blockquote>\n<p> error: subprocess-exited-with-error</p>\n<p>  × python setup.py egg_info did not run successfully.<br>  │ exit code: 1<br>  ╰─&gt; [3 lines of output]</p>\n<pre><code>  *** Please install the `scikit-image` package (instead of `skimage`) ***\n\n  [end of output]\n</code></pre>\n<p>  note: This error originates from a subprocess, and is likely not a problem with pip.<br>error: metadata-generation-failed</p>\n<p>× Encountered error while generating package metadata.<br>╰─&gt; See above for output.</p>\n<p>note: This is an issue with the package mentioned above, not pip.<br>hint: See above for details.</p>\n</blockquote>\n<p>看字面意思是说，不要安装skimage，而是安装scikit-image。<br>考虑到生成的requirements.txt文件中有这两行:</p>\n<pre class=\"language-none\"><code class=\"language-none\">scikit_image&#x3D;&#x3D;0.19.2\nskimage&#x3D;&#x3D;0.0</code></pre>\n<p>scikit-image已经安装好了，那直接把<code>skimage==0.0</code>删除即可。</p>\n<h3 id=\"安装成功后报dependency-confilct错误\"><a href=\"#安装成功后报dependency-confilct错误\" class=\"headerlink\" title=\"安装成功后报dependency confilct错误\"></a>安装成功后报dependency confilct错误</h3><p>报错内容如下：</p>\n<pre class=\"language-none\"><code class=\"language-none\">ERROR: pip&#39;s dependency resolver does not currently take into account all the packages that are installed. This behaviour is the source of the following dependency conflicts.\ndaal4py 2021.6.0 requires daal&#x3D;&#x3D;2021.4.0, which is not installed.\nanaconda-project 0.11.1 requires ruamel-yaml, which is not installed.</code></pre>\n\n<p>是有两个依赖<code>daal==2021.4.0</code>和<code>ruamel-yaml</code>没有安装，按照提示逐个安装：</p>\n<pre class=\"language-none\"><code class=\"language-none\">pip install daal&#x3D;&#x3D;2021.4.0\npip install ruamel-yaml</code></pre>\n\n<p>然而，在安装<code>daal==2021.4.0</code>这个库的时候，又给老子报了个错：</p>\n<pre class=\"language-none\"><code class=\"language-none\">ERROR: Cannot uninstall &#39;TBB&#39;. It is a distutils installed project and thus we cannot accurately determine which files belong to it which would lead to only a partial uninstall.</code></pre>\n<p>意思是安装过程中无法卸载老版本的TBB库。<br>那让我们友好地手动去卸载吧。<br>通过命令<code>pip install tbb</code>确定已安装的tbb库的位置。<br>我的输出如下：</p>\n<pre class=\"language-none\"><code class=\"language-none\">Looking in indexes: https:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;pypi&#x2F;simple\nRequirement already satisfied: tbb in .&#x2F;anaconda3&#x2F;lib&#x2F;python3.9&#x2F;site-packages (0.2)</code></pre>\n<p>意思是包位置在.&#x2F;anaconda3&#x2F;lib&#x2F;python3.9&#x2F;site-packages (0.2)，进入这个目录，执行<code>ls</code>，找到和tbb有关的结果：</p>\n<pre class=\"language-none\"><code class=\"language-none\">tbb\nTBB-0.2-py3.9.egg-info\nTBB.py</code></pre>\n<p>把这三个删掉</p>\n<pre class=\"language-none\"><code class=\"language-none\">rm -rf tbb TBB.py TBB-0.2-py3.9.egg-info</code></pre>\n<p>再去安装dall应该没问题了。</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"centos下配置ssd和yolov5的环境\"><a href=\"#centos下配置ssd和yolov5的环境\" class=\"headerlink\" title=\"centos下配置ssd和yolov5的环境\"></a>centos下配置ssd和yolov5的环境</h1><h2 id=\"1-安装anaconda\"><a href=\"#1-安装anaconda\" class=\"headerlink\" title=\"1.安装anaconda\"></a>1.安装anaconda</h2><p>首先确定anaconda的版本，我这里用得是python3.9，查到对应的anaconda版本为Anaconda3-2021.11<br><br><strong>在用户主目录下：</strong></p>\n<pre class=\"language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">wget</span> https://repo.anaconda.com/archive/Anaconda3-2021.11-Linux-x86_64.sh</code></pre>\n<p>之后用户主目录下回多出一个Anaconda3-2021.11-Linux-x86_64.sh文件，直接运行即可：</p>\n<pre class=\"language-bash\" data-language=\"bash\"><code class=\"language-bash\">./Anaconda3-2021.11-Linux-x86_64.sh</code></pre>\n<p>会强制看完用户协议，一直按回车即可。<br>最后会问：</p>\n<pre class=\"language-none\"><code class=\"language-none\">Do you accept the license terms? [yes|no][no] \n&gt;&gt;&gt; yes</code></pre>\n<p>输入yes即可。<br>之后会让你确定安装路径：</p>\n<pre class=\"language-none\"><code class=\"language-none\"># 使用默认路径，直接键入回车，使用自定义路径，直接输入安装路径\n# 此处使用默认路径作为安装路径\nAnaconda3 will now be installed into this location:\n&#x2F;home&#x2F;dfy&#x2F;anaconda3  \n- Press ENTER to confirm the location  \n- Press CTRL-C to abort the installation  \n- Or specify a different location below\n \n[&#x2F;home&#x2F;dfy&#x2F;anaconda3] &gt;&gt;&gt; </code></pre>\n<p>最后会询问是否进行初始化，yes即可：</p>\n<pre class=\"language-none\"><code class=\"language-none\"># 此处询问是否初始化conda的环境，直接输入yes\n \nDo you wish the installer to initialize Anaconda3\nby running conda init? \n \n[yes|no][no] &gt;&gt;&gt; yes</code></pre>\n<p>初始化时将配置写入了.&#x2F;.bashrc文件中，输入下面命令就可以开始使用了：</p>\n<pre class=\"language-none\"><code class=\"language-none\">source .&#x2F;.bashrc</code></pre>\n<p>会看到命令行开头会出现(bash)，说明已经进入conda环境了。<br>要解除conda环境，只需<code>conda deactivate</code>即可。</p>\n<h2 id=\"2-如果机器上没有pip，安装pip3：\"><a href=\"#2-如果机器上没有pip，安装pip3：\" class=\"headerlink\" title=\"2.如果机器上没有pip，安装pip3：\"></a>2.如果机器上没有pip，安装pip3：</h2><pre class=\"language-none\"><code class=\"language-none\">1.  yum -y install epel-release               \n2.  yum -y install python3-pip                \n3.  pip3 --version  查看pip版本</code></pre>\n\n<h2 id=\"3-生成requirements-txt文件\"><a href=\"#3-生成requirements-txt文件\" class=\"headerlink\" title=\"3.生成requirements.txt文件\"></a>3.生成requirements.txt文件</h2><p>这个文件用来记录所需要的环境和对应的版本号，最后使用pip读取该文件可以统一安装。</p>\n<blockquote>\n<ol>\n<li>到你的算法根目录下</li>\n<li>使用<code>pip freeze &gt; requirements.txt</code>命令</li>\n</ol>\n</blockquote>\n<p>两步即可生成requirements.txt文件。</p>\n<p>但是这样做的一个巨大问题是，它会将环境中所有的库名称和版本进行输出，有些库是在项目中没有用到的，但依然会进行输出。</p>\n<p>为了避免这种情况，有人就开发了一个pipreqs库，它可以进行一些过滤，仅将工程中用到的库和版本进行输出。</p>\n<p>pipreqs安装：<br> <pre class=\"language-none\"><code class=\"language-none\">pip install pipreqs</code></pre><br> 安装好之后，在当前目录下运行：</p>\n<pre class=\"language-none\"><code class=\"language-none\">pipreqs . --encoding&#x3D;utf8 --force</code></pre>\n\n<p>稍等一会就生成好了。<br>我生成的requirements.txt内容如下：</p>\n<pre class=\"language-none\"><code class=\"language-none\">alfred&#x3D;&#x3D;0.3\nconfig&#x3D;&#x3D;0.5.1\ncoremltools&#x3D;&#x3D;6.2\nFlask&#x3D;&#x3D;2.2.2\nglobals&#x3D;&#x3D;0.3.35\nhelpers&#x3D;&#x3D;0.2.0\nJinja2&#x3D;&#x3D;3.0.3\nmatplotlib&#x3D;&#x3D;3.5.2\nnb&#x3D;&#x3D;0.1.2\nnumpy&#x3D;&#x3D;1.21.5\nonnx&#x3D;&#x3D;1.13.1\nopencv_python&#x3D;&#x3D;4.7.0.68\npandas&#x3D;&#x3D;1.4.4\nPillow&#x3D;&#x3D;9.4.0\nPyYAML&#x3D;&#x3D;6.0\nrequests&#x3D;&#x3D;2.28.1\nscikit_image&#x3D;&#x3D;0.19.2\nscipy&#x3D;&#x3D;1.9.1\nseaborn&#x3D;&#x3D;0.11.2\nsignals&#x3D;&#x3D;0.0.2\nskimage&#x3D;&#x3D;0.0\ntemplating&#x3D;&#x3D;0.5.0\nthop&#x3D;&#x3D;0.1.1.post2209072238\ntorch&#x3D;&#x3D;1.9.1\ntorchvision&#x3D;&#x3D;0.10.1\ntqdm&#x3D;&#x3D;4.64.1\nWerkzeug&#x3D;&#x3D;2.2.3\nWTForms&#x3D;&#x3D;3.0.1\n</code></pre>\n\n<h2 id=\"4-安装依赖文件（执行此步之前建议先看后续踩坑部分，节省时间）\"><a href=\"#4-安装依赖文件（执行此步之前建议先看后续踩坑部分，节省时间）\" class=\"headerlink\" title=\"4.安装依赖文件（执行此步之前建议先看后续踩坑部分，节省时间）\"></a>4.安装依赖文件（执行此步之前建议先看后续踩坑部分，节省时间）</h2><p>执行：</p>\n<pre class=\"language-none\"><code class=\"language-none\">pip install -r .&#x2F;requirements.txt</code></pre>\n<p>漫长的下载过程</p>\n<h2 id=\"5-踩的坑\"><a href=\"#5-踩的坑\" class=\"headerlink\" title=\"5.踩的坑\"></a>5.踩的坑</h2><h3 id=\"skimage报错\"><a href=\"#skimage报错\" class=\"headerlink\" title=\"skimage报错\"></a>skimage报错</h3><p>报错内容如下：</p>\n<blockquote>\n<p> error: subprocess-exited-with-error</p>\n<p>  × python setup.py egg_info did not run successfully.<br>  │ exit code: 1<br>  ╰─&gt; [3 lines of output]</p>\n<pre><code>  *** Please install the `scikit-image` package (instead of `skimage`) ***\n\n  [end of output]\n</code></pre>\n<p>  note: This error originates from a subprocess, and is likely not a problem with pip.<br>error: metadata-generation-failed</p>\n<p>× Encountered error while generating package metadata.<br>╰─&gt; See above for output.</p>\n<p>note: This is an issue with the package mentioned above, not pip.<br>hint: See above for details.</p>\n</blockquote>\n<p>看字面意思是说，不要安装skimage，而是安装scikit-image。<br>考虑到生成的requirements.txt文件中有这两行:</p>\n<pre class=\"language-none\"><code class=\"language-none\">scikit_image&#x3D;&#x3D;0.19.2\nskimage&#x3D;&#x3D;0.0</code></pre>\n<p>scikit-image已经安装好了，那直接把<code>skimage==0.0</code>删除即可。</p>\n<h3 id=\"安装成功后报dependency-confilct错误\"><a href=\"#安装成功后报dependency-confilct错误\" class=\"headerlink\" title=\"安装成功后报dependency confilct错误\"></a>安装成功后报dependency confilct错误</h3><p>报错内容如下：</p>\n<pre class=\"language-none\"><code class=\"language-none\">ERROR: pip&#39;s dependency resolver does not currently take into account all the packages that are installed. This behaviour is the source of the following dependency conflicts.\ndaal4py 2021.6.0 requires daal&#x3D;&#x3D;2021.4.0, which is not installed.\nanaconda-project 0.11.1 requires ruamel-yaml, which is not installed.</code></pre>\n\n<p>是有两个依赖<code>daal==2021.4.0</code>和<code>ruamel-yaml</code>没有安装，按照提示逐个安装：</p>\n<pre class=\"language-none\"><code class=\"language-none\">pip install daal&#x3D;&#x3D;2021.4.0\npip install ruamel-yaml</code></pre>\n\n<p>然而，在安装<code>daal==2021.4.0</code>这个库的时候，又给老子报了个错：</p>\n<pre class=\"language-none\"><code class=\"language-none\">ERROR: Cannot uninstall &#39;TBB&#39;. It is a distutils installed project and thus we cannot accurately determine which files belong to it which would lead to only a partial uninstall.</code></pre>\n<p>意思是安装过程中无法卸载老版本的TBB库。<br>那让我们友好地手动去卸载吧。<br>通过命令<code>pip install tbb</code>确定已安装的tbb库的位置。<br>我的输出如下：</p>\n<pre class=\"language-none\"><code class=\"language-none\">Looking in indexes: https:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;pypi&#x2F;simple\nRequirement already satisfied: tbb in .&#x2F;anaconda3&#x2F;lib&#x2F;python3.9&#x2F;site-packages (0.2)</code></pre>\n<p>意思是包位置在.&#x2F;anaconda3&#x2F;lib&#x2F;python3.9&#x2F;site-packages (0.2)，进入这个目录，执行<code>ls</code>，找到和tbb有关的结果：</p>\n<pre class=\"language-none\"><code class=\"language-none\">tbb\nTBB-0.2-py3.9.egg-info\nTBB.py</code></pre>\n<p>把这三个删掉</p>\n<pre class=\"language-none\"><code class=\"language-none\">rm -rf tbb TBB.py TBB-0.2-py3.9.egg-info</code></pre>\n<p>再去安装dall应该没问题了。</p>\n"},{"title":"Ubuntu20.04下，nginx+ffmpeg+nginx-http-flv-module实现播放视频，docker部署算法的环境配置","layout":"Ubuntu20.04下，nginx+ffmpeg+nginx-http-flv-module实现播放视频，docker部署算法的环境配置","date":"2023-03-31T07:47:29.000Z","_content":"# 环境配置\n\n# nginx\n## 若以前安装过，先卸载\n```\nsudo apt-get --purge remove nginx\n \nsudo apt-get --purge remove nginx-common\n \ndpkg --get-selections|grep nginx\n```\n\n## 1.前置环境\n```\nsudo apt-get update\nsudo apt-get install gcc\nsudo apt-get install ruby\nsudo apt-get install zlib1g\nsudo apt-get install zlib1g.dev\nsudo apt-get install libpcre3 libpcre3-dev\nsudo apt-get install openssl libssl-dev\n```\n## 2.下载nginx源码\n下载地址在https://nginx.org\n我这里1.22.1版本，nginx-1.22.1.tar.gz\n解压到用户主目录 ~\n\n\n注意：如果使用向日葵传输文件夹，文件夹的owner和gruop默认是root，对该文件夹的一切操作都需要root权限。或者也可以使用下面的方法：\n```\nsudo chown -R user <文件夹路径>\nsudo chgrp -R user <文件夹路径>\n```\n\n## 3.下载nginx-http-flv-module\n我这里下载1.2.10版本nginx-http-flv-module-1.2.10.zip\n把nginx-http-flv-module解压，移动到/usr/local目录下，并将文件夹改名为：nginx-http-flv-module\n```\nsudo mv nginx-http-flv-module-1.2.10 /usr/local/nginx-http-flv-module\n```\n进入nginx目录\n```\ncd ~/nginx-1.22.1\n```\n将nginx-http-flv-module添加到nginx中\n```\nsudo ./configure --prefix=/usr/local  --with-http_ssl_module --add-module=/usr/local/nginx-http-flv-module\n```\n生成make文件\n```\nsudo make\n```\n安装\n```\nsudo make install\n```\n测试是否安装成功\n```\nnginx -v\n```\n\n## 4.配置nginx\n需要修改nginx的配置文件，它的位置在nginx-1.22.1/conf/nginx.conf\nnginx.conf文件内容如下：\n```\n\nworker_processes  10; #should be 1 for Windows, for it doesn't support Unix domain socket\n#worker_processes  auto; #from versions 1.3.8 and 1.2.5\n\n#worker_cpu_affinity  0001 0010 0100 1000; #only available on FreeBSD and Linux\n#worker_cpu_affinity  auto; #from version 1.9.10\n\nerror_log logs/error.log error;\n\n#if the module is compiled as a dynamic module and features relevant\n#to RTMP are needed, the command below MUST be specified and MUST be\n#located before events directive, otherwise the module won't be loaded\n#or will be loaded unsuccessfully when NGINX is started\n\n#load_module modules/ngx_http_flv_live_module.so;\n\nevents {\n    worker_connections  10240;\n}\n\nhttp {\n    \tinclude       mime.types;\n    \tdefault_type  application/octet-stream;\n    \tsendfile        on;\n   \tkeepalive_timeout  65;\n    \tserver {\n        \tlisten       9000; #http-flv的拉流端口\n        \tserver_name  localhost【这个地方写你的ip、或者说是域名都是可以的--】; #http-flv的拉流ip\n        \tlocation / {\n            \troot   html;\n            \tindex  index.html index.htm;\n       \t\t}\n            #http-flv的相关配置\n        \tlocation /live{\n                flv_live on; #打开HTTP播放FLV直播流功能\n                chunked_transfer_encoding  on;\n                add_header 'Access-Control-Allow-Origin' '*';\n                add_header 'Access-Control-Allow-Credentials' 'true';\n        \t}\n        \tlocation /hls{\n                types {\n                \tapplication/vnd.apple.mpegurl m3u8;\n\t\t\tvideo/mp2t ts;\n                 }\n                 root ~/nginx-1.22.1/html/hls;\n                 add_header 'Cache-Control' 'no-cache';\n        \t}\n         \tlocation /dash {\n            \troot ~/nginx-1.22.1/html/dash;\n            \tadd_header 'Cache-Control' 'no-cache';\n        \t}\n \n         \tlocation /stat {\n            \t#configuration of push & pull status\n              \trtmp_stat all;\n              \trtmp_stat_stylesheet stat.xsl;\n         \t}\n        \tlocation /stat.xsl {\n          \t\troot ~/nginx-1.22.1/html;\n        \t}\n \n         \tlocation /control {\n            \trtmp_control all; #configuration of control module of rtmp\n\t\t\t}\n \n        \terror_page   500 502 503 504  /50x.html;\n        \tlocation = /50x.html {\n            \troot   html;\n        \t}\n    \t}\n \n}\n\nrtmp_auto_push on;\nrtmp_auto_push_reconnect 1s;\nrtmp_socket_dir /tmp;\n\n\nrtmp{\n        out_queue 4096;\n        out_cork 8;\n        max_streams 128;\n        timeout 15s;\n        drop_idle_publisher 15s;\n        log_interval 5s;\n        log_size 1m;\n        server{\n            #推流端口\n        \tlisten 1935;\n            #推流应用名称\n         \tapplication myapp{\n                 live on;\n\t \t record off;\n                 gop_cache on;\n          \t}\n         \tapplication hls{\n          \t\tlive on;\n          \t\thls on;\n          \t\thls_path ~/nginx-1.22.1/html/hls;\n          \t\thls_fragment 1s;\n                        hls_playlist_length 3s;\n        \t}\n         \tapplication dash{\n           \t\tlive on;\n           \t\tdash on;\n           \t\tdash_path ~/nginx-1.22.1/html/dash;\n         \t}\n \n        }\n}\n\n\n```\n文件中有五处路径为~/nginx-1.22.1，在实际使用时要换成具体的目录，例如用户为user，那么这里就要把~换成用户主目录/home/user\n该文件要放到~/nginx-1.22.1/conf文件夹下\n## 5.启动nginx\n```\ncd ~/nginx-1.22.1\nsudo nginx -c conf/nginx.conf\nsudo nginx -s reload\n```\n## 6.安装ffmpeg\n```\nsudo apt-get install ffmpeg\n```\n## 7.测试推流\n```\nffmpeg -re -i rtsp://wowzaec2demo.streamlock.net/vod/mp4:BigBuckBunny_115k.mp4 -vcodec copy -acodec copy -f flv \"rtmp://127.0.0.1:1935/myapp/test\"\n```\n\n\n\n# Docker\n\n## Docker安装\n```\nsudo apt-get install curl\ncurl -sSL https://get.daocloud.io/docker | sh\n```\n\n## 拉取镜像源\n```\nsudo docker pull iludfy/predict_model\n```\n\n## Docker创建容器并启动\n拉取完镜像需要挂载到容器中才能启动，命令是docker run，它的参数如下：\n```\nsudo docker run [Options] image\n\n#参数说明\n--name=\"名字\"           指定容器名字\n-d                     后台方式运行\n-it                    使用交互方式运行,进入容器查看内容\n-p                     指定容器的端口\n\t-p ip:主机端口:容器端口  配置主机端口映射到容器端口\n\t-p 主机端口:容器端口（常用）\n\t-p 容器端口\n-P                     随机指定端口\n-e\t\t\t\t\t   环境设置\n-v\t\t\t\t\t   容器数据卷挂载\n```\n\n规定端口为5000，输入下面的命令：\n```\nsudo docker run -p 5000:5000 iludfy/predict_model\n```\n一个容器就已经被创建好并启动了。\n### 端口被占用解决办法：\n以ubuntu系统为例：\n先查到5000端口被哪个进程占用：\n```\nsudo netstat -ntlp\n```\n查到进程id后，使用kill命令杀死进程：\n```\nsudo kill {pid}\n```\n查看刚刚创建的容器的id：\n```\nsudo docker ps -a\n```\n启动\n```\nsudo docker start {id}\n```\n\n\n\n\n\n\n\n# Java\n\n## 下载jdk\n先检验是否安装java:\n```\njava -version\n```\n若没有安装java，会得到如下输出：\n```\nuser@user-NULL:~$ java -version\n\nCommand 'java' not found, but can be installed with:\n\nsudo apt install openjdk-11-jre-headless  # version 11.0.18+10-0ubuntu1~20.04.1, or\nsudo apt install default-jre              # version 2:1.11-72\nsudo apt install openjdk-16-jre-headless  # version 16.0.1+9-1~20.04\nsudo apt install openjdk-17-jre-headless  # version 17.0.6+10-0ubuntu1~20.04.1\nsudo apt install openjdk-8-jre-headless   # version 8u362-ga-0ubuntu1~20.04.1\nsudo apt install openjdk-13-jre-headless  # version 13.0.7+5-0ubuntu1~20.04\n\n```\n上面已经自动列出可选的版本了，我们这里选择java8安装：\n```\nsudo apt install openjdk-8-jre-headless\nsudo apt install openjdk-8-jdk-headless\n```\n安装好后再检查java安装：\n```\nuser@user-NULL:~$ java -version\nopenjdk version \"1.8.0_362\"\nOpenJDK Runtime Environment (build 1.8.0_362-8u362-ga-0ubuntu1~20.04.1-b09)\nOpenJDK 64-Bit Server VM (build 25.362-b09, mixed mode)\n\nuser@user-NULL:~$ javac -version\njavac 1.8.0_362\n```\n\n## 配置java环境变量\n\n要配置环境变量，首先需要知道java的安装路径：\n```\nsudo update-alternatives --config java\n```\n得到如下输出：\n```\n链接组 java (提供 /usr/bin/java)中只有一个候选项：/usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java\n无需配置。\n```\n拿到路径后打开环境变量配置文件：\n```\nsudo vim /etc/environment\n```\n在此文件的末尾，添加java路径：\n```\nJAVA_HOME=\"/usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java\"\n```\n修改此文件将为系统上的所有用户设置JAVA_HOME路径。\n\n保存文件并退出编辑器。\n\n现在重新加载此文件：\n```\nsource /etc/environment\n```\n验证是否已设置环境变量：\n```\necho $JAVA_HOME\n```\n输出路径：\n```\n/usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java\n```\n其他用户需要执行命令source /etc/environment或注销并重新登录才能应用此设置。\n","source":"_posts/Ubuntu20-04下，nginx-ffmpeg-nginx-http-flv-module实现播放视频，docker部署算法的环境配置.md","raw":"---\ntitle: 'Ubuntu20.04下，nginx+ffmpeg+nginx-http-flv-module实现播放视频，docker部署算法的环境配置'\nlayout: 'Ubuntu20.04下，nginx+ffmpeg+nginx-http-flv-module实现播放视频，docker部署算法的环境配置'\ndate: 2023-03-31 15:47:29\ntags:\n - nginx\n - ffmpeg\n - docker\n - java\n - mysql\ncategories: 环境配置\n---\n# 环境配置\n\n# nginx\n## 若以前安装过，先卸载\n```\nsudo apt-get --purge remove nginx\n \nsudo apt-get --purge remove nginx-common\n \ndpkg --get-selections|grep nginx\n```\n\n## 1.前置环境\n```\nsudo apt-get update\nsudo apt-get install gcc\nsudo apt-get install ruby\nsudo apt-get install zlib1g\nsudo apt-get install zlib1g.dev\nsudo apt-get install libpcre3 libpcre3-dev\nsudo apt-get install openssl libssl-dev\n```\n## 2.下载nginx源码\n下载地址在https://nginx.org\n我这里1.22.1版本，nginx-1.22.1.tar.gz\n解压到用户主目录 ~\n\n\n注意：如果使用向日葵传输文件夹，文件夹的owner和gruop默认是root，对该文件夹的一切操作都需要root权限。或者也可以使用下面的方法：\n```\nsudo chown -R user <文件夹路径>\nsudo chgrp -R user <文件夹路径>\n```\n\n## 3.下载nginx-http-flv-module\n我这里下载1.2.10版本nginx-http-flv-module-1.2.10.zip\n把nginx-http-flv-module解压，移动到/usr/local目录下，并将文件夹改名为：nginx-http-flv-module\n```\nsudo mv nginx-http-flv-module-1.2.10 /usr/local/nginx-http-flv-module\n```\n进入nginx目录\n```\ncd ~/nginx-1.22.1\n```\n将nginx-http-flv-module添加到nginx中\n```\nsudo ./configure --prefix=/usr/local  --with-http_ssl_module --add-module=/usr/local/nginx-http-flv-module\n```\n生成make文件\n```\nsudo make\n```\n安装\n```\nsudo make install\n```\n测试是否安装成功\n```\nnginx -v\n```\n\n## 4.配置nginx\n需要修改nginx的配置文件，它的位置在nginx-1.22.1/conf/nginx.conf\nnginx.conf文件内容如下：\n```\n\nworker_processes  10; #should be 1 for Windows, for it doesn't support Unix domain socket\n#worker_processes  auto; #from versions 1.3.8 and 1.2.5\n\n#worker_cpu_affinity  0001 0010 0100 1000; #only available on FreeBSD and Linux\n#worker_cpu_affinity  auto; #from version 1.9.10\n\nerror_log logs/error.log error;\n\n#if the module is compiled as a dynamic module and features relevant\n#to RTMP are needed, the command below MUST be specified and MUST be\n#located before events directive, otherwise the module won't be loaded\n#or will be loaded unsuccessfully when NGINX is started\n\n#load_module modules/ngx_http_flv_live_module.so;\n\nevents {\n    worker_connections  10240;\n}\n\nhttp {\n    \tinclude       mime.types;\n    \tdefault_type  application/octet-stream;\n    \tsendfile        on;\n   \tkeepalive_timeout  65;\n    \tserver {\n        \tlisten       9000; #http-flv的拉流端口\n        \tserver_name  localhost【这个地方写你的ip、或者说是域名都是可以的--】; #http-flv的拉流ip\n        \tlocation / {\n            \troot   html;\n            \tindex  index.html index.htm;\n       \t\t}\n            #http-flv的相关配置\n        \tlocation /live{\n                flv_live on; #打开HTTP播放FLV直播流功能\n                chunked_transfer_encoding  on;\n                add_header 'Access-Control-Allow-Origin' '*';\n                add_header 'Access-Control-Allow-Credentials' 'true';\n        \t}\n        \tlocation /hls{\n                types {\n                \tapplication/vnd.apple.mpegurl m3u8;\n\t\t\tvideo/mp2t ts;\n                 }\n                 root ~/nginx-1.22.1/html/hls;\n                 add_header 'Cache-Control' 'no-cache';\n        \t}\n         \tlocation /dash {\n            \troot ~/nginx-1.22.1/html/dash;\n            \tadd_header 'Cache-Control' 'no-cache';\n        \t}\n \n         \tlocation /stat {\n            \t#configuration of push & pull status\n              \trtmp_stat all;\n              \trtmp_stat_stylesheet stat.xsl;\n         \t}\n        \tlocation /stat.xsl {\n          \t\troot ~/nginx-1.22.1/html;\n        \t}\n \n         \tlocation /control {\n            \trtmp_control all; #configuration of control module of rtmp\n\t\t\t}\n \n        \terror_page   500 502 503 504  /50x.html;\n        \tlocation = /50x.html {\n            \troot   html;\n        \t}\n    \t}\n \n}\n\nrtmp_auto_push on;\nrtmp_auto_push_reconnect 1s;\nrtmp_socket_dir /tmp;\n\n\nrtmp{\n        out_queue 4096;\n        out_cork 8;\n        max_streams 128;\n        timeout 15s;\n        drop_idle_publisher 15s;\n        log_interval 5s;\n        log_size 1m;\n        server{\n            #推流端口\n        \tlisten 1935;\n            #推流应用名称\n         \tapplication myapp{\n                 live on;\n\t \t record off;\n                 gop_cache on;\n          \t}\n         \tapplication hls{\n          \t\tlive on;\n          \t\thls on;\n          \t\thls_path ~/nginx-1.22.1/html/hls;\n          \t\thls_fragment 1s;\n                        hls_playlist_length 3s;\n        \t}\n         \tapplication dash{\n           \t\tlive on;\n           \t\tdash on;\n           \t\tdash_path ~/nginx-1.22.1/html/dash;\n         \t}\n \n        }\n}\n\n\n```\n文件中有五处路径为~/nginx-1.22.1，在实际使用时要换成具体的目录，例如用户为user，那么这里就要把~换成用户主目录/home/user\n该文件要放到~/nginx-1.22.1/conf文件夹下\n## 5.启动nginx\n```\ncd ~/nginx-1.22.1\nsudo nginx -c conf/nginx.conf\nsudo nginx -s reload\n```\n## 6.安装ffmpeg\n```\nsudo apt-get install ffmpeg\n```\n## 7.测试推流\n```\nffmpeg -re -i rtsp://wowzaec2demo.streamlock.net/vod/mp4:BigBuckBunny_115k.mp4 -vcodec copy -acodec copy -f flv \"rtmp://127.0.0.1:1935/myapp/test\"\n```\n\n\n\n# Docker\n\n## Docker安装\n```\nsudo apt-get install curl\ncurl -sSL https://get.daocloud.io/docker | sh\n```\n\n## 拉取镜像源\n```\nsudo docker pull iludfy/predict_model\n```\n\n## Docker创建容器并启动\n拉取完镜像需要挂载到容器中才能启动，命令是docker run，它的参数如下：\n```\nsudo docker run [Options] image\n\n#参数说明\n--name=\"名字\"           指定容器名字\n-d                     后台方式运行\n-it                    使用交互方式运行,进入容器查看内容\n-p                     指定容器的端口\n\t-p ip:主机端口:容器端口  配置主机端口映射到容器端口\n\t-p 主机端口:容器端口（常用）\n\t-p 容器端口\n-P                     随机指定端口\n-e\t\t\t\t\t   环境设置\n-v\t\t\t\t\t   容器数据卷挂载\n```\n\n规定端口为5000，输入下面的命令：\n```\nsudo docker run -p 5000:5000 iludfy/predict_model\n```\n一个容器就已经被创建好并启动了。\n### 端口被占用解决办法：\n以ubuntu系统为例：\n先查到5000端口被哪个进程占用：\n```\nsudo netstat -ntlp\n```\n查到进程id后，使用kill命令杀死进程：\n```\nsudo kill {pid}\n```\n查看刚刚创建的容器的id：\n```\nsudo docker ps -a\n```\n启动\n```\nsudo docker start {id}\n```\n\n\n\n\n\n\n\n# Java\n\n## 下载jdk\n先检验是否安装java:\n```\njava -version\n```\n若没有安装java，会得到如下输出：\n```\nuser@user-NULL:~$ java -version\n\nCommand 'java' not found, but can be installed with:\n\nsudo apt install openjdk-11-jre-headless  # version 11.0.18+10-0ubuntu1~20.04.1, or\nsudo apt install default-jre              # version 2:1.11-72\nsudo apt install openjdk-16-jre-headless  # version 16.0.1+9-1~20.04\nsudo apt install openjdk-17-jre-headless  # version 17.0.6+10-0ubuntu1~20.04.1\nsudo apt install openjdk-8-jre-headless   # version 8u362-ga-0ubuntu1~20.04.1\nsudo apt install openjdk-13-jre-headless  # version 13.0.7+5-0ubuntu1~20.04\n\n```\n上面已经自动列出可选的版本了，我们这里选择java8安装：\n```\nsudo apt install openjdk-8-jre-headless\nsudo apt install openjdk-8-jdk-headless\n```\n安装好后再检查java安装：\n```\nuser@user-NULL:~$ java -version\nopenjdk version \"1.8.0_362\"\nOpenJDK Runtime Environment (build 1.8.0_362-8u362-ga-0ubuntu1~20.04.1-b09)\nOpenJDK 64-Bit Server VM (build 25.362-b09, mixed mode)\n\nuser@user-NULL:~$ javac -version\njavac 1.8.0_362\n```\n\n## 配置java环境变量\n\n要配置环境变量，首先需要知道java的安装路径：\n```\nsudo update-alternatives --config java\n```\n得到如下输出：\n```\n链接组 java (提供 /usr/bin/java)中只有一个候选项：/usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java\n无需配置。\n```\n拿到路径后打开环境变量配置文件：\n```\nsudo vim /etc/environment\n```\n在此文件的末尾，添加java路径：\n```\nJAVA_HOME=\"/usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java\"\n```\n修改此文件将为系统上的所有用户设置JAVA_HOME路径。\n\n保存文件并退出编辑器。\n\n现在重新加载此文件：\n```\nsource /etc/environment\n```\n验证是否已设置环境变量：\n```\necho $JAVA_HOME\n```\n输出路径：\n```\n/usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java\n```\n其他用户需要执行命令source /etc/environment或注销并重新登录才能应用此设置。\n","slug":"Ubuntu20-04下，nginx-ffmpeg-nginx-http-flv-module实现播放视频，docker部署算法的环境配置","published":1,"updated":"2024-04-09T10:59:25.103Z","comments":1,"photos":[],"link":"","_id":"clusa3wnk00082s7e9czjgekl","content":"<h1 id=\"环境配置\"><a href=\"#环境配置\" class=\"headerlink\" title=\"环境配置\"></a>环境配置</h1><h1 id=\"nginx\"><a href=\"#nginx\" class=\"headerlink\" title=\"nginx\"></a>nginx</h1><h2 id=\"若以前安装过，先卸载\"><a href=\"#若以前安装过，先卸载\" class=\"headerlink\" title=\"若以前安装过，先卸载\"></a>若以前安装过，先卸载</h2><pre class=\"language-none\"><code class=\"language-none\">sudo apt-get --purge remove nginx\n \nsudo apt-get --purge remove nginx-common\n \ndpkg --get-selections|grep nginx</code></pre>\n\n<h2 id=\"1-前置环境\"><a href=\"#1-前置环境\" class=\"headerlink\" title=\"1.前置环境\"></a>1.前置环境</h2><pre class=\"language-none\"><code class=\"language-none\">sudo apt-get update\nsudo apt-get install gcc\nsudo apt-get install ruby\nsudo apt-get install zlib1g\nsudo apt-get install zlib1g.dev\nsudo apt-get install libpcre3 libpcre3-dev\nsudo apt-get install openssl libssl-dev</code></pre>\n<h2 id=\"2-下载nginx源码\"><a href=\"#2-下载nginx源码\" class=\"headerlink\" title=\"2.下载nginx源码\"></a>2.下载nginx源码</h2><p>下载地址在<a href=\"https://nginx.org/\">https://nginx.org</a><br>我这里1.22.1版本，nginx-1.22.1.tar.gz<br>解压到用户主目录 ~</p>\n<p>注意：如果使用向日葵传输文件夹，文件夹的owner和gruop默认是root，对该文件夹的一切操作都需要root权限。或者也可以使用下面的方法：</p>\n<pre class=\"language-none\"><code class=\"language-none\">sudo chown -R user &lt;文件夹路径&gt;\nsudo chgrp -R user &lt;文件夹路径&gt;</code></pre>\n\n<h2 id=\"3-下载nginx-http-flv-module\"><a href=\"#3-下载nginx-http-flv-module\" class=\"headerlink\" title=\"3.下载nginx-http-flv-module\"></a>3.下载nginx-http-flv-module</h2><p>我这里下载1.2.10版本nginx-http-flv-module-1.2.10.zip<br>把nginx-http-flv-module解压，移动到&#x2F;usr&#x2F;local目录下，并将文件夹改名为：nginx-http-flv-module</p>\n<pre class=\"language-none\"><code class=\"language-none\">sudo mv nginx-http-flv-module-1.2.10 &#x2F;usr&#x2F;local&#x2F;nginx-http-flv-module</code></pre>\n<p>进入nginx目录</p>\n<pre class=\"language-none\"><code class=\"language-none\">cd ~&#x2F;nginx-1.22.1</code></pre>\n<p>将nginx-http-flv-module添加到nginx中</p>\n<pre class=\"language-none\"><code class=\"language-none\">sudo .&#x2F;configure --prefix&#x3D;&#x2F;usr&#x2F;local  --with-http_ssl_module --add-module&#x3D;&#x2F;usr&#x2F;local&#x2F;nginx-http-flv-module</code></pre>\n<p>生成make文件</p>\n<pre class=\"language-none\"><code class=\"language-none\">sudo make</code></pre>\n<p>安装</p>\n<pre class=\"language-none\"><code class=\"language-none\">sudo make install</code></pre>\n<p>测试是否安装成功</p>\n<pre class=\"language-none\"><code class=\"language-none\">nginx -v</code></pre>\n\n<h2 id=\"4-配置nginx\"><a href=\"#4-配置nginx\" class=\"headerlink\" title=\"4.配置nginx\"></a>4.配置nginx</h2><p>需要修改nginx的配置文件，它的位置在nginx-1.22.1&#x2F;conf&#x2F;nginx.conf<br>nginx.conf文件内容如下：</p>\n<pre class=\"language-none\"><code class=\"language-none\">\nworker_processes  10; #should be 1 for Windows, for it doesn&#39;t support Unix domain socket\n#worker_processes  auto; #from versions 1.3.8 and 1.2.5\n\n#worker_cpu_affinity  0001 0010 0100 1000; #only available on FreeBSD and Linux\n#worker_cpu_affinity  auto; #from version 1.9.10\n\nerror_log logs&#x2F;error.log error;\n\n#if the module is compiled as a dynamic module and features relevant\n#to RTMP are needed, the command below MUST be specified and MUST be\n#located before events directive, otherwise the module won&#39;t be loaded\n#or will be loaded unsuccessfully when NGINX is started\n\n#load_module modules&#x2F;ngx_http_flv_live_module.so;\n\nevents &#123;\n    worker_connections  10240;\n&#125;\n\nhttp &#123;\n    \tinclude       mime.types;\n    \tdefault_type  application&#x2F;octet-stream;\n    \tsendfile        on;\n   \tkeepalive_timeout  65;\n    \tserver &#123;\n        \tlisten       9000; #http-flv的拉流端口\n        \tserver_name  localhost【这个地方写你的ip、或者说是域名都是可以的--】; #http-flv的拉流ip\n        \tlocation &#x2F; &#123;\n            \troot   html;\n            \tindex  index.html index.htm;\n       \t\t&#125;\n            #http-flv的相关配置\n        \tlocation &#x2F;live&#123;\n                flv_live on; #打开HTTP播放FLV直播流功能\n                chunked_transfer_encoding  on;\n                add_header &#39;Access-Control-Allow-Origin&#39; &#39;*&#39;;\n                add_header &#39;Access-Control-Allow-Credentials&#39; &#39;true&#39;;\n        \t&#125;\n        \tlocation &#x2F;hls&#123;\n                types &#123;\n                \tapplication&#x2F;vnd.apple.mpegurl m3u8;\n\t\t\tvideo&#x2F;mp2t ts;\n                 &#125;\n                 root ~&#x2F;nginx-1.22.1&#x2F;html&#x2F;hls;\n                 add_header &#39;Cache-Control&#39; &#39;no-cache&#39;;\n        \t&#125;\n         \tlocation &#x2F;dash &#123;\n            \troot ~&#x2F;nginx-1.22.1&#x2F;html&#x2F;dash;\n            \tadd_header &#39;Cache-Control&#39; &#39;no-cache&#39;;\n        \t&#125;\n \n         \tlocation &#x2F;stat &#123;\n            \t#configuration of push &amp; pull status\n              \trtmp_stat all;\n              \trtmp_stat_stylesheet stat.xsl;\n         \t&#125;\n        \tlocation &#x2F;stat.xsl &#123;\n          \t\troot ~&#x2F;nginx-1.22.1&#x2F;html;\n        \t&#125;\n \n         \tlocation &#x2F;control &#123;\n            \trtmp_control all; #configuration of control module of rtmp\n\t\t\t&#125;\n \n        \terror_page   500 502 503 504  &#x2F;50x.html;\n        \tlocation &#x3D; &#x2F;50x.html &#123;\n            \troot   html;\n        \t&#125;\n    \t&#125;\n \n&#125;\n\nrtmp_auto_push on;\nrtmp_auto_push_reconnect 1s;\nrtmp_socket_dir &#x2F;tmp;\n\n\nrtmp&#123;\n        out_queue 4096;\n        out_cork 8;\n        max_streams 128;\n        timeout 15s;\n        drop_idle_publisher 15s;\n        log_interval 5s;\n        log_size 1m;\n        server&#123;\n            #推流端口\n        \tlisten 1935;\n            #推流应用名称\n         \tapplication myapp&#123;\n                 live on;\n\t \t record off;\n                 gop_cache on;\n          \t&#125;\n         \tapplication hls&#123;\n          \t\tlive on;\n          \t\thls on;\n          \t\thls_path ~&#x2F;nginx-1.22.1&#x2F;html&#x2F;hls;\n          \t\thls_fragment 1s;\n                        hls_playlist_length 3s;\n        \t&#125;\n         \tapplication dash&#123;\n           \t\tlive on;\n           \t\tdash on;\n           \t\tdash_path ~&#x2F;nginx-1.22.1&#x2F;html&#x2F;dash;\n         \t&#125;\n \n        &#125;\n&#125;\n\n</code></pre>\n<p>文件中有五处路径为<del>&#x2F;nginx-1.22.1，在实际使用时要换成具体的目录，例如用户为user，那么这里就要把</del>换成用户主目录&#x2F;home&#x2F;user<br>该文件要放到~&#x2F;nginx-1.22.1&#x2F;conf文件夹下</p>\n<h2 id=\"5-启动nginx\"><a href=\"#5-启动nginx\" class=\"headerlink\" title=\"5.启动nginx\"></a>5.启动nginx</h2><pre class=\"language-none\"><code class=\"language-none\">cd ~&#x2F;nginx-1.22.1\nsudo nginx -c conf&#x2F;nginx.conf\nsudo nginx -s reload</code></pre>\n<h2 id=\"6-安装ffmpeg\"><a href=\"#6-安装ffmpeg\" class=\"headerlink\" title=\"6.安装ffmpeg\"></a>6.安装ffmpeg</h2><pre class=\"language-none\"><code class=\"language-none\">sudo apt-get install ffmpeg</code></pre>\n<h2 id=\"7-测试推流\"><a href=\"#7-测试推流\" class=\"headerlink\" title=\"7.测试推流\"></a>7.测试推流</h2><pre class=\"language-none\"><code class=\"language-none\">ffmpeg -re -i rtsp:&#x2F;&#x2F;wowzaec2demo.streamlock.net&#x2F;vod&#x2F;mp4:BigBuckBunny_115k.mp4 -vcodec copy -acodec copy -f flv &quot;rtmp:&#x2F;&#x2F;127.0.0.1:1935&#x2F;myapp&#x2F;test&quot;</code></pre>\n\n\n\n<h1 id=\"Docker\"><a href=\"#Docker\" class=\"headerlink\" title=\"Docker\"></a>Docker</h1><h2 id=\"Docker安装\"><a href=\"#Docker安装\" class=\"headerlink\" title=\"Docker安装\"></a>Docker安装</h2><pre class=\"language-none\"><code class=\"language-none\">sudo apt-get install curl\ncurl -sSL https:&#x2F;&#x2F;get.daocloud.io&#x2F;docker | sh</code></pre>\n\n<h2 id=\"拉取镜像源\"><a href=\"#拉取镜像源\" class=\"headerlink\" title=\"拉取镜像源\"></a>拉取镜像源</h2><pre class=\"language-none\"><code class=\"language-none\">sudo docker pull iludfy&#x2F;predict_model</code></pre>\n\n<h2 id=\"Docker创建容器并启动\"><a href=\"#Docker创建容器并启动\" class=\"headerlink\" title=\"Docker创建容器并启动\"></a>Docker创建容器并启动</h2><p>拉取完镜像需要挂载到容器中才能启动，命令是docker run，它的参数如下：</p>\n<pre class=\"language-none\"><code class=\"language-none\">sudo docker run [Options] image\n\n#参数说明\n--name&#x3D;&quot;名字&quot;           指定容器名字\n-d                     后台方式运行\n-it                    使用交互方式运行,进入容器查看内容\n-p                     指定容器的端口\n\t-p ip:主机端口:容器端口  配置主机端口映射到容器端口\n\t-p 主机端口:容器端口（常用）\n\t-p 容器端口\n-P                     随机指定端口\n-e\t\t\t\t\t   环境设置\n-v\t\t\t\t\t   容器数据卷挂载</code></pre>\n\n<p>规定端口为5000，输入下面的命令：</p>\n<pre class=\"language-none\"><code class=\"language-none\">sudo docker run -p 5000:5000 iludfy&#x2F;predict_model</code></pre>\n<p>一个容器就已经被创建好并启动了。</p>\n<h3 id=\"端口被占用解决办法：\"><a href=\"#端口被占用解决办法：\" class=\"headerlink\" title=\"端口被占用解决办法：\"></a>端口被占用解决办法：</h3><p>以ubuntu系统为例：<br>先查到5000端口被哪个进程占用：</p>\n<pre class=\"language-none\"><code class=\"language-none\">sudo netstat -ntlp</code></pre>\n<p>查到进程id后，使用kill命令杀死进程：</p>\n<pre class=\"language-none\"><code class=\"language-none\">sudo kill &#123;pid&#125;</code></pre>\n<p>查看刚刚创建的容器的id：</p>\n<pre class=\"language-none\"><code class=\"language-none\">sudo docker ps -a</code></pre>\n<p>启动</p>\n<pre class=\"language-none\"><code class=\"language-none\">sudo docker start &#123;id&#125;</code></pre>\n\n\n\n\n\n\n\n<h1 id=\"Java\"><a href=\"#Java\" class=\"headerlink\" title=\"Java\"></a>Java</h1><h2 id=\"下载jdk\"><a href=\"#下载jdk\" class=\"headerlink\" title=\"下载jdk\"></a>下载jdk</h2><p>先检验是否安装java:</p>\n<pre class=\"language-none\"><code class=\"language-none\">java -version</code></pre>\n<p>若没有安装java，会得到如下输出：</p>\n<pre class=\"language-none\"><code class=\"language-none\">user@user-NULL:~$ java -version\n\nCommand &#39;java&#39; not found, but can be installed with:\n\nsudo apt install openjdk-11-jre-headless  # version 11.0.18+10-0ubuntu1~20.04.1, or\nsudo apt install default-jre              # version 2:1.11-72\nsudo apt install openjdk-16-jre-headless  # version 16.0.1+9-1~20.04\nsudo apt install openjdk-17-jre-headless  # version 17.0.6+10-0ubuntu1~20.04.1\nsudo apt install openjdk-8-jre-headless   # version 8u362-ga-0ubuntu1~20.04.1\nsudo apt install openjdk-13-jre-headless  # version 13.0.7+5-0ubuntu1~20.04\n</code></pre>\n<p>上面已经自动列出可选的版本了，我们这里选择java8安装：</p>\n<pre class=\"language-none\"><code class=\"language-none\">sudo apt install openjdk-8-jre-headless\nsudo apt install openjdk-8-jdk-headless</code></pre>\n<p>安装好后再检查java安装：</p>\n<pre class=\"language-none\"><code class=\"language-none\">user@user-NULL:~$ java -version\nopenjdk version &quot;1.8.0_362&quot;\nOpenJDK Runtime Environment (build 1.8.0_362-8u362-ga-0ubuntu1~20.04.1-b09)\nOpenJDK 64-Bit Server VM (build 25.362-b09, mixed mode)\n\nuser@user-NULL:~$ javac -version\njavac 1.8.0_362</code></pre>\n\n<h2 id=\"配置java环境变量\"><a href=\"#配置java环境变量\" class=\"headerlink\" title=\"配置java环境变量\"></a>配置java环境变量</h2><p>要配置环境变量，首先需要知道java的安装路径：</p>\n<pre class=\"language-none\"><code class=\"language-none\">sudo update-alternatives --config java</code></pre>\n<p>得到如下输出：</p>\n<pre class=\"language-none\"><code class=\"language-none\">链接组 java (提供 &#x2F;usr&#x2F;bin&#x2F;java)中只有一个候选项：&#x2F;usr&#x2F;lib&#x2F;jvm&#x2F;java-8-openjdk-amd64&#x2F;jre&#x2F;bin&#x2F;java\n无需配置。</code></pre>\n<p>拿到路径后打开环境变量配置文件：</p>\n<pre class=\"language-none\"><code class=\"language-none\">sudo vim &#x2F;etc&#x2F;environment</code></pre>\n<p>在此文件的末尾，添加java路径：</p>\n<pre class=\"language-none\"><code class=\"language-none\">JAVA_HOME&#x3D;&quot;&#x2F;usr&#x2F;lib&#x2F;jvm&#x2F;java-8-openjdk-amd64&#x2F;jre&#x2F;bin&#x2F;java&quot;</code></pre>\n<p>修改此文件将为系统上的所有用户设置JAVA_HOME路径。</p>\n<p>保存文件并退出编辑器。</p>\n<p>现在重新加载此文件：</p>\n<pre class=\"language-none\"><code class=\"language-none\">source &#x2F;etc&#x2F;environment</code></pre>\n<p>验证是否已设置环境变量：</p>\n<pre class=\"language-none\"><code class=\"language-none\">echo $JAVA_HOME</code></pre>\n<p>输出路径：</p>\n<pre class=\"language-none\"><code class=\"language-none\">&#x2F;usr&#x2F;lib&#x2F;jvm&#x2F;java-8-openjdk-amd64&#x2F;jre&#x2F;bin&#x2F;java</code></pre>\n<p>其他用户需要执行命令source &#x2F;etc&#x2F;environment或注销并重新登录才能应用此设置。</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"环境配置\"><a href=\"#环境配置\" class=\"headerlink\" title=\"环境配置\"></a>环境配置</h1><h1 id=\"nginx\"><a href=\"#nginx\" class=\"headerlink\" title=\"nginx\"></a>nginx</h1><h2 id=\"若以前安装过，先卸载\"><a href=\"#若以前安装过，先卸载\" class=\"headerlink\" title=\"若以前安装过，先卸载\"></a>若以前安装过，先卸载</h2><pre class=\"language-none\"><code class=\"language-none\">sudo apt-get --purge remove nginx\n \nsudo apt-get --purge remove nginx-common\n \ndpkg --get-selections|grep nginx</code></pre>\n\n<h2 id=\"1-前置环境\"><a href=\"#1-前置环境\" class=\"headerlink\" title=\"1.前置环境\"></a>1.前置环境</h2><pre class=\"language-none\"><code class=\"language-none\">sudo apt-get update\nsudo apt-get install gcc\nsudo apt-get install ruby\nsudo apt-get install zlib1g\nsudo apt-get install zlib1g.dev\nsudo apt-get install libpcre3 libpcre3-dev\nsudo apt-get install openssl libssl-dev</code></pre>\n<h2 id=\"2-下载nginx源码\"><a href=\"#2-下载nginx源码\" class=\"headerlink\" title=\"2.下载nginx源码\"></a>2.下载nginx源码</h2><p>下载地址在<a href=\"https://nginx.org/\">https://nginx.org</a><br>我这里1.22.1版本，nginx-1.22.1.tar.gz<br>解压到用户主目录 ~</p>\n<p>注意：如果使用向日葵传输文件夹，文件夹的owner和gruop默认是root，对该文件夹的一切操作都需要root权限。或者也可以使用下面的方法：</p>\n<pre class=\"language-none\"><code class=\"language-none\">sudo chown -R user &lt;文件夹路径&gt;\nsudo chgrp -R user &lt;文件夹路径&gt;</code></pre>\n\n<h2 id=\"3-下载nginx-http-flv-module\"><a href=\"#3-下载nginx-http-flv-module\" class=\"headerlink\" title=\"3.下载nginx-http-flv-module\"></a>3.下载nginx-http-flv-module</h2><p>我这里下载1.2.10版本nginx-http-flv-module-1.2.10.zip<br>把nginx-http-flv-module解压，移动到&#x2F;usr&#x2F;local目录下，并将文件夹改名为：nginx-http-flv-module</p>\n<pre class=\"language-none\"><code class=\"language-none\">sudo mv nginx-http-flv-module-1.2.10 &#x2F;usr&#x2F;local&#x2F;nginx-http-flv-module</code></pre>\n<p>进入nginx目录</p>\n<pre class=\"language-none\"><code class=\"language-none\">cd ~&#x2F;nginx-1.22.1</code></pre>\n<p>将nginx-http-flv-module添加到nginx中</p>\n<pre class=\"language-none\"><code class=\"language-none\">sudo .&#x2F;configure --prefix&#x3D;&#x2F;usr&#x2F;local  --with-http_ssl_module --add-module&#x3D;&#x2F;usr&#x2F;local&#x2F;nginx-http-flv-module</code></pre>\n<p>生成make文件</p>\n<pre class=\"language-none\"><code class=\"language-none\">sudo make</code></pre>\n<p>安装</p>\n<pre class=\"language-none\"><code class=\"language-none\">sudo make install</code></pre>\n<p>测试是否安装成功</p>\n<pre class=\"language-none\"><code class=\"language-none\">nginx -v</code></pre>\n\n<h2 id=\"4-配置nginx\"><a href=\"#4-配置nginx\" class=\"headerlink\" title=\"4.配置nginx\"></a>4.配置nginx</h2><p>需要修改nginx的配置文件，它的位置在nginx-1.22.1&#x2F;conf&#x2F;nginx.conf<br>nginx.conf文件内容如下：</p>\n<pre class=\"language-none\"><code class=\"language-none\">\nworker_processes  10; #should be 1 for Windows, for it doesn&#39;t support Unix domain socket\n#worker_processes  auto; #from versions 1.3.8 and 1.2.5\n\n#worker_cpu_affinity  0001 0010 0100 1000; #only available on FreeBSD and Linux\n#worker_cpu_affinity  auto; #from version 1.9.10\n\nerror_log logs&#x2F;error.log error;\n\n#if the module is compiled as a dynamic module and features relevant\n#to RTMP are needed, the command below MUST be specified and MUST be\n#located before events directive, otherwise the module won&#39;t be loaded\n#or will be loaded unsuccessfully when NGINX is started\n\n#load_module modules&#x2F;ngx_http_flv_live_module.so;\n\nevents &#123;\n    worker_connections  10240;\n&#125;\n\nhttp &#123;\n    \tinclude       mime.types;\n    \tdefault_type  application&#x2F;octet-stream;\n    \tsendfile        on;\n   \tkeepalive_timeout  65;\n    \tserver &#123;\n        \tlisten       9000; #http-flv的拉流端口\n        \tserver_name  localhost【这个地方写你的ip、或者说是域名都是可以的--】; #http-flv的拉流ip\n        \tlocation &#x2F; &#123;\n            \troot   html;\n            \tindex  index.html index.htm;\n       \t\t&#125;\n            #http-flv的相关配置\n        \tlocation &#x2F;live&#123;\n                flv_live on; #打开HTTP播放FLV直播流功能\n                chunked_transfer_encoding  on;\n                add_header &#39;Access-Control-Allow-Origin&#39; &#39;*&#39;;\n                add_header &#39;Access-Control-Allow-Credentials&#39; &#39;true&#39;;\n        \t&#125;\n        \tlocation &#x2F;hls&#123;\n                types &#123;\n                \tapplication&#x2F;vnd.apple.mpegurl m3u8;\n\t\t\tvideo&#x2F;mp2t ts;\n                 &#125;\n                 root ~&#x2F;nginx-1.22.1&#x2F;html&#x2F;hls;\n                 add_header &#39;Cache-Control&#39; &#39;no-cache&#39;;\n        \t&#125;\n         \tlocation &#x2F;dash &#123;\n            \troot ~&#x2F;nginx-1.22.1&#x2F;html&#x2F;dash;\n            \tadd_header &#39;Cache-Control&#39; &#39;no-cache&#39;;\n        \t&#125;\n \n         \tlocation &#x2F;stat &#123;\n            \t#configuration of push &amp; pull status\n              \trtmp_stat all;\n              \trtmp_stat_stylesheet stat.xsl;\n         \t&#125;\n        \tlocation &#x2F;stat.xsl &#123;\n          \t\troot ~&#x2F;nginx-1.22.1&#x2F;html;\n        \t&#125;\n \n         \tlocation &#x2F;control &#123;\n            \trtmp_control all; #configuration of control module of rtmp\n\t\t\t&#125;\n \n        \terror_page   500 502 503 504  &#x2F;50x.html;\n        \tlocation &#x3D; &#x2F;50x.html &#123;\n            \troot   html;\n        \t&#125;\n    \t&#125;\n \n&#125;\n\nrtmp_auto_push on;\nrtmp_auto_push_reconnect 1s;\nrtmp_socket_dir &#x2F;tmp;\n\n\nrtmp&#123;\n        out_queue 4096;\n        out_cork 8;\n        max_streams 128;\n        timeout 15s;\n        drop_idle_publisher 15s;\n        log_interval 5s;\n        log_size 1m;\n        server&#123;\n            #推流端口\n        \tlisten 1935;\n            #推流应用名称\n         \tapplication myapp&#123;\n                 live on;\n\t \t record off;\n                 gop_cache on;\n          \t&#125;\n         \tapplication hls&#123;\n          \t\tlive on;\n          \t\thls on;\n          \t\thls_path ~&#x2F;nginx-1.22.1&#x2F;html&#x2F;hls;\n          \t\thls_fragment 1s;\n                        hls_playlist_length 3s;\n        \t&#125;\n         \tapplication dash&#123;\n           \t\tlive on;\n           \t\tdash on;\n           \t\tdash_path ~&#x2F;nginx-1.22.1&#x2F;html&#x2F;dash;\n         \t&#125;\n \n        &#125;\n&#125;\n\n</code></pre>\n<p>文件中有五处路径为<del>&#x2F;nginx-1.22.1，在实际使用时要换成具体的目录，例如用户为user，那么这里就要把</del>换成用户主目录&#x2F;home&#x2F;user<br>该文件要放到~&#x2F;nginx-1.22.1&#x2F;conf文件夹下</p>\n<h2 id=\"5-启动nginx\"><a href=\"#5-启动nginx\" class=\"headerlink\" title=\"5.启动nginx\"></a>5.启动nginx</h2><pre class=\"language-none\"><code class=\"language-none\">cd ~&#x2F;nginx-1.22.1\nsudo nginx -c conf&#x2F;nginx.conf\nsudo nginx -s reload</code></pre>\n<h2 id=\"6-安装ffmpeg\"><a href=\"#6-安装ffmpeg\" class=\"headerlink\" title=\"6.安装ffmpeg\"></a>6.安装ffmpeg</h2><pre class=\"language-none\"><code class=\"language-none\">sudo apt-get install ffmpeg</code></pre>\n<h2 id=\"7-测试推流\"><a href=\"#7-测试推流\" class=\"headerlink\" title=\"7.测试推流\"></a>7.测试推流</h2><pre class=\"language-none\"><code class=\"language-none\">ffmpeg -re -i rtsp:&#x2F;&#x2F;wowzaec2demo.streamlock.net&#x2F;vod&#x2F;mp4:BigBuckBunny_115k.mp4 -vcodec copy -acodec copy -f flv &quot;rtmp:&#x2F;&#x2F;127.0.0.1:1935&#x2F;myapp&#x2F;test&quot;</code></pre>\n\n\n\n<h1 id=\"Docker\"><a href=\"#Docker\" class=\"headerlink\" title=\"Docker\"></a>Docker</h1><h2 id=\"Docker安装\"><a href=\"#Docker安装\" class=\"headerlink\" title=\"Docker安装\"></a>Docker安装</h2><pre class=\"language-none\"><code class=\"language-none\">sudo apt-get install curl\ncurl -sSL https:&#x2F;&#x2F;get.daocloud.io&#x2F;docker | sh</code></pre>\n\n<h2 id=\"拉取镜像源\"><a href=\"#拉取镜像源\" class=\"headerlink\" title=\"拉取镜像源\"></a>拉取镜像源</h2><pre class=\"language-none\"><code class=\"language-none\">sudo docker pull iludfy&#x2F;predict_model</code></pre>\n\n<h2 id=\"Docker创建容器并启动\"><a href=\"#Docker创建容器并启动\" class=\"headerlink\" title=\"Docker创建容器并启动\"></a>Docker创建容器并启动</h2><p>拉取完镜像需要挂载到容器中才能启动，命令是docker run，它的参数如下：</p>\n<pre class=\"language-none\"><code class=\"language-none\">sudo docker run [Options] image\n\n#参数说明\n--name&#x3D;&quot;名字&quot;           指定容器名字\n-d                     后台方式运行\n-it                    使用交互方式运行,进入容器查看内容\n-p                     指定容器的端口\n\t-p ip:主机端口:容器端口  配置主机端口映射到容器端口\n\t-p 主机端口:容器端口（常用）\n\t-p 容器端口\n-P                     随机指定端口\n-e\t\t\t\t\t   环境设置\n-v\t\t\t\t\t   容器数据卷挂载</code></pre>\n\n<p>规定端口为5000，输入下面的命令：</p>\n<pre class=\"language-none\"><code class=\"language-none\">sudo docker run -p 5000:5000 iludfy&#x2F;predict_model</code></pre>\n<p>一个容器就已经被创建好并启动了。</p>\n<h3 id=\"端口被占用解决办法：\"><a href=\"#端口被占用解决办法：\" class=\"headerlink\" title=\"端口被占用解决办法：\"></a>端口被占用解决办法：</h3><p>以ubuntu系统为例：<br>先查到5000端口被哪个进程占用：</p>\n<pre class=\"language-none\"><code class=\"language-none\">sudo netstat -ntlp</code></pre>\n<p>查到进程id后，使用kill命令杀死进程：</p>\n<pre class=\"language-none\"><code class=\"language-none\">sudo kill &#123;pid&#125;</code></pre>\n<p>查看刚刚创建的容器的id：</p>\n<pre class=\"language-none\"><code class=\"language-none\">sudo docker ps -a</code></pre>\n<p>启动</p>\n<pre class=\"language-none\"><code class=\"language-none\">sudo docker start &#123;id&#125;</code></pre>\n\n\n\n\n\n\n\n<h1 id=\"Java\"><a href=\"#Java\" class=\"headerlink\" title=\"Java\"></a>Java</h1><h2 id=\"下载jdk\"><a href=\"#下载jdk\" class=\"headerlink\" title=\"下载jdk\"></a>下载jdk</h2><p>先检验是否安装java:</p>\n<pre class=\"language-none\"><code class=\"language-none\">java -version</code></pre>\n<p>若没有安装java，会得到如下输出：</p>\n<pre class=\"language-none\"><code class=\"language-none\">user@user-NULL:~$ java -version\n\nCommand &#39;java&#39; not found, but can be installed with:\n\nsudo apt install openjdk-11-jre-headless  # version 11.0.18+10-0ubuntu1~20.04.1, or\nsudo apt install default-jre              # version 2:1.11-72\nsudo apt install openjdk-16-jre-headless  # version 16.0.1+9-1~20.04\nsudo apt install openjdk-17-jre-headless  # version 17.0.6+10-0ubuntu1~20.04.1\nsudo apt install openjdk-8-jre-headless   # version 8u362-ga-0ubuntu1~20.04.1\nsudo apt install openjdk-13-jre-headless  # version 13.0.7+5-0ubuntu1~20.04\n</code></pre>\n<p>上面已经自动列出可选的版本了，我们这里选择java8安装：</p>\n<pre class=\"language-none\"><code class=\"language-none\">sudo apt install openjdk-8-jre-headless\nsudo apt install openjdk-8-jdk-headless</code></pre>\n<p>安装好后再检查java安装：</p>\n<pre class=\"language-none\"><code class=\"language-none\">user@user-NULL:~$ java -version\nopenjdk version &quot;1.8.0_362&quot;\nOpenJDK Runtime Environment (build 1.8.0_362-8u362-ga-0ubuntu1~20.04.1-b09)\nOpenJDK 64-Bit Server VM (build 25.362-b09, mixed mode)\n\nuser@user-NULL:~$ javac -version\njavac 1.8.0_362</code></pre>\n\n<h2 id=\"配置java环境变量\"><a href=\"#配置java环境变量\" class=\"headerlink\" title=\"配置java环境变量\"></a>配置java环境变量</h2><p>要配置环境变量，首先需要知道java的安装路径：</p>\n<pre class=\"language-none\"><code class=\"language-none\">sudo update-alternatives --config java</code></pre>\n<p>得到如下输出：</p>\n<pre class=\"language-none\"><code class=\"language-none\">链接组 java (提供 &#x2F;usr&#x2F;bin&#x2F;java)中只有一个候选项：&#x2F;usr&#x2F;lib&#x2F;jvm&#x2F;java-8-openjdk-amd64&#x2F;jre&#x2F;bin&#x2F;java\n无需配置。</code></pre>\n<p>拿到路径后打开环境变量配置文件：</p>\n<pre class=\"language-none\"><code class=\"language-none\">sudo vim &#x2F;etc&#x2F;environment</code></pre>\n<p>在此文件的末尾，添加java路径：</p>\n<pre class=\"language-none\"><code class=\"language-none\">JAVA_HOME&#x3D;&quot;&#x2F;usr&#x2F;lib&#x2F;jvm&#x2F;java-8-openjdk-amd64&#x2F;jre&#x2F;bin&#x2F;java&quot;</code></pre>\n<p>修改此文件将为系统上的所有用户设置JAVA_HOME路径。</p>\n<p>保存文件并退出编辑器。</p>\n<p>现在重新加载此文件：</p>\n<pre class=\"language-none\"><code class=\"language-none\">source &#x2F;etc&#x2F;environment</code></pre>\n<p>验证是否已设置环境变量：</p>\n<pre class=\"language-none\"><code class=\"language-none\">echo $JAVA_HOME</code></pre>\n<p>输出路径：</p>\n<pre class=\"language-none\"><code class=\"language-none\">&#x2F;usr&#x2F;lib&#x2F;jvm&#x2F;java-8-openjdk-amd64&#x2F;jre&#x2F;bin&#x2F;java</code></pre>\n<p>其他用户需要执行命令source &#x2F;etc&#x2F;environment或注销并重新登录才能应用此设置。</p>\n"},{"title":"'docker基本使用'","date":"2023-08-15T01:38:25.000Z","_content":"# docker基本使用\n## docker镜像\n","source":"_posts/docker基本使用.md","raw":"---\ntitle: '''docker基本使用'''\ndate: 2023-08-15 09:38:25\ntags: docker\ncategories: docker\n---\n# docker基本使用\n## docker镜像\n","slug":"docker基本使用","published":1,"updated":"2024-04-09T10:59:25.103Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clusa3wnl00092s7e5ay9aoe0","content":"<h1 id=\"docker基本使用\"><a href=\"#docker基本使用\" class=\"headerlink\" title=\"docker基本使用\"></a>docker基本使用</h1><h2 id=\"docker镜像\"><a href=\"#docker镜像\" class=\"headerlink\" title=\"docker镜像\"></a>docker镜像</h2>","site":{"data":{}},"excerpt":"","more":"<h1 id=\"docker基本使用\"><a href=\"#docker基本使用\" class=\"headerlink\" title=\"docker基本使用\"></a>docker基本使用</h1><h2 id=\"docker镜像\"><a href=\"#docker镜像\" class=\"headerlink\" title=\"docker镜像\"></a>docker镜像</h2>"},{"title":"matlab编译dll文件","date":"2023-03-14T05:18:39.000Z","_content":"# matlab编译dll文件\n1.命令行窗口输入：```deploytool```，会出现如下弹窗：\n![img](./deploytool.png)\n\n\n选择第三个，出现下面的窗口，按图示操作：\n\n![img](./deploytool2.png)\n\n打包好后会出现三个文件夹：\n\n![img](./deploytool3.png)\n\n1. for_redistribution文件夹下存放一个exe文件，它用来安装使用dll库所需要的matlab环境，一般在没有matlab的机器上，可以使用该文件快捷安装所需环境；\n2. for_redistribution_files_only文件夹下就是编译生成的库文件、头文件和dll文件了","source":"_posts/matlab编译dll文件.md","raw":"---\ntitle: matlab编译dll文件\ndate: 2023-03-14 13:18:39\ntags: matlab\n---\n# matlab编译dll文件\n1.命令行窗口输入：```deploytool```，会出现如下弹窗：\n![img](./deploytool.png)\n\n\n选择第三个，出现下面的窗口，按图示操作：\n\n![img](./deploytool2.png)\n\n打包好后会出现三个文件夹：\n\n![img](./deploytool3.png)\n\n1. for_redistribution文件夹下存放一个exe文件，它用来安装使用dll库所需要的matlab环境，一般在没有matlab的机器上，可以使用该文件快捷安装所需环境；\n2. for_redistribution_files_only文件夹下就是编译生成的库文件、头文件和dll文件了","slug":"matlab编译dll文件","published":1,"updated":"2024-04-09T10:59:25.103Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clusa3wnm000c2s7e70n135fp","content":"<h1 id=\"matlab编译dll文件\"><a href=\"#matlab编译dll文件\" class=\"headerlink\" title=\"matlab编译dll文件\"></a>matlab编译dll文件</h1><p>1.命令行窗口输入：<code>deploytool</code>，会出现如下弹窗：<br><img src=\"/2023/03/14/matlab-bian-yi-dll-wen-jian/deploytool.png\" alt=\"img\"></p>\n<p>选择第三个，出现下面的窗口，按图示操作：</p>\n<p><img src=\"/2023/03/14/matlab-bian-yi-dll-wen-jian/deploytool2.png\" alt=\"img\"></p>\n<p>打包好后会出现三个文件夹：</p>\n<p><img src=\"/2023/03/14/matlab-bian-yi-dll-wen-jian/deploytool3.png\" alt=\"img\"></p>\n<ol>\n<li>for_redistribution文件夹下存放一个exe文件，它用来安装使用dll库所需要的matlab环境，一般在没有matlab的机器上，可以使用该文件快捷安装所需环境；</li>\n<li>for_redistribution_files_only文件夹下就是编译生成的库文件、头文件和dll文件了</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"matlab编译dll文件\"><a href=\"#matlab编译dll文件\" class=\"headerlink\" title=\"matlab编译dll文件\"></a>matlab编译dll文件</h1><p>1.命令行窗口输入：<code>deploytool</code>，会出现如下弹窗：<br><img src=\"/2023/03/14/matlab-bian-yi-dll-wen-jian/deploytool.png\" alt=\"img\"></p>\n<p>选择第三个，出现下面的窗口，按图示操作：</p>\n<p><img src=\"/2023/03/14/matlab-bian-yi-dll-wen-jian/deploytool2.png\" alt=\"img\"></p>\n<p>打包好后会出现三个文件夹：</p>\n<p><img src=\"/2023/03/14/matlab-bian-yi-dll-wen-jian/deploytool3.png\" alt=\"img\"></p>\n<ol>\n<li>for_redistribution文件夹下存放一个exe文件，它用来安装使用dll库所需要的matlab环境，一般在没有matlab的机器上，可以使用该文件快捷安装所需环境；</li>\n<li>for_redistribution_files_only文件夹下就是编译生成的库文件、头文件和dll文件了</li>\n</ol>\n"},{"title":"thymeleaf使用","date":"2023-01-20T09:33:29.000Z","_content":"# thymeleaf基本使用\n\n## 一、引入依赖\n\nSpring Boot项目中引入依赖：\n\n```XML\n<dependency>\n      <groupId>org.springframework.boot</groupId>\n      <artifactId>spring-boot-starter-thymeleaf</artifactId>\n</dependency>\n```\n\n## 二、配置文件\n\n在aplication.yml文件中写入如下配置：\n\n```yml\nspring:\n   thymeleaf:\n     mode: LEGACYHTML5\n     encoding: UTF-8    # 编码格式\n     prefix: classpath:/template/  # 静态页面所在的路径，一般在resources文件加下创建\n     suffix: .html   # 页面后缀\n     cache: false   # 关闭缓存，开发时可以看到实时页面\n```\n## 三、编写控制层\n\n控制层在返回页面的同时将键值对传给前端，给前端传值有四种方法：\n\n通过Model对象：\n```java\n@Controller\npublic class ViewTestController {\n    @GetMapping(\"/hello\")\n    public String hello(Model model){\n        model.addAttribute(\"msg\",\"这世上没有纯粹的自由，风也会有吹到头的时候\");\n        model.addAttribute(\"link\",\"http://www.baidu.com\");\n        return \"success\";\n    }\n}\n```\n\n\n通过ModelAndView对象：\n```java\n@Controller\npublic class ViewTestController {\n    @GetMapping(\"/hello\")\n    public String hello(ModelAndView model){\n        model.addAttribute(\"msg\",\"这世上没有纯粹的自由，风也会有吹到头的时候\");\n        model.addAttribute(\"link\",\"http://www.baidu.com\");\n        return \"success\";\n    }\n}\n```\n\n通过HttpServletRequest对象：\n```java\n@Controller\npublic class ViewTestController {\n    @GetMapping(\"/hello\")\n    public String hello(HttpServletRequest request){\n        request.setAttribute(\"msg\",\"这世上没有纯粹的自由，风也会有吹到头的时候\");\n        request.setAttribute(\"link\",\"http://www.baidu.com\");\n        return \"success\";\n    }\n}\n```\n\n通过Map对象：\n```java\n@Controller\npublic class ViewTestController {\n    @GetMapping(\"/hello\")\n    public String hello(Map<String, String> map){\n        map.put(\"msg\",\"这世上没有纯粹的自由，风也会有吹到头的时候\");\n        map.put(\"link\",\"http://www.baidu.com\");\n        return \"success\";\n    }\n}\n```\n## 四、基础语法\n\n### 编写html\n建议在html标签上写入：\n```HTML\n<html xmlns:th=\"http://www.thymeleaf.org\">\n```\n\n不加不影响thymeleaf正常使用，但是加入以后开发过程中th:会自动弹出提示\n\n`/templates/success.html`：\n```HTML\n<!DOCTYPE html>\n<html lang=\"en\" xmlns:th=\"http://www.thymeleaf.org\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Title</title>\n</head>\n<body>\n<h1 th:text=\"${msg}\">nice</h1>\n<h2>\n    <a href=\"www.baidu.com\" th:href=\"${link}\">去百度</a>  <br/>\n    <a href=\"www.google.com\" th:href=\"@{/link}\">去百度</a>\n</h2>\n</body>\n</html>\n```\n\n### 基本语法\n\n#### 表达式\n\n| 表达式名字 | 语法   |                用途                |\n| ---------- | ------ | :--------------------------------: |\n| 变量取值   | ${...} |  获取请求域、session域、对象等值   |\n| 选择变量   | *{...} |          获取上下文对象值          |\n| 消息       | #{...} |           获取国际化等值           |\n| 链接       | @{...} |              生成链接              |\n| 片段表达式 | ~{...} | jsp:include 作用，引入公共页面片段 |\n\n##### 获取变量值${...}\n```HTML\n    <h1 th:text=\"${msg}\">nice</h1>\n```\n上面代码默认从request作用域取值，若未取到则为null\n若从session域和application域取值，分别加上前缀即可：\n```HTML\n    <h1 th:text=\"${session.msg}\">nice</h1> <!--从session域取值  -->\n```\n```HTML\n    <h1 th:text=\"${application.msg}\">nice</h1> <!-- 从application域取值 -->\n```\n##### 选择变量表达式*{...}\n通常结合th:object使用。某一标签使用th:object标签声明一个变量后，在其子标签内都可以通过选择变量表达式*{...}来取值，示例如下：\n```HTML\n<div th:object=\"${session.user}\">\n    <p>Name: <span th:text=\"*{firstName}\">Sebastian</span>.</p>\n    <p>Surname: <span th:text=\"*{lastName}\">Pepper</span>.</p> \n    <p>Nationality: <span th:text={nationality}\">Saturn</span>.</p>\n</div> \n```\n上述代码等价于：\n```HTML\n<div>\n    <p>Name: <span th:text=\"${session.user.firstName}\">Sebastian</span>.</p> \n    <p>Surname: <span th:text=\"${session.user.lastName}\">Pepper</span>.</p> \n    <p>Nationality: <span th:text=\"${session.user.nationality}\">Saturn</span>.</p>\n</div>\n```\n若父标签未使用th:object声明任何变量，那么*{...}和${...}完全等价。\n\n##### 链接表达式@{...}\n一般用于页面跳转和静态资源的引用，可搭配th:src,th:href,th:action等标签使用。\n```HTML\n<!-- 静态资源引用 -->\n<link rel=\"icon\" th:href=\"@{/images/favicon.ico}\" type=\"image/ico\" />\n\n<script th:src=\"@{/vendors/jquery/dist/jquery.min.js}\"></script>\n\n<!-- 页面跳转 -->\n<a th:href=\"@{/index}\">首页</a>\n```\n若希望页面跳转时携带参数，可使用@{/URL(K1=V1,K2=V2...)}的格式\n```HTML\n<!-- 通过链接跳转为GET请求 -->\n<a th:href=\"@{/index(id=${id},pageNum=1)}\">首页</a> \n```\n\n链接表达式中写的是在项目中的相对路径，thymeleaf会自动把项目根路径补全在表达式的前面。例如，你的项目路径是http://localhost:8080/myapp,那么th:href=\"@{/index}\"会被解析成href=\"http://localhost:8080/myapp/index\"。\n\n推荐使用链接表达式@{...}来进行静态资源的引用、页面跳转和表单提交，这样就不需要关心项目的根路径，只需要写入相对路径即可，尤其在rest风格中，必须使用。\n\n##### 片段表达式~{...}\n通常用于模板布局，搭配th:fragement,th:include,th:insert,th:remove等标签使用。\n详细教程可以参考博客<https://blog.csdn.net/wangmx1993328/article/details/84747497>\n\n\n#### 字面量\n\n- 文本值: **'one text'** **,** **'Another one!'** **,…**\n- 数字: **0** **,** **34** **,** **3.0** **,** **12.3** **,…**\n- 布尔值: **true** **,** **false**\n- 空值: **null**\n- 变量： one，two，.... 变量不能有空格\n\n#### 文本操作\n\n- 字符串拼接: **+**\n```HTML\n<a th:href=\"@{${baseURL}+'/add'}\">新增</a>\n```\n- 变量替换: **|The name is ${name}|** \n```HTML\n<!-- 二者等价（只能包含表达式变量，而不能有条件判断等！) -->\n<h1 th:text=\"'后端发来的消息：'+${msg}\">nice</h1>\n<h1 th:text=\"|后端发来的消息：${msg}|\">nice</h1>\n```\n\n#### 数学运算\n\n- 运算符: + , - , * , / , %\n```HTML\n<th scope=\"row\" th:text=\"${objStat.index}+*{startRow}\">1</th>\n```\n\n#### 布尔运算\n\n- 运算符:  **and** **,** **or**\n- 一元运算: **!** **,** **not** \n\n#### 比较运算\n\n- 比较: **>** **,** **<** **,** **>=** **,** **<=** **(** **gt** **,** **lt** **,** **ge** **,** **le** **)**\n- 等式: **==** **,** **!=** **(** **eq** **,** **ne** **)** \n```HTML\n<option value=\"10\" th:selected=\"*{pageSize} eq '10'\">10</option>\n```\n\n#### 条件运算\n\n- If-then: **(if) ? (then)**\n- If-then-else: **(if) ? (then) : (else)**\n- Default: (value) **?: (defaultvalue)** \n```HTML\n<div class=\"row\" th:with=\"feature=${feature} == null or ${feature} == '' ? '':'/'+${feature}\">\n```\n\n#### 特殊操作\n\n- 无操作： _\n\n### 设置属性值-th:attr\n\n- 设置单个值\n\n```HTML\n<form action=\"subscribe.html\" th:attr=\"action=@{/subscribe}\">\n  <fieldset>\n    <input type=\"text\" name=\"email\" />\n    <input type=\"submit\" value=\"Subscribe!\" th:attr=\"value=#{subscribe.submit}\"/>\n  </fieldset>\n</form>\n```\n\n- 设置多个值\n\n```HTML\n<img src=\"../../images/gtvglogo.png\"  \n     th:attr=\"src=@{/images/gtvglogo.png},title=#{logo},alt=#{logo}\" />\n```\n\n[官方文档 - 5 Setting Attribute Values](https://www.thymeleaf.org/doc/tutorials/3.0/usingthymeleaf.html#setting-attribute-values)\n\n### 迭代\n* 基本语法：\n```HTML\n<div th:each=\"变量名 : 集合\"> \n\t<p th:text=\"${变量名}\"></p> \n</div>\n```\n\n```HTML\n<tr th:each=\"prod : ${prods}\">\n    <td th:text=\"${prod.name}\">Onions</td>\n    <td th:text=\"${prod.price}\">2.41</td>\n    <td th:text=\"${prod.inStock}? #{true} : #{false}\">yes</td>\n</tr>\n```\n* 迭代状态变量的使用：\n```HTML\n<div th:each = \"变量名，状态变量名 : 集合\" > \n\t<p th:text = \"${状态变量.属性}\" ></p> \n</div>\n```\n\n\n\n\n```HTML\n<tr th:each=\"prod,iterStat : ${prods}\" th:class=\"${iterStat.odd}? 'odd'\">\n    <td th:text=\"${prod.name}\">Onions</td>\n    <td th:text=\"${prod.price}\">2.41</td>\n    <td th:text=\"${prod.inStock}? #{true} : #{false}\">yes</td>\n</tr>\n```\n\n>注：如果缺省状态变量名，则迭代器会 默认以变量名开头的状态变量 xxxStat\n\n>状态变量的属性\nindex：当前迭代对象的序号，从0开始，这是索引属性\ncount：当前迭代对象的序号，从1开始，这个是统计属性\nsize：迭代变量元素的总量，这是被迭代对象的大小属性\neven/odd：布尔值，当前循环是否是偶数/奇数（从0开始计算）\nfirst：布尔值，当前循环是否是第一个\nlast：布尔值，当前循环是否是最后一个\ncurrent：当前迭代变量\n\n### 条件运算\n\n```HTML\n<a href=\"comments.html\"\n\tth:href=\"@{/product/comments(prodId=${prod.id})}\"\n\tth:if=\"${not #lists.isEmpty(prod.comments)}\">view</a>\n```\nth:if标签：当条件成立时，该标签及其子标签才会存在\nth:unless标签：与th:if标签相反，条件不成立时存在\n\n```HTML\n<div th:switch=\"${user.role}\">\n      <p th:case=\"'admin'\">User is an administrator</p>\n      <p th:case=\"#{roles.manager}\">User is a manager</p>\n      <p th:case=\"*\">User is some other thing</p>\n</div>\n```\n\n### 属性优先级\n\n| Order | Feature                         | Attributes                                 |\n| :---- | :------------------------------ | :----------------------------------------- |\n| 1     | Fragment inclusion              | `th:insert` `th:replace`                   |\n| 2     | Fragment iteration              | `th:each`                                  |\n| 3     | Conditional evaluation          | `th:if` `th:unless` `th:switch` `th:case`  |\n| 4     | Local variable definition       | `th:object` `th:with`                      |\n| 5     | General attribute modification  | `th:attr` `th:attrprepend` `th:attrappend` |\n| 6     | Specific attribute modification | `th:value` `th:href` `th:src` `...`        |\n| 7     | Text (tag body modification)    | `th:text` `th:utext`                       |\n| 8     | Fragment specification          | `th:fragment`                              |\n| 9     | Fragment removal                | `th:remove`                                |\n\n[官方文档 - 10 Attribute Precedence](https://www.thymeleaf.org/doc/tutorials/3.0/usingthymeleaf.html#attribute-precedence)\n\n### thymeleaf常用标签\n![thymeleaf常用标签](thymeleaf1.png)\n\n### 在js中使用thymeleaf\n模板引擎除了直接渲染页面之外还可以在js中进行预处理，其中的thymeleaf代码可以先注释起来，静态时默认使用注释后面的默认值：\n```javascript\n<script th:inline=\"javascript\">\n    var msg = /*[[thymeleaf]]*/静态默认值\n</script>\n```","source":"_posts/thymeleaf基本使用.md","raw":"---\ntitle: thymeleaf使用\ndate: 2023-01-20 17:33:29\ntags: thymeleaf\ncategories: thymeleaf\n---\n# thymeleaf基本使用\n\n## 一、引入依赖\n\nSpring Boot项目中引入依赖：\n\n```XML\n<dependency>\n      <groupId>org.springframework.boot</groupId>\n      <artifactId>spring-boot-starter-thymeleaf</artifactId>\n</dependency>\n```\n\n## 二、配置文件\n\n在aplication.yml文件中写入如下配置：\n\n```yml\nspring:\n   thymeleaf:\n     mode: LEGACYHTML5\n     encoding: UTF-8    # 编码格式\n     prefix: classpath:/template/  # 静态页面所在的路径，一般在resources文件加下创建\n     suffix: .html   # 页面后缀\n     cache: false   # 关闭缓存，开发时可以看到实时页面\n```\n## 三、编写控制层\n\n控制层在返回页面的同时将键值对传给前端，给前端传值有四种方法：\n\n通过Model对象：\n```java\n@Controller\npublic class ViewTestController {\n    @GetMapping(\"/hello\")\n    public String hello(Model model){\n        model.addAttribute(\"msg\",\"这世上没有纯粹的自由，风也会有吹到头的时候\");\n        model.addAttribute(\"link\",\"http://www.baidu.com\");\n        return \"success\";\n    }\n}\n```\n\n\n通过ModelAndView对象：\n```java\n@Controller\npublic class ViewTestController {\n    @GetMapping(\"/hello\")\n    public String hello(ModelAndView model){\n        model.addAttribute(\"msg\",\"这世上没有纯粹的自由，风也会有吹到头的时候\");\n        model.addAttribute(\"link\",\"http://www.baidu.com\");\n        return \"success\";\n    }\n}\n```\n\n通过HttpServletRequest对象：\n```java\n@Controller\npublic class ViewTestController {\n    @GetMapping(\"/hello\")\n    public String hello(HttpServletRequest request){\n        request.setAttribute(\"msg\",\"这世上没有纯粹的自由，风也会有吹到头的时候\");\n        request.setAttribute(\"link\",\"http://www.baidu.com\");\n        return \"success\";\n    }\n}\n```\n\n通过Map对象：\n```java\n@Controller\npublic class ViewTestController {\n    @GetMapping(\"/hello\")\n    public String hello(Map<String, String> map){\n        map.put(\"msg\",\"这世上没有纯粹的自由，风也会有吹到头的时候\");\n        map.put(\"link\",\"http://www.baidu.com\");\n        return \"success\";\n    }\n}\n```\n## 四、基础语法\n\n### 编写html\n建议在html标签上写入：\n```HTML\n<html xmlns:th=\"http://www.thymeleaf.org\">\n```\n\n不加不影响thymeleaf正常使用，但是加入以后开发过程中th:会自动弹出提示\n\n`/templates/success.html`：\n```HTML\n<!DOCTYPE html>\n<html lang=\"en\" xmlns:th=\"http://www.thymeleaf.org\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Title</title>\n</head>\n<body>\n<h1 th:text=\"${msg}\">nice</h1>\n<h2>\n    <a href=\"www.baidu.com\" th:href=\"${link}\">去百度</a>  <br/>\n    <a href=\"www.google.com\" th:href=\"@{/link}\">去百度</a>\n</h2>\n</body>\n</html>\n```\n\n### 基本语法\n\n#### 表达式\n\n| 表达式名字 | 语法   |                用途                |\n| ---------- | ------ | :--------------------------------: |\n| 变量取值   | ${...} |  获取请求域、session域、对象等值   |\n| 选择变量   | *{...} |          获取上下文对象值          |\n| 消息       | #{...} |           获取国际化等值           |\n| 链接       | @{...} |              生成链接              |\n| 片段表达式 | ~{...} | jsp:include 作用，引入公共页面片段 |\n\n##### 获取变量值${...}\n```HTML\n    <h1 th:text=\"${msg}\">nice</h1>\n```\n上面代码默认从request作用域取值，若未取到则为null\n若从session域和application域取值，分别加上前缀即可：\n```HTML\n    <h1 th:text=\"${session.msg}\">nice</h1> <!--从session域取值  -->\n```\n```HTML\n    <h1 th:text=\"${application.msg}\">nice</h1> <!-- 从application域取值 -->\n```\n##### 选择变量表达式*{...}\n通常结合th:object使用。某一标签使用th:object标签声明一个变量后，在其子标签内都可以通过选择变量表达式*{...}来取值，示例如下：\n```HTML\n<div th:object=\"${session.user}\">\n    <p>Name: <span th:text=\"*{firstName}\">Sebastian</span>.</p>\n    <p>Surname: <span th:text=\"*{lastName}\">Pepper</span>.</p> \n    <p>Nationality: <span th:text={nationality}\">Saturn</span>.</p>\n</div> \n```\n上述代码等价于：\n```HTML\n<div>\n    <p>Name: <span th:text=\"${session.user.firstName}\">Sebastian</span>.</p> \n    <p>Surname: <span th:text=\"${session.user.lastName}\">Pepper</span>.</p> \n    <p>Nationality: <span th:text=\"${session.user.nationality}\">Saturn</span>.</p>\n</div>\n```\n若父标签未使用th:object声明任何变量，那么*{...}和${...}完全等价。\n\n##### 链接表达式@{...}\n一般用于页面跳转和静态资源的引用，可搭配th:src,th:href,th:action等标签使用。\n```HTML\n<!-- 静态资源引用 -->\n<link rel=\"icon\" th:href=\"@{/images/favicon.ico}\" type=\"image/ico\" />\n\n<script th:src=\"@{/vendors/jquery/dist/jquery.min.js}\"></script>\n\n<!-- 页面跳转 -->\n<a th:href=\"@{/index}\">首页</a>\n```\n若希望页面跳转时携带参数，可使用@{/URL(K1=V1,K2=V2...)}的格式\n```HTML\n<!-- 通过链接跳转为GET请求 -->\n<a th:href=\"@{/index(id=${id},pageNum=1)}\">首页</a> \n```\n\n链接表达式中写的是在项目中的相对路径，thymeleaf会自动把项目根路径补全在表达式的前面。例如，你的项目路径是http://localhost:8080/myapp,那么th:href=\"@{/index}\"会被解析成href=\"http://localhost:8080/myapp/index\"。\n\n推荐使用链接表达式@{...}来进行静态资源的引用、页面跳转和表单提交，这样就不需要关心项目的根路径，只需要写入相对路径即可，尤其在rest风格中，必须使用。\n\n##### 片段表达式~{...}\n通常用于模板布局，搭配th:fragement,th:include,th:insert,th:remove等标签使用。\n详细教程可以参考博客<https://blog.csdn.net/wangmx1993328/article/details/84747497>\n\n\n#### 字面量\n\n- 文本值: **'one text'** **,** **'Another one!'** **,…**\n- 数字: **0** **,** **34** **,** **3.0** **,** **12.3** **,…**\n- 布尔值: **true** **,** **false**\n- 空值: **null**\n- 变量： one，two，.... 变量不能有空格\n\n#### 文本操作\n\n- 字符串拼接: **+**\n```HTML\n<a th:href=\"@{${baseURL}+'/add'}\">新增</a>\n```\n- 变量替换: **|The name is ${name}|** \n```HTML\n<!-- 二者等价（只能包含表达式变量，而不能有条件判断等！) -->\n<h1 th:text=\"'后端发来的消息：'+${msg}\">nice</h1>\n<h1 th:text=\"|后端发来的消息：${msg}|\">nice</h1>\n```\n\n#### 数学运算\n\n- 运算符: + , - , * , / , %\n```HTML\n<th scope=\"row\" th:text=\"${objStat.index}+*{startRow}\">1</th>\n```\n\n#### 布尔运算\n\n- 运算符:  **and** **,** **or**\n- 一元运算: **!** **,** **not** \n\n#### 比较运算\n\n- 比较: **>** **,** **<** **,** **>=** **,** **<=** **(** **gt** **,** **lt** **,** **ge** **,** **le** **)**\n- 等式: **==** **,** **!=** **(** **eq** **,** **ne** **)** \n```HTML\n<option value=\"10\" th:selected=\"*{pageSize} eq '10'\">10</option>\n```\n\n#### 条件运算\n\n- If-then: **(if) ? (then)**\n- If-then-else: **(if) ? (then) : (else)**\n- Default: (value) **?: (defaultvalue)** \n```HTML\n<div class=\"row\" th:with=\"feature=${feature} == null or ${feature} == '' ? '':'/'+${feature}\">\n```\n\n#### 特殊操作\n\n- 无操作： _\n\n### 设置属性值-th:attr\n\n- 设置单个值\n\n```HTML\n<form action=\"subscribe.html\" th:attr=\"action=@{/subscribe}\">\n  <fieldset>\n    <input type=\"text\" name=\"email\" />\n    <input type=\"submit\" value=\"Subscribe!\" th:attr=\"value=#{subscribe.submit}\"/>\n  </fieldset>\n</form>\n```\n\n- 设置多个值\n\n```HTML\n<img src=\"../../images/gtvglogo.png\"  \n     th:attr=\"src=@{/images/gtvglogo.png},title=#{logo},alt=#{logo}\" />\n```\n\n[官方文档 - 5 Setting Attribute Values](https://www.thymeleaf.org/doc/tutorials/3.0/usingthymeleaf.html#setting-attribute-values)\n\n### 迭代\n* 基本语法：\n```HTML\n<div th:each=\"变量名 : 集合\"> \n\t<p th:text=\"${变量名}\"></p> \n</div>\n```\n\n```HTML\n<tr th:each=\"prod : ${prods}\">\n    <td th:text=\"${prod.name}\">Onions</td>\n    <td th:text=\"${prod.price}\">2.41</td>\n    <td th:text=\"${prod.inStock}? #{true} : #{false}\">yes</td>\n</tr>\n```\n* 迭代状态变量的使用：\n```HTML\n<div th:each = \"变量名，状态变量名 : 集合\" > \n\t<p th:text = \"${状态变量.属性}\" ></p> \n</div>\n```\n\n\n\n\n```HTML\n<tr th:each=\"prod,iterStat : ${prods}\" th:class=\"${iterStat.odd}? 'odd'\">\n    <td th:text=\"${prod.name}\">Onions</td>\n    <td th:text=\"${prod.price}\">2.41</td>\n    <td th:text=\"${prod.inStock}? #{true} : #{false}\">yes</td>\n</tr>\n```\n\n>注：如果缺省状态变量名，则迭代器会 默认以变量名开头的状态变量 xxxStat\n\n>状态变量的属性\nindex：当前迭代对象的序号，从0开始，这是索引属性\ncount：当前迭代对象的序号，从1开始，这个是统计属性\nsize：迭代变量元素的总量，这是被迭代对象的大小属性\neven/odd：布尔值，当前循环是否是偶数/奇数（从0开始计算）\nfirst：布尔值，当前循环是否是第一个\nlast：布尔值，当前循环是否是最后一个\ncurrent：当前迭代变量\n\n### 条件运算\n\n```HTML\n<a href=\"comments.html\"\n\tth:href=\"@{/product/comments(prodId=${prod.id})}\"\n\tth:if=\"${not #lists.isEmpty(prod.comments)}\">view</a>\n```\nth:if标签：当条件成立时，该标签及其子标签才会存在\nth:unless标签：与th:if标签相反，条件不成立时存在\n\n```HTML\n<div th:switch=\"${user.role}\">\n      <p th:case=\"'admin'\">User is an administrator</p>\n      <p th:case=\"#{roles.manager}\">User is a manager</p>\n      <p th:case=\"*\">User is some other thing</p>\n</div>\n```\n\n### 属性优先级\n\n| Order | Feature                         | Attributes                                 |\n| :---- | :------------------------------ | :----------------------------------------- |\n| 1     | Fragment inclusion              | `th:insert` `th:replace`                   |\n| 2     | Fragment iteration              | `th:each`                                  |\n| 3     | Conditional evaluation          | `th:if` `th:unless` `th:switch` `th:case`  |\n| 4     | Local variable definition       | `th:object` `th:with`                      |\n| 5     | General attribute modification  | `th:attr` `th:attrprepend` `th:attrappend` |\n| 6     | Specific attribute modification | `th:value` `th:href` `th:src` `...`        |\n| 7     | Text (tag body modification)    | `th:text` `th:utext`                       |\n| 8     | Fragment specification          | `th:fragment`                              |\n| 9     | Fragment removal                | `th:remove`                                |\n\n[官方文档 - 10 Attribute Precedence](https://www.thymeleaf.org/doc/tutorials/3.0/usingthymeleaf.html#attribute-precedence)\n\n### thymeleaf常用标签\n![thymeleaf常用标签](thymeleaf1.png)\n\n### 在js中使用thymeleaf\n模板引擎除了直接渲染页面之外还可以在js中进行预处理，其中的thymeleaf代码可以先注释起来，静态时默认使用注释后面的默认值：\n```javascript\n<script th:inline=\"javascript\">\n    var msg = /*[[thymeleaf]]*/静态默认值\n</script>\n```","slug":"thymeleaf基本使用","published":1,"updated":"2024-04-09T10:59:25.120Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clusa3wnn000d2s7eh2zh68tl","content":"<h1 id=\"thymeleaf基本使用\"><a href=\"#thymeleaf基本使用\" class=\"headerlink\" title=\"thymeleaf基本使用\"></a>thymeleaf基本使用</h1><h2 id=\"一、引入依赖\"><a href=\"#一、引入依赖\" class=\"headerlink\" title=\"一、引入依赖\"></a>一、引入依赖</h2><p>Spring Boot项目中引入依赖：</p>\n<pre class=\"language-XML\" data-language=\"XML\"><code class=\"language-XML\">&lt;dependency&gt;\n      &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;\n      &lt;artifactId&gt;spring-boot-starter-thymeleaf&lt;&#x2F;artifactId&gt;\n&lt;&#x2F;dependency&gt;</code></pre>\n\n<h2 id=\"二、配置文件\"><a href=\"#二、配置文件\" class=\"headerlink\" title=\"二、配置文件\"></a>二、配置文件</h2><p>在aplication.yml文件中写入如下配置：</p>\n<pre class=\"language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">spring</span><span class=\"token punctuation\">:</span>\n   <span class=\"token key atrule\">thymeleaf</span><span class=\"token punctuation\">:</span>\n     <span class=\"token key atrule\">mode</span><span class=\"token punctuation\">:</span> LEGACYHTML5\n     <span class=\"token key atrule\">encoding</span><span class=\"token punctuation\">:</span> UTF<span class=\"token punctuation\">-</span><span class=\"token number\">8</span>    <span class=\"token comment\"># 编码格式</span>\n     <span class=\"token key atrule\">prefix</span><span class=\"token punctuation\">:</span> classpath<span class=\"token punctuation\">:</span>/template/  <span class=\"token comment\"># 静态页面所在的路径，一般在resources文件加下创建</span>\n     <span class=\"token key atrule\">suffix</span><span class=\"token punctuation\">:</span> .html   <span class=\"token comment\"># 页面后缀</span>\n     <span class=\"token key atrule\">cache</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">false</span>   <span class=\"token comment\"># 关闭缓存，开发时可以看到实时页面</span></code></pre>\n<h2 id=\"三、编写控制层\"><a href=\"#三、编写控制层\" class=\"headerlink\" title=\"三、编写控制层\"></a>三、编写控制层</h2><p>控制层在返回页面的同时将键值对传给前端，给前端传值有四种方法：</p>\n<p>通过Model对象：</p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Controller</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ViewTestController</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token annotation punctuation\">@GetMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/hello\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">hello</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Model</span> model<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        model<span class=\"token punctuation\">.</span><span class=\"token function\">addAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"msg\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"这世上没有纯粹的自由，风也会有吹到头的时候\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        model<span class=\"token punctuation\">.</span><span class=\"token function\">addAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"link\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"http://www.baidu.com\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token string\">\"success\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n\n\n<p>通过ModelAndView对象：</p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Controller</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ViewTestController</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token annotation punctuation\">@GetMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/hello\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">hello</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ModelAndView</span> model<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        model<span class=\"token punctuation\">.</span><span class=\"token function\">addAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"msg\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"这世上没有纯粹的自由，风也会有吹到头的时候\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        model<span class=\"token punctuation\">.</span><span class=\"token function\">addAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"link\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"http://www.baidu.com\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token string\">\"success\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n\n<p>通过HttpServletRequest对象：</p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Controller</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ViewTestController</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token annotation punctuation\">@GetMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/hello\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">hello</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">HttpServletRequest</span> request<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        request<span class=\"token punctuation\">.</span><span class=\"token function\">setAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"msg\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"这世上没有纯粹的自由，风也会有吹到头的时候\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        request<span class=\"token punctuation\">.</span><span class=\"token function\">setAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"link\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"http://www.baidu.com\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token string\">\"success\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n\n<p>通过Map对象：</p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Controller</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ViewTestController</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token annotation punctuation\">@GetMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/hello\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">hello</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> map<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        map<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"msg\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"这世上没有纯粹的自由，风也会有吹到头的时候\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        map<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"link\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"http://www.baidu.com\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token string\">\"success\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n<h2 id=\"四、基础语法\"><a href=\"#四、基础语法\" class=\"headerlink\" title=\"四、基础语法\"></a>四、基础语法</h2><h3 id=\"编写html\"><a href=\"#编写html\" class=\"headerlink\" title=\"编写html\"></a>编写html</h3><p>建议在html标签上写入：</p>\n<pre class=\"language-HTML\" data-language=\"HTML\"><code class=\"language-HTML\">&lt;html xmlns:th&#x3D;&quot;http:&#x2F;&#x2F;www.thymeleaf.org&quot;&gt;</code></pre>\n\n<p>不加不影响thymeleaf正常使用，但是加入以后开发过程中th:会自动弹出提示</p>\n<p><code>/templates/success.html</code>：</p>\n<pre class=\"language-HTML\" data-language=\"HTML\"><code class=\"language-HTML\">&lt;!DOCTYPE html&gt;\n&lt;html lang&#x3D;&quot;en&quot; xmlns:th&#x3D;&quot;http:&#x2F;&#x2F;www.thymeleaf.org&quot;&gt;\n&lt;head&gt;\n    &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;\n    &lt;title&gt;Title&lt;&#x2F;title&gt;\n&lt;&#x2F;head&gt;\n&lt;body&gt;\n&lt;h1 th:text&#x3D;&quot;$&#123;msg&#125;&quot;&gt;nice&lt;&#x2F;h1&gt;\n&lt;h2&gt;\n    &lt;a href&#x3D;&quot;www.baidu.com&quot; th:href&#x3D;&quot;$&#123;link&#125;&quot;&gt;去百度&lt;&#x2F;a&gt;  &lt;br&#x2F;&gt;\n    &lt;a href&#x3D;&quot;www.google.com&quot; th:href&#x3D;&quot;@&#123;&#x2F;link&#125;&quot;&gt;去百度&lt;&#x2F;a&gt;\n&lt;&#x2F;h2&gt;\n&lt;&#x2F;body&gt;\n&lt;&#x2F;html&gt;</code></pre>\n\n<h3 id=\"基本语法\"><a href=\"#基本语法\" class=\"headerlink\" title=\"基本语法\"></a>基本语法</h3><h4 id=\"表达式\"><a href=\"#表达式\" class=\"headerlink\" title=\"表达式\"></a>表达式</h4><table>\n<thead>\n<tr>\n<th>表达式名字</th>\n<th>语法</th>\n<th align=\"center\">用途</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>变量取值</td>\n<td>${…}</td>\n<td align=\"center\">获取请求域、session域、对象等值</td>\n</tr>\n<tr>\n<td>选择变量</td>\n<td>*{…}</td>\n<td align=\"center\">获取上下文对象值</td>\n</tr>\n<tr>\n<td>消息</td>\n<td>#{…}</td>\n<td align=\"center\">获取国际化等值</td>\n</tr>\n<tr>\n<td>链接</td>\n<td>@{…}</td>\n<td align=\"center\">生成链接</td>\n</tr>\n<tr>\n<td>片段表达式</td>\n<td>~{…}</td>\n<td align=\"center\">jsp:include 作用，引入公共页面片段</td>\n</tr>\n</tbody></table>\n<h5 id=\"获取变量值-…\"><a href=\"#获取变量值-…\" class=\"headerlink\" title=\"获取变量值${…}\"></a>获取变量值${…}</h5><pre class=\"language-HTML\" data-language=\"HTML\"><code class=\"language-HTML\">&lt;h1 th:text&#x3D;&quot;$&#123;msg&#125;&quot;&gt;nice&lt;&#x2F;h1&gt;</code></pre>\n<p>上面代码默认从request作用域取值，若未取到则为null<br>若从session域和application域取值，分别加上前缀即可：</p>\n<pre class=\"language-HTML\" data-language=\"HTML\"><code class=\"language-HTML\">&lt;h1 th:text&#x3D;&quot;$&#123;session.msg&#125;&quot;&gt;nice&lt;&#x2F;h1&gt; &lt;!--从session域取值  --&gt;</code></pre>\n<pre class=\"language-HTML\" data-language=\"HTML\"><code class=\"language-HTML\">&lt;h1 th:text&#x3D;&quot;$&#123;application.msg&#125;&quot;&gt;nice&lt;&#x2F;h1&gt; &lt;!-- 从application域取值 --&gt;</code></pre>\n<h5 id=\"选择变量表达式-…\"><a href=\"#选择变量表达式-…\" class=\"headerlink\" title=\"选择变量表达式*{…}\"></a>选择变量表达式*{…}</h5><p>通常结合th:object使用。某一标签使用th:object标签声明一个变量后，在其子标签内都可以通过选择变量表达式*{…}来取值，示例如下：</p>\n<pre class=\"language-HTML\" data-language=\"HTML\"><code class=\"language-HTML\">&lt;div th:object&#x3D;&quot;$&#123;session.user&#125;&quot;&gt;\n    &lt;p&gt;Name: &lt;span th:text&#x3D;&quot;*&#123;firstName&#125;&quot;&gt;Sebastian&lt;&#x2F;span&gt;.&lt;&#x2F;p&gt;\n    &lt;p&gt;Surname: &lt;span th:text&#x3D;&quot;*&#123;lastName&#125;&quot;&gt;Pepper&lt;&#x2F;span&gt;.&lt;&#x2F;p&gt; \n    &lt;p&gt;Nationality: &lt;span th:text&#x3D;&#123;nationality&#125;&quot;&gt;Saturn&lt;&#x2F;span&gt;.&lt;&#x2F;p&gt;\n&lt;&#x2F;div&gt; </code></pre>\n<p>上述代码等价于：</p>\n<pre class=\"language-HTML\" data-language=\"HTML\"><code class=\"language-HTML\">&lt;div&gt;\n    &lt;p&gt;Name: &lt;span th:text&#x3D;&quot;$&#123;session.user.firstName&#125;&quot;&gt;Sebastian&lt;&#x2F;span&gt;.&lt;&#x2F;p&gt; \n    &lt;p&gt;Surname: &lt;span th:text&#x3D;&quot;$&#123;session.user.lastName&#125;&quot;&gt;Pepper&lt;&#x2F;span&gt;.&lt;&#x2F;p&gt; \n    &lt;p&gt;Nationality: &lt;span th:text&#x3D;&quot;$&#123;session.user.nationality&#125;&quot;&gt;Saturn&lt;&#x2F;span&gt;.&lt;&#x2F;p&gt;\n&lt;&#x2F;div&gt;</code></pre>\n<p>若父标签未使用th:object声明任何变量，那么*{…}和${…}完全等价。</p>\n<h5 id=\"链接表达式-…\"><a href=\"#链接表达式-…\" class=\"headerlink\" title=\"链接表达式@{…}\"></a>链接表达式@{…}</h5><p>一般用于页面跳转和静态资源的引用，可搭配th:src,th:href,th:action等标签使用。</p>\n<pre class=\"language-HTML\" data-language=\"HTML\"><code class=\"language-HTML\">&lt;!-- 静态资源引用 --&gt;\n&lt;link rel&#x3D;&quot;icon&quot; th:href&#x3D;&quot;@&#123;&#x2F;images&#x2F;favicon.ico&#125;&quot; type&#x3D;&quot;image&#x2F;ico&quot; &#x2F;&gt;\n\n&lt;script th:src&#x3D;&quot;@&#123;&#x2F;vendors&#x2F;jquery&#x2F;dist&#x2F;jquery.min.js&#125;&quot;&gt;&lt;&#x2F;script&gt;\n\n&lt;!-- 页面跳转 --&gt;\n&lt;a th:href&#x3D;&quot;@&#123;&#x2F;index&#125;&quot;&gt;首页&lt;&#x2F;a&gt;</code></pre>\n<p>若希望页面跳转时携带参数，可使用@{&#x2F;URL(K1&#x3D;V1,K2&#x3D;V2…)}的格式</p>\n<pre class=\"language-HTML\" data-language=\"HTML\"><code class=\"language-HTML\">&lt;!-- 通过链接跳转为GET请求 --&gt;\n&lt;a th:href&#x3D;&quot;@&#123;&#x2F;index(id&#x3D;$&#123;id&#125;,pageNum&#x3D;1)&#125;&quot;&gt;首页&lt;&#x2F;a&gt; </code></pre>\n\n<p>链接表达式中写的是在项目中的相对路径，thymeleaf会自动把项目根路径补全在表达式的前面。例如，你的项目路径是<a href=\"http://localhost:8080/myapp,%E9%82%A3%E4%B9%88th:href=%22@%7B/index%7D%22%E4%BC%9A%E8%A2%AB%E8%A7%A3%E6%9E%90%E6%88%90href=%22http://localhost:8080/myapp/index%22%E3%80%82\">http://localhost:8080/myapp,那么th:href=&quot;@{/index}&quot;会被解析成href=&quot;http://localhost:8080/myapp/index&quot;。</a></p>\n<p>推荐使用链接表达式@{…}来进行静态资源的引用、页面跳转和表单提交，这样就不需要关心项目的根路径，只需要写入相对路径即可，尤其在rest风格中，必须使用。</p>\n<h5 id=\"片段表达式-…\"><a href=\"#片段表达式-…\" class=\"headerlink\" title=\"片段表达式~{…}\"></a>片段表达式~{…}</h5><p>通常用于模板布局，搭配th:fragement,th:include,th:insert,th:remove等标签使用。<br>详细教程可以参考博客<a href=\"https://blog.csdn.net/wangmx1993328/article/details/84747497\">https://blog.csdn.net/wangmx1993328/article/details/84747497</a></p>\n<h4 id=\"字面量\"><a href=\"#字面量\" class=\"headerlink\" title=\"字面量\"></a>字面量</h4><ul>\n<li>文本值: <strong>‘one text’</strong> <strong>,</strong> <strong>‘Another one!’</strong> <strong>,…</strong></li>\n<li>数字: <strong>0</strong> <strong>,</strong> <strong>34</strong> <strong>,</strong> <strong>3.0</strong> <strong>,</strong> <strong>12.3</strong> <strong>,…</strong></li>\n<li>布尔值: <strong>true</strong> <strong>,</strong> <strong>false</strong></li>\n<li>空值: <strong>null</strong></li>\n<li>变量： one，two，…. 变量不能有空格</li>\n</ul>\n<h4 id=\"文本操作\"><a href=\"#文本操作\" class=\"headerlink\" title=\"文本操作\"></a>文本操作</h4><ul>\n<li>字符串拼接: <strong>+</strong><pre class=\"language-HTML\" data-language=\"HTML\"><code class=\"language-HTML\">&lt;a th:href&#x3D;&quot;@&#123;$&#123;baseURL&#125;+&#39;&#x2F;add&#39;&#125;&quot;&gt;新增&lt;&#x2F;a&gt;</code></pre></li>\n<li>变量替换: <strong>|The name is ${name}|</strong> <pre class=\"language-HTML\" data-language=\"HTML\"><code class=\"language-HTML\">&lt;!-- 二者等价（只能包含表达式变量，而不能有条件判断等！) --&gt;\n&lt;h1 th:text&#x3D;&quot;&#39;后端发来的消息：&#39;+$&#123;msg&#125;&quot;&gt;nice&lt;&#x2F;h1&gt;\n&lt;h1 th:text&#x3D;&quot;|后端发来的消息：$&#123;msg&#125;|&quot;&gt;nice&lt;&#x2F;h1&gt;</code></pre></li>\n</ul>\n<h4 id=\"数学运算\"><a href=\"#数学运算\" class=\"headerlink\" title=\"数学运算\"></a>数学运算</h4><ul>\n<li>运算符: + , - , * , &#x2F; , %<pre class=\"language-HTML\" data-language=\"HTML\"><code class=\"language-HTML\">&lt;th scope&#x3D;&quot;row&quot; th:text&#x3D;&quot;$&#123;objStat.index&#125;+*&#123;startRow&#125;&quot;&gt;1&lt;&#x2F;th&gt;</code></pre></li>\n</ul>\n<h4 id=\"布尔运算\"><a href=\"#布尔运算\" class=\"headerlink\" title=\"布尔运算\"></a>布尔运算</h4><ul>\n<li>运算符:  <strong>and</strong> <strong>,</strong> <strong>or</strong></li>\n<li>一元运算: <strong>!</strong> <strong>,</strong> <strong>not</strong></li>\n</ul>\n<h4 id=\"比较运算\"><a href=\"#比较运算\" class=\"headerlink\" title=\"比较运算\"></a>比较运算</h4><ul>\n<li>比较: <strong>&gt;</strong> <strong>,</strong> <strong>&lt;** **,** **&gt;&#x3D;</strong> <strong>,</strong> <strong>&lt;&#x3D;</strong> <strong>(</strong> <strong>gt</strong> <strong>,</strong> <strong>lt</strong> <strong>,</strong> <strong>ge</strong> <strong>,</strong> <strong>le</strong> <strong>)</strong></li>\n<li>等式: <strong>&#x3D;&#x3D;</strong> <strong>,</strong> <strong>!&#x3D;</strong> <strong>(</strong> <strong>eq</strong> <strong>,</strong> <strong>ne</strong> <strong>)</strong> <pre class=\"language-HTML\" data-language=\"HTML\"><code class=\"language-HTML\">&lt;option value&#x3D;&quot;10&quot; th:selected&#x3D;&quot;*&#123;pageSize&#125; eq &#39;10&#39;&quot;&gt;10&lt;&#x2F;option&gt;</code></pre></li>\n</ul>\n<h4 id=\"条件运算\"><a href=\"#条件运算\" class=\"headerlink\" title=\"条件运算\"></a>条件运算</h4><ul>\n<li>If-then: <strong>(if) ? (then)</strong></li>\n<li>If-then-else: <strong>(if) ? (then) : (else)</strong></li>\n<li>Default: (value) <strong>?: (defaultvalue)</strong> <pre class=\"language-HTML\" data-language=\"HTML\"><code class=\"language-HTML\">&lt;div class&#x3D;&quot;row&quot; th:with&#x3D;&quot;feature&#x3D;$&#123;feature&#125; &#x3D;&#x3D; null or $&#123;feature&#125; &#x3D;&#x3D; &#39;&#39; ? &#39;&#39;:&#39;&#x2F;&#39;+$&#123;feature&#125;&quot;&gt;</code></pre></li>\n</ul>\n<h4 id=\"特殊操作\"><a href=\"#特殊操作\" class=\"headerlink\" title=\"特殊操作\"></a>特殊操作</h4><ul>\n<li>无操作： _</li>\n</ul>\n<h3 id=\"设置属性值-th-attr\"><a href=\"#设置属性值-th-attr\" class=\"headerlink\" title=\"设置属性值-th:attr\"></a>设置属性值-th:attr</h3><ul>\n<li>设置单个值</li>\n</ul>\n<pre class=\"language-HTML\" data-language=\"HTML\"><code class=\"language-HTML\">&lt;form action&#x3D;&quot;subscribe.html&quot; th:attr&#x3D;&quot;action&#x3D;@&#123;&#x2F;subscribe&#125;&quot;&gt;\n  &lt;fieldset&gt;\n    &lt;input type&#x3D;&quot;text&quot; name&#x3D;&quot;email&quot; &#x2F;&gt;\n    &lt;input type&#x3D;&quot;submit&quot; value&#x3D;&quot;Subscribe!&quot; th:attr&#x3D;&quot;value&#x3D;#&#123;subscribe.submit&#125;&quot;&#x2F;&gt;\n  &lt;&#x2F;fieldset&gt;\n&lt;&#x2F;form&gt;</code></pre>\n\n<ul>\n<li>设置多个值</li>\n</ul>\n<pre class=\"language-HTML\" data-language=\"HTML\"><code class=\"language-HTML\">&lt;img src&#x3D;&quot;..&#x2F;..&#x2F;images&#x2F;gtvglogo.png&quot;  \n     th:attr&#x3D;&quot;src&#x3D;@&#123;&#x2F;images&#x2F;gtvglogo.png&#125;,title&#x3D;#&#123;logo&#125;,alt&#x3D;#&#123;logo&#125;&quot; &#x2F;&gt;</code></pre>\n\n<p><a href=\"https://www.thymeleaf.org/doc/tutorials/3.0/usingthymeleaf.html#setting-attribute-values\">官方文档 - 5 Setting Attribute Values</a></p>\n<h3 id=\"迭代\"><a href=\"#迭代\" class=\"headerlink\" title=\"迭代\"></a>迭代</h3><ul>\n<li>基本语法：<pre class=\"language-HTML\" data-language=\"HTML\"><code class=\"language-HTML\">&lt;div th:each&#x3D;&quot;变量名 : 集合&quot;&gt; \n\t&lt;p th:text&#x3D;&quot;$&#123;变量名&#125;&quot;&gt;&lt;&#x2F;p&gt; \n&lt;&#x2F;div&gt;</code></pre></li>\n</ul>\n<pre class=\"language-HTML\" data-language=\"HTML\"><code class=\"language-HTML\">&lt;tr th:each&#x3D;&quot;prod : $&#123;prods&#125;&quot;&gt;\n    &lt;td th:text&#x3D;&quot;$&#123;prod.name&#125;&quot;&gt;Onions&lt;&#x2F;td&gt;\n    &lt;td th:text&#x3D;&quot;$&#123;prod.price&#125;&quot;&gt;2.41&lt;&#x2F;td&gt;\n    &lt;td th:text&#x3D;&quot;$&#123;prod.inStock&#125;? #&#123;true&#125; : #&#123;false&#125;&quot;&gt;yes&lt;&#x2F;td&gt;\n&lt;&#x2F;tr&gt;</code></pre>\n<ul>\n<li>迭代状态变量的使用：<pre class=\"language-HTML\" data-language=\"HTML\"><code class=\"language-HTML\">&lt;div th:each &#x3D; &quot;变量名，状态变量名 : 集合&quot; &gt; \n\t&lt;p th:text &#x3D; &quot;$&#123;状态变量.属性&#125;&quot; &gt;&lt;&#x2F;p&gt; \n&lt;&#x2F;div&gt;</code></pre></li>\n</ul>\n<pre class=\"language-HTML\" data-language=\"HTML\"><code class=\"language-HTML\">&lt;tr th:each&#x3D;&quot;prod,iterStat : $&#123;prods&#125;&quot; th:class&#x3D;&quot;$&#123;iterStat.odd&#125;? &#39;odd&#39;&quot;&gt;\n    &lt;td th:text&#x3D;&quot;$&#123;prod.name&#125;&quot;&gt;Onions&lt;&#x2F;td&gt;\n    &lt;td th:text&#x3D;&quot;$&#123;prod.price&#125;&quot;&gt;2.41&lt;&#x2F;td&gt;\n    &lt;td th:text&#x3D;&quot;$&#123;prod.inStock&#125;? #&#123;true&#125; : #&#123;false&#125;&quot;&gt;yes&lt;&#x2F;td&gt;\n&lt;&#x2F;tr&gt;</code></pre>\n\n<blockquote>\n<p>注：如果缺省状态变量名，则迭代器会 默认以变量名开头的状态变量 xxxStat</p>\n</blockquote>\n<blockquote>\n<p>状态变量的属性<br>index：当前迭代对象的序号，从0开始，这是索引属性<br>count：当前迭代对象的序号，从1开始，这个是统计属性<br>size：迭代变量元素的总量，这是被迭代对象的大小属性<br>even&#x2F;odd：布尔值，当前循环是否是偶数&#x2F;奇数（从0开始计算）<br>first：布尔值，当前循环是否是第一个<br>last：布尔值，当前循环是否是最后一个<br>current：当前迭代变量</p>\n</blockquote>\n<h3 id=\"条件运算-1\"><a href=\"#条件运算-1\" class=\"headerlink\" title=\"条件运算\"></a>条件运算</h3><pre class=\"language-HTML\" data-language=\"HTML\"><code class=\"language-HTML\">&lt;a href&#x3D;&quot;comments.html&quot;\n\tth:href&#x3D;&quot;@&#123;&#x2F;product&#x2F;comments(prodId&#x3D;$&#123;prod.id&#125;)&#125;&quot;\n\tth:if&#x3D;&quot;$&#123;not #lists.isEmpty(prod.comments)&#125;&quot;&gt;view&lt;&#x2F;a&gt;</code></pre>\n<p>th:if标签：当条件成立时，该标签及其子标签才会存在<br>th:unless标签：与th:if标签相反，条件不成立时存在</p>\n<pre class=\"language-HTML\" data-language=\"HTML\"><code class=\"language-HTML\">&lt;div th:switch&#x3D;&quot;$&#123;user.role&#125;&quot;&gt;\n      &lt;p th:case&#x3D;&quot;&#39;admin&#39;&quot;&gt;User is an administrator&lt;&#x2F;p&gt;\n      &lt;p th:case&#x3D;&quot;#&#123;roles.manager&#125;&quot;&gt;User is a manager&lt;&#x2F;p&gt;\n      &lt;p th:case&#x3D;&quot;*&quot;&gt;User is some other thing&lt;&#x2F;p&gt;\n&lt;&#x2F;div&gt;</code></pre>\n\n<h3 id=\"属性优先级\"><a href=\"#属性优先级\" class=\"headerlink\" title=\"属性优先级\"></a>属性优先级</h3><table>\n<thead>\n<tr>\n<th align=\"left\">Order</th>\n<th align=\"left\">Feature</th>\n<th align=\"left\">Attributes</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">1</td>\n<td align=\"left\">Fragment inclusion</td>\n<td align=\"left\"><code>th:insert</code> <code>th:replace</code></td>\n</tr>\n<tr>\n<td align=\"left\">2</td>\n<td align=\"left\">Fragment iteration</td>\n<td align=\"left\"><code>th:each</code></td>\n</tr>\n<tr>\n<td align=\"left\">3</td>\n<td align=\"left\">Conditional evaluation</td>\n<td align=\"left\"><code>th:if</code> <code>th:unless</code> <code>th:switch</code> <code>th:case</code></td>\n</tr>\n<tr>\n<td align=\"left\">4</td>\n<td align=\"left\">Local variable definition</td>\n<td align=\"left\"><code>th:object</code> <code>th:with</code></td>\n</tr>\n<tr>\n<td align=\"left\">5</td>\n<td align=\"left\">General attribute modification</td>\n<td align=\"left\"><code>th:attr</code> <code>th:attrprepend</code> <code>th:attrappend</code></td>\n</tr>\n<tr>\n<td align=\"left\">6</td>\n<td align=\"left\">Specific attribute modification</td>\n<td align=\"left\"><code>th:value</code> <code>th:href</code> <code>th:src</code> <code>...</code></td>\n</tr>\n<tr>\n<td align=\"left\">7</td>\n<td align=\"left\">Text (tag body modification)</td>\n<td align=\"left\"><code>th:text</code> <code>th:utext</code></td>\n</tr>\n<tr>\n<td align=\"left\">8</td>\n<td align=\"left\">Fragment specification</td>\n<td align=\"left\"><code>th:fragment</code></td>\n</tr>\n<tr>\n<td align=\"left\">9</td>\n<td align=\"left\">Fragment removal</td>\n<td align=\"left\"><code>th:remove</code></td>\n</tr>\n</tbody></table>\n<p><a href=\"https://www.thymeleaf.org/doc/tutorials/3.0/usingthymeleaf.html#attribute-precedence\">官方文档 - 10 Attribute Precedence</a></p>\n<h3 id=\"thymeleaf常用标签\"><a href=\"#thymeleaf常用标签\" class=\"headerlink\" title=\"thymeleaf常用标签\"></a>thymeleaf常用标签</h3><p><img src=\"/2023/01/20/thymeleaf-ji-ben-shi-yong/thymeleaf1.png\" alt=\"thymeleaf常用标签\"></p>\n<h3 id=\"在js中使用thymeleaf\"><a href=\"#在js中使用thymeleaf\" class=\"headerlink\" title=\"在js中使用thymeleaf\"></a>在js中使用thymeleaf</h3><p>模板引擎除了直接渲染页面之外还可以在js中进行预处理，其中的thymeleaf代码可以先注释起来，静态时默认使用注释后面的默认值：</p>\n<pre class=\"language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token operator\">&lt;</span>script th<span class=\"token operator\">:</span>inline<span class=\"token operator\">=</span><span class=\"token string\">\"javascript\"</span><span class=\"token operator\">></span>\n    <span class=\"token keyword\">var</span> msg <span class=\"token operator\">=</span> <span class=\"token comment\">/*[[thymeleaf]]*/</span>静态默认值\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>script<span class=\"token operator\">></span></code></pre>","site":{"data":{}},"excerpt":"","more":"<h1 id=\"thymeleaf基本使用\"><a href=\"#thymeleaf基本使用\" class=\"headerlink\" title=\"thymeleaf基本使用\"></a>thymeleaf基本使用</h1><h2 id=\"一、引入依赖\"><a href=\"#一、引入依赖\" class=\"headerlink\" title=\"一、引入依赖\"></a>一、引入依赖</h2><p>Spring Boot项目中引入依赖：</p>\n<pre class=\"language-XML\" data-language=\"XML\"><code class=\"language-XML\">&lt;dependency&gt;\n      &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;\n      &lt;artifactId&gt;spring-boot-starter-thymeleaf&lt;&#x2F;artifactId&gt;\n&lt;&#x2F;dependency&gt;</code></pre>\n\n<h2 id=\"二、配置文件\"><a href=\"#二、配置文件\" class=\"headerlink\" title=\"二、配置文件\"></a>二、配置文件</h2><p>在aplication.yml文件中写入如下配置：</p>\n<pre class=\"language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">spring</span><span class=\"token punctuation\">:</span>\n   <span class=\"token key atrule\">thymeleaf</span><span class=\"token punctuation\">:</span>\n     <span class=\"token key atrule\">mode</span><span class=\"token punctuation\">:</span> LEGACYHTML5\n     <span class=\"token key atrule\">encoding</span><span class=\"token punctuation\">:</span> UTF<span class=\"token punctuation\">-</span><span class=\"token number\">8</span>    <span class=\"token comment\"># 编码格式</span>\n     <span class=\"token key atrule\">prefix</span><span class=\"token punctuation\">:</span> classpath<span class=\"token punctuation\">:</span>/template/  <span class=\"token comment\"># 静态页面所在的路径，一般在resources文件加下创建</span>\n     <span class=\"token key atrule\">suffix</span><span class=\"token punctuation\">:</span> .html   <span class=\"token comment\"># 页面后缀</span>\n     <span class=\"token key atrule\">cache</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">false</span>   <span class=\"token comment\"># 关闭缓存，开发时可以看到实时页面</span></code></pre>\n<h2 id=\"三、编写控制层\"><a href=\"#三、编写控制层\" class=\"headerlink\" title=\"三、编写控制层\"></a>三、编写控制层</h2><p>控制层在返回页面的同时将键值对传给前端，给前端传值有四种方法：</p>\n<p>通过Model对象：</p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Controller</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ViewTestController</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token annotation punctuation\">@GetMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/hello\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">hello</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Model</span> model<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        model<span class=\"token punctuation\">.</span><span class=\"token function\">addAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"msg\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"这世上没有纯粹的自由，风也会有吹到头的时候\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        model<span class=\"token punctuation\">.</span><span class=\"token function\">addAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"link\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"http://www.baidu.com\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token string\">\"success\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n\n\n<p>通过ModelAndView对象：</p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Controller</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ViewTestController</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token annotation punctuation\">@GetMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/hello\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">hello</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ModelAndView</span> model<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        model<span class=\"token punctuation\">.</span><span class=\"token function\">addAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"msg\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"这世上没有纯粹的自由，风也会有吹到头的时候\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        model<span class=\"token punctuation\">.</span><span class=\"token function\">addAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"link\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"http://www.baidu.com\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token string\">\"success\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n\n<p>通过HttpServletRequest对象：</p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Controller</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ViewTestController</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token annotation punctuation\">@GetMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/hello\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">hello</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">HttpServletRequest</span> request<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        request<span class=\"token punctuation\">.</span><span class=\"token function\">setAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"msg\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"这世上没有纯粹的自由，风也会有吹到头的时候\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        request<span class=\"token punctuation\">.</span><span class=\"token function\">setAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"link\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"http://www.baidu.com\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token string\">\"success\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n\n<p>通过Map对象：</p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Controller</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ViewTestController</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token annotation punctuation\">@GetMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/hello\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">hello</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> map<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        map<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"msg\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"这世上没有纯粹的自由，风也会有吹到头的时候\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        map<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"link\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"http://www.baidu.com\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token string\">\"success\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n<h2 id=\"四、基础语法\"><a href=\"#四、基础语法\" class=\"headerlink\" title=\"四、基础语法\"></a>四、基础语法</h2><h3 id=\"编写html\"><a href=\"#编写html\" class=\"headerlink\" title=\"编写html\"></a>编写html</h3><p>建议在html标签上写入：</p>\n<pre class=\"language-HTML\" data-language=\"HTML\"><code class=\"language-HTML\">&lt;html xmlns:th&#x3D;&quot;http:&#x2F;&#x2F;www.thymeleaf.org&quot;&gt;</code></pre>\n\n<p>不加不影响thymeleaf正常使用，但是加入以后开发过程中th:会自动弹出提示</p>\n<p><code>/templates/success.html</code>：</p>\n<pre class=\"language-HTML\" data-language=\"HTML\"><code class=\"language-HTML\">&lt;!DOCTYPE html&gt;\n&lt;html lang&#x3D;&quot;en&quot; xmlns:th&#x3D;&quot;http:&#x2F;&#x2F;www.thymeleaf.org&quot;&gt;\n&lt;head&gt;\n    &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;\n    &lt;title&gt;Title&lt;&#x2F;title&gt;\n&lt;&#x2F;head&gt;\n&lt;body&gt;\n&lt;h1 th:text&#x3D;&quot;$&#123;msg&#125;&quot;&gt;nice&lt;&#x2F;h1&gt;\n&lt;h2&gt;\n    &lt;a href&#x3D;&quot;www.baidu.com&quot; th:href&#x3D;&quot;$&#123;link&#125;&quot;&gt;去百度&lt;&#x2F;a&gt;  &lt;br&#x2F;&gt;\n    &lt;a href&#x3D;&quot;www.google.com&quot; th:href&#x3D;&quot;@&#123;&#x2F;link&#125;&quot;&gt;去百度&lt;&#x2F;a&gt;\n&lt;&#x2F;h2&gt;\n&lt;&#x2F;body&gt;\n&lt;&#x2F;html&gt;</code></pre>\n\n<h3 id=\"基本语法\"><a href=\"#基本语法\" class=\"headerlink\" title=\"基本语法\"></a>基本语法</h3><h4 id=\"表达式\"><a href=\"#表达式\" class=\"headerlink\" title=\"表达式\"></a>表达式</h4><table>\n<thead>\n<tr>\n<th>表达式名字</th>\n<th>语法</th>\n<th align=\"center\">用途</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>变量取值</td>\n<td>${…}</td>\n<td align=\"center\">获取请求域、session域、对象等值</td>\n</tr>\n<tr>\n<td>选择变量</td>\n<td>*{…}</td>\n<td align=\"center\">获取上下文对象值</td>\n</tr>\n<tr>\n<td>消息</td>\n<td>#{…}</td>\n<td align=\"center\">获取国际化等值</td>\n</tr>\n<tr>\n<td>链接</td>\n<td>@{…}</td>\n<td align=\"center\">生成链接</td>\n</tr>\n<tr>\n<td>片段表达式</td>\n<td>~{…}</td>\n<td align=\"center\">jsp:include 作用，引入公共页面片段</td>\n</tr>\n</tbody></table>\n<h5 id=\"获取变量值-…\"><a href=\"#获取变量值-…\" class=\"headerlink\" title=\"获取变量值${…}\"></a>获取变量值${…}</h5><pre class=\"language-HTML\" data-language=\"HTML\"><code class=\"language-HTML\">&lt;h1 th:text&#x3D;&quot;$&#123;msg&#125;&quot;&gt;nice&lt;&#x2F;h1&gt;</code></pre>\n<p>上面代码默认从request作用域取值，若未取到则为null<br>若从session域和application域取值，分别加上前缀即可：</p>\n<pre class=\"language-HTML\" data-language=\"HTML\"><code class=\"language-HTML\">&lt;h1 th:text&#x3D;&quot;$&#123;session.msg&#125;&quot;&gt;nice&lt;&#x2F;h1&gt; &lt;!--从session域取值  --&gt;</code></pre>\n<pre class=\"language-HTML\" data-language=\"HTML\"><code class=\"language-HTML\">&lt;h1 th:text&#x3D;&quot;$&#123;application.msg&#125;&quot;&gt;nice&lt;&#x2F;h1&gt; &lt;!-- 从application域取值 --&gt;</code></pre>\n<h5 id=\"选择变量表达式-…\"><a href=\"#选择变量表达式-…\" class=\"headerlink\" title=\"选择变量表达式*{…}\"></a>选择变量表达式*{…}</h5><p>通常结合th:object使用。某一标签使用th:object标签声明一个变量后，在其子标签内都可以通过选择变量表达式*{…}来取值，示例如下：</p>\n<pre class=\"language-HTML\" data-language=\"HTML\"><code class=\"language-HTML\">&lt;div th:object&#x3D;&quot;$&#123;session.user&#125;&quot;&gt;\n    &lt;p&gt;Name: &lt;span th:text&#x3D;&quot;*&#123;firstName&#125;&quot;&gt;Sebastian&lt;&#x2F;span&gt;.&lt;&#x2F;p&gt;\n    &lt;p&gt;Surname: &lt;span th:text&#x3D;&quot;*&#123;lastName&#125;&quot;&gt;Pepper&lt;&#x2F;span&gt;.&lt;&#x2F;p&gt; \n    &lt;p&gt;Nationality: &lt;span th:text&#x3D;&#123;nationality&#125;&quot;&gt;Saturn&lt;&#x2F;span&gt;.&lt;&#x2F;p&gt;\n&lt;&#x2F;div&gt; </code></pre>\n<p>上述代码等价于：</p>\n<pre class=\"language-HTML\" data-language=\"HTML\"><code class=\"language-HTML\">&lt;div&gt;\n    &lt;p&gt;Name: &lt;span th:text&#x3D;&quot;$&#123;session.user.firstName&#125;&quot;&gt;Sebastian&lt;&#x2F;span&gt;.&lt;&#x2F;p&gt; \n    &lt;p&gt;Surname: &lt;span th:text&#x3D;&quot;$&#123;session.user.lastName&#125;&quot;&gt;Pepper&lt;&#x2F;span&gt;.&lt;&#x2F;p&gt; \n    &lt;p&gt;Nationality: &lt;span th:text&#x3D;&quot;$&#123;session.user.nationality&#125;&quot;&gt;Saturn&lt;&#x2F;span&gt;.&lt;&#x2F;p&gt;\n&lt;&#x2F;div&gt;</code></pre>\n<p>若父标签未使用th:object声明任何变量，那么*{…}和${…}完全等价。</p>\n<h5 id=\"链接表达式-…\"><a href=\"#链接表达式-…\" class=\"headerlink\" title=\"链接表达式@{…}\"></a>链接表达式@{…}</h5><p>一般用于页面跳转和静态资源的引用，可搭配th:src,th:href,th:action等标签使用。</p>\n<pre class=\"language-HTML\" data-language=\"HTML\"><code class=\"language-HTML\">&lt;!-- 静态资源引用 --&gt;\n&lt;link rel&#x3D;&quot;icon&quot; th:href&#x3D;&quot;@&#123;&#x2F;images&#x2F;favicon.ico&#125;&quot; type&#x3D;&quot;image&#x2F;ico&quot; &#x2F;&gt;\n\n&lt;script th:src&#x3D;&quot;@&#123;&#x2F;vendors&#x2F;jquery&#x2F;dist&#x2F;jquery.min.js&#125;&quot;&gt;&lt;&#x2F;script&gt;\n\n&lt;!-- 页面跳转 --&gt;\n&lt;a th:href&#x3D;&quot;@&#123;&#x2F;index&#125;&quot;&gt;首页&lt;&#x2F;a&gt;</code></pre>\n<p>若希望页面跳转时携带参数，可使用@{&#x2F;URL(K1&#x3D;V1,K2&#x3D;V2…)}的格式</p>\n<pre class=\"language-HTML\" data-language=\"HTML\"><code class=\"language-HTML\">&lt;!-- 通过链接跳转为GET请求 --&gt;\n&lt;a th:href&#x3D;&quot;@&#123;&#x2F;index(id&#x3D;$&#123;id&#125;,pageNum&#x3D;1)&#125;&quot;&gt;首页&lt;&#x2F;a&gt; </code></pre>\n\n<p>链接表达式中写的是在项目中的相对路径，thymeleaf会自动把项目根路径补全在表达式的前面。例如，你的项目路径是<a href=\"http://localhost:8080/myapp,%E9%82%A3%E4%B9%88th:href=%22@%7B/index%7D%22%E4%BC%9A%E8%A2%AB%E8%A7%A3%E6%9E%90%E6%88%90href=%22http://localhost:8080/myapp/index%22%E3%80%82\">http://localhost:8080/myapp,那么th:href=&quot;@{/index}&quot;会被解析成href=&quot;http://localhost:8080/myapp/index&quot;。</a></p>\n<p>推荐使用链接表达式@{…}来进行静态资源的引用、页面跳转和表单提交，这样就不需要关心项目的根路径，只需要写入相对路径即可，尤其在rest风格中，必须使用。</p>\n<h5 id=\"片段表达式-…\"><a href=\"#片段表达式-…\" class=\"headerlink\" title=\"片段表达式~{…}\"></a>片段表达式~{…}</h5><p>通常用于模板布局，搭配th:fragement,th:include,th:insert,th:remove等标签使用。<br>详细教程可以参考博客<a href=\"https://blog.csdn.net/wangmx1993328/article/details/84747497\">https://blog.csdn.net/wangmx1993328/article/details/84747497</a></p>\n<h4 id=\"字面量\"><a href=\"#字面量\" class=\"headerlink\" title=\"字面量\"></a>字面量</h4><ul>\n<li>文本值: <strong>‘one text’</strong> <strong>,</strong> <strong>‘Another one!’</strong> <strong>,…</strong></li>\n<li>数字: <strong>0</strong> <strong>,</strong> <strong>34</strong> <strong>,</strong> <strong>3.0</strong> <strong>,</strong> <strong>12.3</strong> <strong>,…</strong></li>\n<li>布尔值: <strong>true</strong> <strong>,</strong> <strong>false</strong></li>\n<li>空值: <strong>null</strong></li>\n<li>变量： one，two，…. 变量不能有空格</li>\n</ul>\n<h4 id=\"文本操作\"><a href=\"#文本操作\" class=\"headerlink\" title=\"文本操作\"></a>文本操作</h4><ul>\n<li>字符串拼接: <strong>+</strong><pre class=\"language-HTML\" data-language=\"HTML\"><code class=\"language-HTML\">&lt;a th:href&#x3D;&quot;@&#123;$&#123;baseURL&#125;+&#39;&#x2F;add&#39;&#125;&quot;&gt;新增&lt;&#x2F;a&gt;</code></pre></li>\n<li>变量替换: <strong>|The name is ${name}|</strong> <pre class=\"language-HTML\" data-language=\"HTML\"><code class=\"language-HTML\">&lt;!-- 二者等价（只能包含表达式变量，而不能有条件判断等！) --&gt;\n&lt;h1 th:text&#x3D;&quot;&#39;后端发来的消息：&#39;+$&#123;msg&#125;&quot;&gt;nice&lt;&#x2F;h1&gt;\n&lt;h1 th:text&#x3D;&quot;|后端发来的消息：$&#123;msg&#125;|&quot;&gt;nice&lt;&#x2F;h1&gt;</code></pre></li>\n</ul>\n<h4 id=\"数学运算\"><a href=\"#数学运算\" class=\"headerlink\" title=\"数学运算\"></a>数学运算</h4><ul>\n<li>运算符: + , - , * , &#x2F; , %<pre class=\"language-HTML\" data-language=\"HTML\"><code class=\"language-HTML\">&lt;th scope&#x3D;&quot;row&quot; th:text&#x3D;&quot;$&#123;objStat.index&#125;+*&#123;startRow&#125;&quot;&gt;1&lt;&#x2F;th&gt;</code></pre></li>\n</ul>\n<h4 id=\"布尔运算\"><a href=\"#布尔运算\" class=\"headerlink\" title=\"布尔运算\"></a>布尔运算</h4><ul>\n<li>运算符:  <strong>and</strong> <strong>,</strong> <strong>or</strong></li>\n<li>一元运算: <strong>!</strong> <strong>,</strong> <strong>not</strong></li>\n</ul>\n<h4 id=\"比较运算\"><a href=\"#比较运算\" class=\"headerlink\" title=\"比较运算\"></a>比较运算</h4><ul>\n<li>比较: <strong>&gt;</strong> <strong>,</strong> <strong>&lt;** **,** **&gt;&#x3D;</strong> <strong>,</strong> <strong>&lt;&#x3D;</strong> <strong>(</strong> <strong>gt</strong> <strong>,</strong> <strong>lt</strong> <strong>,</strong> <strong>ge</strong> <strong>,</strong> <strong>le</strong> <strong>)</strong></li>\n<li>等式: <strong>&#x3D;&#x3D;</strong> <strong>,</strong> <strong>!&#x3D;</strong> <strong>(</strong> <strong>eq</strong> <strong>,</strong> <strong>ne</strong> <strong>)</strong> <pre class=\"language-HTML\" data-language=\"HTML\"><code class=\"language-HTML\">&lt;option value&#x3D;&quot;10&quot; th:selected&#x3D;&quot;*&#123;pageSize&#125; eq &#39;10&#39;&quot;&gt;10&lt;&#x2F;option&gt;</code></pre></li>\n</ul>\n<h4 id=\"条件运算\"><a href=\"#条件运算\" class=\"headerlink\" title=\"条件运算\"></a>条件运算</h4><ul>\n<li>If-then: <strong>(if) ? (then)</strong></li>\n<li>If-then-else: <strong>(if) ? (then) : (else)</strong></li>\n<li>Default: (value) <strong>?: (defaultvalue)</strong> <pre class=\"language-HTML\" data-language=\"HTML\"><code class=\"language-HTML\">&lt;div class&#x3D;&quot;row&quot; th:with&#x3D;&quot;feature&#x3D;$&#123;feature&#125; &#x3D;&#x3D; null or $&#123;feature&#125; &#x3D;&#x3D; &#39;&#39; ? &#39;&#39;:&#39;&#x2F;&#39;+$&#123;feature&#125;&quot;&gt;</code></pre></li>\n</ul>\n<h4 id=\"特殊操作\"><a href=\"#特殊操作\" class=\"headerlink\" title=\"特殊操作\"></a>特殊操作</h4><ul>\n<li>无操作： _</li>\n</ul>\n<h3 id=\"设置属性值-th-attr\"><a href=\"#设置属性值-th-attr\" class=\"headerlink\" title=\"设置属性值-th:attr\"></a>设置属性值-th:attr</h3><ul>\n<li>设置单个值</li>\n</ul>\n<pre class=\"language-HTML\" data-language=\"HTML\"><code class=\"language-HTML\">&lt;form action&#x3D;&quot;subscribe.html&quot; th:attr&#x3D;&quot;action&#x3D;@&#123;&#x2F;subscribe&#125;&quot;&gt;\n  &lt;fieldset&gt;\n    &lt;input type&#x3D;&quot;text&quot; name&#x3D;&quot;email&quot; &#x2F;&gt;\n    &lt;input type&#x3D;&quot;submit&quot; value&#x3D;&quot;Subscribe!&quot; th:attr&#x3D;&quot;value&#x3D;#&#123;subscribe.submit&#125;&quot;&#x2F;&gt;\n  &lt;&#x2F;fieldset&gt;\n&lt;&#x2F;form&gt;</code></pre>\n\n<ul>\n<li>设置多个值</li>\n</ul>\n<pre class=\"language-HTML\" data-language=\"HTML\"><code class=\"language-HTML\">&lt;img src&#x3D;&quot;..&#x2F;..&#x2F;images&#x2F;gtvglogo.png&quot;  \n     th:attr&#x3D;&quot;src&#x3D;@&#123;&#x2F;images&#x2F;gtvglogo.png&#125;,title&#x3D;#&#123;logo&#125;,alt&#x3D;#&#123;logo&#125;&quot; &#x2F;&gt;</code></pre>\n\n<p><a href=\"https://www.thymeleaf.org/doc/tutorials/3.0/usingthymeleaf.html#setting-attribute-values\">官方文档 - 5 Setting Attribute Values</a></p>\n<h3 id=\"迭代\"><a href=\"#迭代\" class=\"headerlink\" title=\"迭代\"></a>迭代</h3><ul>\n<li>基本语法：<pre class=\"language-HTML\" data-language=\"HTML\"><code class=\"language-HTML\">&lt;div th:each&#x3D;&quot;变量名 : 集合&quot;&gt; \n\t&lt;p th:text&#x3D;&quot;$&#123;变量名&#125;&quot;&gt;&lt;&#x2F;p&gt; \n&lt;&#x2F;div&gt;</code></pre></li>\n</ul>\n<pre class=\"language-HTML\" data-language=\"HTML\"><code class=\"language-HTML\">&lt;tr th:each&#x3D;&quot;prod : $&#123;prods&#125;&quot;&gt;\n    &lt;td th:text&#x3D;&quot;$&#123;prod.name&#125;&quot;&gt;Onions&lt;&#x2F;td&gt;\n    &lt;td th:text&#x3D;&quot;$&#123;prod.price&#125;&quot;&gt;2.41&lt;&#x2F;td&gt;\n    &lt;td th:text&#x3D;&quot;$&#123;prod.inStock&#125;? #&#123;true&#125; : #&#123;false&#125;&quot;&gt;yes&lt;&#x2F;td&gt;\n&lt;&#x2F;tr&gt;</code></pre>\n<ul>\n<li>迭代状态变量的使用：<pre class=\"language-HTML\" data-language=\"HTML\"><code class=\"language-HTML\">&lt;div th:each &#x3D; &quot;变量名，状态变量名 : 集合&quot; &gt; \n\t&lt;p th:text &#x3D; &quot;$&#123;状态变量.属性&#125;&quot; &gt;&lt;&#x2F;p&gt; \n&lt;&#x2F;div&gt;</code></pre></li>\n</ul>\n<pre class=\"language-HTML\" data-language=\"HTML\"><code class=\"language-HTML\">&lt;tr th:each&#x3D;&quot;prod,iterStat : $&#123;prods&#125;&quot; th:class&#x3D;&quot;$&#123;iterStat.odd&#125;? &#39;odd&#39;&quot;&gt;\n    &lt;td th:text&#x3D;&quot;$&#123;prod.name&#125;&quot;&gt;Onions&lt;&#x2F;td&gt;\n    &lt;td th:text&#x3D;&quot;$&#123;prod.price&#125;&quot;&gt;2.41&lt;&#x2F;td&gt;\n    &lt;td th:text&#x3D;&quot;$&#123;prod.inStock&#125;? #&#123;true&#125; : #&#123;false&#125;&quot;&gt;yes&lt;&#x2F;td&gt;\n&lt;&#x2F;tr&gt;</code></pre>\n\n<blockquote>\n<p>注：如果缺省状态变量名，则迭代器会 默认以变量名开头的状态变量 xxxStat</p>\n</blockquote>\n<blockquote>\n<p>状态变量的属性<br>index：当前迭代对象的序号，从0开始，这是索引属性<br>count：当前迭代对象的序号，从1开始，这个是统计属性<br>size：迭代变量元素的总量，这是被迭代对象的大小属性<br>even&#x2F;odd：布尔值，当前循环是否是偶数&#x2F;奇数（从0开始计算）<br>first：布尔值，当前循环是否是第一个<br>last：布尔值，当前循环是否是最后一个<br>current：当前迭代变量</p>\n</blockquote>\n<h3 id=\"条件运算-1\"><a href=\"#条件运算-1\" class=\"headerlink\" title=\"条件运算\"></a>条件运算</h3><pre class=\"language-HTML\" data-language=\"HTML\"><code class=\"language-HTML\">&lt;a href&#x3D;&quot;comments.html&quot;\n\tth:href&#x3D;&quot;@&#123;&#x2F;product&#x2F;comments(prodId&#x3D;$&#123;prod.id&#125;)&#125;&quot;\n\tth:if&#x3D;&quot;$&#123;not #lists.isEmpty(prod.comments)&#125;&quot;&gt;view&lt;&#x2F;a&gt;</code></pre>\n<p>th:if标签：当条件成立时，该标签及其子标签才会存在<br>th:unless标签：与th:if标签相反，条件不成立时存在</p>\n<pre class=\"language-HTML\" data-language=\"HTML\"><code class=\"language-HTML\">&lt;div th:switch&#x3D;&quot;$&#123;user.role&#125;&quot;&gt;\n      &lt;p th:case&#x3D;&quot;&#39;admin&#39;&quot;&gt;User is an administrator&lt;&#x2F;p&gt;\n      &lt;p th:case&#x3D;&quot;#&#123;roles.manager&#125;&quot;&gt;User is a manager&lt;&#x2F;p&gt;\n      &lt;p th:case&#x3D;&quot;*&quot;&gt;User is some other thing&lt;&#x2F;p&gt;\n&lt;&#x2F;div&gt;</code></pre>\n\n<h3 id=\"属性优先级\"><a href=\"#属性优先级\" class=\"headerlink\" title=\"属性优先级\"></a>属性优先级</h3><table>\n<thead>\n<tr>\n<th align=\"left\">Order</th>\n<th align=\"left\">Feature</th>\n<th align=\"left\">Attributes</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">1</td>\n<td align=\"left\">Fragment inclusion</td>\n<td align=\"left\"><code>th:insert</code> <code>th:replace</code></td>\n</tr>\n<tr>\n<td align=\"left\">2</td>\n<td align=\"left\">Fragment iteration</td>\n<td align=\"left\"><code>th:each</code></td>\n</tr>\n<tr>\n<td align=\"left\">3</td>\n<td align=\"left\">Conditional evaluation</td>\n<td align=\"left\"><code>th:if</code> <code>th:unless</code> <code>th:switch</code> <code>th:case</code></td>\n</tr>\n<tr>\n<td align=\"left\">4</td>\n<td align=\"left\">Local variable definition</td>\n<td align=\"left\"><code>th:object</code> <code>th:with</code></td>\n</tr>\n<tr>\n<td align=\"left\">5</td>\n<td align=\"left\">General attribute modification</td>\n<td align=\"left\"><code>th:attr</code> <code>th:attrprepend</code> <code>th:attrappend</code></td>\n</tr>\n<tr>\n<td align=\"left\">6</td>\n<td align=\"left\">Specific attribute modification</td>\n<td align=\"left\"><code>th:value</code> <code>th:href</code> <code>th:src</code> <code>...</code></td>\n</tr>\n<tr>\n<td align=\"left\">7</td>\n<td align=\"left\">Text (tag body modification)</td>\n<td align=\"left\"><code>th:text</code> <code>th:utext</code></td>\n</tr>\n<tr>\n<td align=\"left\">8</td>\n<td align=\"left\">Fragment specification</td>\n<td align=\"left\"><code>th:fragment</code></td>\n</tr>\n<tr>\n<td align=\"left\">9</td>\n<td align=\"left\">Fragment removal</td>\n<td align=\"left\"><code>th:remove</code></td>\n</tr>\n</tbody></table>\n<p><a href=\"https://www.thymeleaf.org/doc/tutorials/3.0/usingthymeleaf.html#attribute-precedence\">官方文档 - 10 Attribute Precedence</a></p>\n<h3 id=\"thymeleaf常用标签\"><a href=\"#thymeleaf常用标签\" class=\"headerlink\" title=\"thymeleaf常用标签\"></a>thymeleaf常用标签</h3><p><img src=\"/2023/01/20/thymeleaf-ji-ben-shi-yong/thymeleaf1.png\" alt=\"thymeleaf常用标签\"></p>\n<h3 id=\"在js中使用thymeleaf\"><a href=\"#在js中使用thymeleaf\" class=\"headerlink\" title=\"在js中使用thymeleaf\"></a>在js中使用thymeleaf</h3><p>模板引擎除了直接渲染页面之外还可以在js中进行预处理，其中的thymeleaf代码可以先注释起来，静态时默认使用注释后面的默认值：</p>\n<pre class=\"language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token operator\">&lt;</span>script th<span class=\"token operator\">:</span>inline<span class=\"token operator\">=</span><span class=\"token string\">\"javascript\"</span><span class=\"token operator\">></span>\n    <span class=\"token keyword\">var</span> msg <span class=\"token operator\">=</span> <span class=\"token comment\">/*[[thymeleaf]]*/</span>静态默认值\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>script<span class=\"token operator\">></span></code></pre>"},{"title":"一道缝合怪算法题的总结-LeetCode2818","date":"2024-04-07T11:40:11.000Z","_content":"\n[2818.操作使得分最大]([2818. 操作使得分最大 - 力扣（LeetCode）](https://leetcode.cn/problems/apply-operations-to-maximize-score/description/))\n\n## 题目描述\n\n给你一个长度为 `n` 的正整数数组 `nums` 和一个整数 `k` 。\n\n一开始，你的分数为 `1` 。你可以进行以下操作至多 `k` 次，目标是使你的分数最大：\n\n- 选择一个之前没有选过的 **非空** 子数组 `nums[l, ..., r]` 。\n- 从 `nums[l, ..., r]` 里面选择一个 **质数分数** 最高的元素 `x` 。如果多个元素质数分数相同且最高，选择下标最小的一个。\n- 将你的分数乘以 `x` 。\n\n`nums[l, ..., r]` 表示 `nums` 中起始下标为 `l` ，结束下标为 `r` 的子数组，两个端点都包含。\n\n一个整数的 **质数分数** 等于 `x` 不同质因子的数目。比方说， `300` 的质数分数为 `3` ，因为 `300 = 2 * 2 * 3 * 5 * 5` 。\n\n请你返回进行至多 `k` 次操作后，可以得到的 **最大分数** 。\n\n由于答案可能很大，请你将结果对 `109 + 7` 取余后返回。\n\n**提示：**\n\n- `1 <= nums.length == n <= 10^5`\n- `1 <= nums[i] <= 10^5`\n- `1 <= k <= min(n * (n + 1) / 2, 10^9)`\n\n## 问题分解\n\n1. 题目最终目的是使得分最大，而得分是通过乘以数组元素实现的，也就是要尽可能乘以更大的元素，考虑维护一个大根堆\n2. 一个元素可以被选择多少次由两个指标决定：一是和左右两边质数分数的大小有关，这决定了选中该元素的子数组最多可以向两侧扩张多少，考虑维护一个单调栈；二是和非空子数组之前是否被选择过有关，涉及到了数学的计数原理\n3. 质数分数的大小计算可以先维护一个质数表\n\n## 质数表的预处理\n\n\n\n​\t判断一个数是否为质数，通常采用的是从2遍历到根号n，这样做的时间复杂度为$$O(\\sqrt{n})$$，还可以通过提前维护素数表来实现：\n\n>  题目中数组元素的最大值为100000，可以提前创建一个boolean型数组`boolean[] isPrime = new boolean[100001];`，并将所有元素置为`true`，按照以下方法处理：\n>\n> 1. 从2开始向100000/2遍历，每次遍历到`isPrime[i]`时，将`i`的倍数`isPrime[i*j] ,j=2,...n`置为`false`表示`i*j`是合数\n> 2. 若当遍历到`isPrime[i]`时，`isPrime[i]`已经为`false`，代表`i`是合数 , 且它的倍数一定在之前已经被遍历过 , 所以直接跳过即可\n\n经过这一步骤，数组`isPrime`已经可以判断数`i`是否为质数\n\n\n\n但本题不仅要判断是否为质数 , 还需要求该数的所有质因数的数量，所以对预处理方法稍作修改：\n\n> 创建一个int型数组`int[] scores = new int[100001]`，存放每个数的质数分数，基于上述方法做如下修改：\n>\n> 1. 遍历到`scores[i]`时，将`i`的倍数`scores[i*j] ,j=1，2,...n`加一\n> 2. 遍历到`scores[i]`时，如果`scores[i]==0`代表之前从来没有被访问过，也就是`i`是素数，但考虑到素数本身也是它的质数分数，所以要将`scores[i]++`，这也就是为什么这里`j=1，2,...n`而上面的布尔型数组的`j=2,...n`\n\n经过这一步骤，数组`scores`已经存放各个数字的质数分数\n\n## 单调栈\n\n​\t由于要判断数组元素左右两侧距离它最近的质数分数大于等于它的数（由于题目要求如果多个元素质数分数相同且最高，选择下标最小的一个，所以左侧是大于等于，右侧是大于），所以需要维护两个数组`int[] left,right`，这两个数组的初始化由单调栈完成\n\n​\t我最开始的思路是：\n\n1. **从左往右 **遍历数组`nums`，按照质数分数 **递减** 维护一个单调栈，栈中存数组下标，`left[i]`的值等于栈中第一个质量分数大于等于`nums[i]`的下标\n2. 再 **从右往左** 遍历数组`nums`，按照按照质数分数 **递增** 维护一个单调栈，`right[i]`的值等于栈中第一个质量分数大于等于`nums[i]`的下标\n\n​\t代码如下：\n\n```java\n\t\tint[][] scores = new int[n][2];//这里scores第一列是left数组，第二列是right数组\n        Stack<Integer> stack = new Stack<>();\n        for(int i=0;i<n;i++){\n            while(!stack.isEmpty()&&isPrime[nums.get(stack.peek())]<isPrime[nums.get(i)]){\n                stack.pop();\n            }\n            scores[i][0] = stack.isEmpty()?-1:stack.peek();\n            stack.add(i);\n        }\n        stack.clear();\n        for(int i=n-1;i>=0;i--){\n            while(!stack.isEmpty()&&isPrime[nums.get(stack.peek())]<=isPrime[nums.get(i)]){\n                stack.pop();\n            }\n            scores[i][1] = stack.isEmpty()?n-1:isPrime[nums.get(stack.peek())]==isPrime[nums.get(i)]stack.peek():stack.peek()-1;\n            stack.add(i);\n        }\n```\n\n\n\n但是看了灵神的题解发现一次遍历就可以做到（灵神是真的强），思路是这样的：\n\n1. `right`数组所有值初始化为`nums`长度\n2. 栈中放一个初始元素`-1`，方便数组第一个元素\n3. **从左往右** 遍历数组`nums`， 由于栈中存放的是数组下标，因此在因为栈顶元素的质数分数小于当前元素`nums[i`]时，可以直接把弹出的数组下标的`right[stack.pop()] = i`位置幅值当前遍历的下标，当前位置即是栈中元素右侧的第一个更大的元素\n4. 栈顶质量分数小的下标弹出后，栈顶元素即是当前元素`nums[i]`左侧第一个质数分数大于等于当前元素的下标，令`left[i]=stack.peek()`即可\n5. 把下标`i`放入栈中\n\n代码如下：\n\n```java\n\t\tint[][] scores = new int[n][2];\n        for(int i=0;i<n;i++){\n            scores[i][1] = n;\n        }\t\t\n\t\tStack<Integer> stack = new Stack<>();\n        stack.push(-1);\n        for(int i=0;i<n;i++){\n            while(stack.size()>1&&isPrime[nums.get(stack.peek())]<isPrime[nums.get(i)]){\n                scores[stack.pop()][1]=i;\n            }\n            scores[i][0] = stack.peek();\n            stack.push(i);\n        }\n```\n\n## 快速幂\n\n快速幂算法比较经典了，直接贴代码：\n\n```java\npublic long fastPow(long x,int y){\n        long ans = 1;\n        while(y>0){\n            if((y&1)==1){\n                ans = (x*ans)%mod;\n            }\n            x = (x*x)%mod;\n            y >>= 1;\n        }\n        return ans;\n    }\n```\n\n## 其他\n\n\n\n大根堆没什么好说的，创建一个优先队列指定，按照质数分数逆序存数组下标就行\n\n不重复的子数组通过计数原理实现\n\n对于每个元素`nums[i]`，只要子数组的下界在`(left[i],i]`之间，上界在`[i,right[i])`之间，那么这个子数组最后选择的元素一定是`nums[i]`，一共有`(i-left[i])*(right[i]-i)`个这样的子数组；并且对于整个数组`nums`，选中每个元素的子数组集合之间一定没有交集（因为每个子数组只会选中一个元素），所以可以确定子数组之前一定是没有选择过的。\n\n那么在`k`不为0时，从大根堆里弹出下标`i`，对于`nums[i]`，它对结果产生的贡献就是乘以`pow(nums[i], Math.min(k,(i-left[i])*(right[i]-i)))`，循环直到`k`为0即可。\n\n## 代码\n\n最终整道题的代码如下：\n\n用时击败28.57%的java用户，不高，但时间复杂度依然是`O(nlogn)`：\n\n```java\nclass Solution {\n    int mod = 1000000007;\n\n    static int[] isPrime = new int[100001];\n\n    static{\n        for(int i=2;i<isPrime.length;i++){\n            if(isPrime[i]==0){\n                for(int j=1;j*i<isPrime.length;j++){\n                    isPrime[i*j]++;\n                }\n            }\n        }\n    }\n\n    public int maximumScore(List<Integer> nums, int k) {\n        int n = nums.size();\n        Queue<Integer> queue = new PriorityQueue<>(new Comparator<Integer>(){\n            @Override\n            public int compare(Integer o1, Integer o2){\n                return nums.get(o2)-nums.get(o1);\n            }\n        });\n        int[][] scores = new int[n][2];\n        for(int i=0;i<n;i++){\n            scores[i][1] = n;\n            queue.offer(i);\n        }\n        \n        Stack<Integer> stack = new Stack<>();\n        stack.push(-1);\n        for(int i=0;i<n;i++){\n            while(stack.size()>1&&isPrime[nums.get(stack.peek())]<isPrime[nums.get(i)]){\n                scores[stack.pop()][1]=i;\n            }\n            scores[i][0] = stack.peek();\n            stack.push(i);\n        }\n        // System.out.println(Arrays.deepToString(scores));\n        int curMax = 0 ,curMaxIndex = 0, subCount = 0;\n        long ans = 1;\n        while(k>0){\n            curMaxIndex = queue.poll();\n            curMax = nums.get(curMaxIndex);\n            subCount = (curMaxIndex - scores[curMaxIndex][0])*(scores[curMaxIndex][1] - curMaxIndex);\n            if(subCount>k){\n                ans = (ans*fastPow(curMax, k))%mod;\n                // System.out.println(\"乘以\"+curMax+\"的\"+k+\"次方\");\n                k = 0;\n            }else{\n                ans = (ans*fastPow(curMax, subCount))%mod;\n                // System.out.println(\"乘以\"+curMax+\"的\"+subCount+\"次方\");\n                k -= subCount;\n            }\n        }\n        return (int)ans;\n    }\n\n    public long fastPow(long x,int y){\n        long ans = 1;\n        while(y>0){\n            if((y&1)==1){\n                ans = (x*ans)%mod;\n            }\n            x = (x*x)%mod;\n            y >>= 1;\n        }\n        return ans;\n    }\n}\n```\n\n","source":"_posts/一道缝合怪算法题的总结-LeetCode2818.md","raw":"---\ntitle: 一道缝合怪算法题的总结-LeetCode2818\ndate: 2024-04-07 19:40:11\ntags:\n - 素数\n - 单调栈\n - 快速幂\n - 贪心\ncategories: 算法\n---\n\n[2818.操作使得分最大]([2818. 操作使得分最大 - 力扣（LeetCode）](https://leetcode.cn/problems/apply-operations-to-maximize-score/description/))\n\n## 题目描述\n\n给你一个长度为 `n` 的正整数数组 `nums` 和一个整数 `k` 。\n\n一开始，你的分数为 `1` 。你可以进行以下操作至多 `k` 次，目标是使你的分数最大：\n\n- 选择一个之前没有选过的 **非空** 子数组 `nums[l, ..., r]` 。\n- 从 `nums[l, ..., r]` 里面选择一个 **质数分数** 最高的元素 `x` 。如果多个元素质数分数相同且最高，选择下标最小的一个。\n- 将你的分数乘以 `x` 。\n\n`nums[l, ..., r]` 表示 `nums` 中起始下标为 `l` ，结束下标为 `r` 的子数组，两个端点都包含。\n\n一个整数的 **质数分数** 等于 `x` 不同质因子的数目。比方说， `300` 的质数分数为 `3` ，因为 `300 = 2 * 2 * 3 * 5 * 5` 。\n\n请你返回进行至多 `k` 次操作后，可以得到的 **最大分数** 。\n\n由于答案可能很大，请你将结果对 `109 + 7` 取余后返回。\n\n**提示：**\n\n- `1 <= nums.length == n <= 10^5`\n- `1 <= nums[i] <= 10^5`\n- `1 <= k <= min(n * (n + 1) / 2, 10^9)`\n\n## 问题分解\n\n1. 题目最终目的是使得分最大，而得分是通过乘以数组元素实现的，也就是要尽可能乘以更大的元素，考虑维护一个大根堆\n2. 一个元素可以被选择多少次由两个指标决定：一是和左右两边质数分数的大小有关，这决定了选中该元素的子数组最多可以向两侧扩张多少，考虑维护一个单调栈；二是和非空子数组之前是否被选择过有关，涉及到了数学的计数原理\n3. 质数分数的大小计算可以先维护一个质数表\n\n## 质数表的预处理\n\n\n\n​\t判断一个数是否为质数，通常采用的是从2遍历到根号n，这样做的时间复杂度为$$O(\\sqrt{n})$$，还可以通过提前维护素数表来实现：\n\n>  题目中数组元素的最大值为100000，可以提前创建一个boolean型数组`boolean[] isPrime = new boolean[100001];`，并将所有元素置为`true`，按照以下方法处理：\n>\n> 1. 从2开始向100000/2遍历，每次遍历到`isPrime[i]`时，将`i`的倍数`isPrime[i*j] ,j=2,...n`置为`false`表示`i*j`是合数\n> 2. 若当遍历到`isPrime[i]`时，`isPrime[i]`已经为`false`，代表`i`是合数 , 且它的倍数一定在之前已经被遍历过 , 所以直接跳过即可\n\n经过这一步骤，数组`isPrime`已经可以判断数`i`是否为质数\n\n\n\n但本题不仅要判断是否为质数 , 还需要求该数的所有质因数的数量，所以对预处理方法稍作修改：\n\n> 创建一个int型数组`int[] scores = new int[100001]`，存放每个数的质数分数，基于上述方法做如下修改：\n>\n> 1. 遍历到`scores[i]`时，将`i`的倍数`scores[i*j] ,j=1，2,...n`加一\n> 2. 遍历到`scores[i]`时，如果`scores[i]==0`代表之前从来没有被访问过，也就是`i`是素数，但考虑到素数本身也是它的质数分数，所以要将`scores[i]++`，这也就是为什么这里`j=1，2,...n`而上面的布尔型数组的`j=2,...n`\n\n经过这一步骤，数组`scores`已经存放各个数字的质数分数\n\n## 单调栈\n\n​\t由于要判断数组元素左右两侧距离它最近的质数分数大于等于它的数（由于题目要求如果多个元素质数分数相同且最高，选择下标最小的一个，所以左侧是大于等于，右侧是大于），所以需要维护两个数组`int[] left,right`，这两个数组的初始化由单调栈完成\n\n​\t我最开始的思路是：\n\n1. **从左往右 **遍历数组`nums`，按照质数分数 **递减** 维护一个单调栈，栈中存数组下标，`left[i]`的值等于栈中第一个质量分数大于等于`nums[i]`的下标\n2. 再 **从右往左** 遍历数组`nums`，按照按照质数分数 **递增** 维护一个单调栈，`right[i]`的值等于栈中第一个质量分数大于等于`nums[i]`的下标\n\n​\t代码如下：\n\n```java\n\t\tint[][] scores = new int[n][2];//这里scores第一列是left数组，第二列是right数组\n        Stack<Integer> stack = new Stack<>();\n        for(int i=0;i<n;i++){\n            while(!stack.isEmpty()&&isPrime[nums.get(stack.peek())]<isPrime[nums.get(i)]){\n                stack.pop();\n            }\n            scores[i][0] = stack.isEmpty()?-1:stack.peek();\n            stack.add(i);\n        }\n        stack.clear();\n        for(int i=n-1;i>=0;i--){\n            while(!stack.isEmpty()&&isPrime[nums.get(stack.peek())]<=isPrime[nums.get(i)]){\n                stack.pop();\n            }\n            scores[i][1] = stack.isEmpty()?n-1:isPrime[nums.get(stack.peek())]==isPrime[nums.get(i)]stack.peek():stack.peek()-1;\n            stack.add(i);\n        }\n```\n\n\n\n但是看了灵神的题解发现一次遍历就可以做到（灵神是真的强），思路是这样的：\n\n1. `right`数组所有值初始化为`nums`长度\n2. 栈中放一个初始元素`-1`，方便数组第一个元素\n3. **从左往右** 遍历数组`nums`， 由于栈中存放的是数组下标，因此在因为栈顶元素的质数分数小于当前元素`nums[i`]时，可以直接把弹出的数组下标的`right[stack.pop()] = i`位置幅值当前遍历的下标，当前位置即是栈中元素右侧的第一个更大的元素\n4. 栈顶质量分数小的下标弹出后，栈顶元素即是当前元素`nums[i]`左侧第一个质数分数大于等于当前元素的下标，令`left[i]=stack.peek()`即可\n5. 把下标`i`放入栈中\n\n代码如下：\n\n```java\n\t\tint[][] scores = new int[n][2];\n        for(int i=0;i<n;i++){\n            scores[i][1] = n;\n        }\t\t\n\t\tStack<Integer> stack = new Stack<>();\n        stack.push(-1);\n        for(int i=0;i<n;i++){\n            while(stack.size()>1&&isPrime[nums.get(stack.peek())]<isPrime[nums.get(i)]){\n                scores[stack.pop()][1]=i;\n            }\n            scores[i][0] = stack.peek();\n            stack.push(i);\n        }\n```\n\n## 快速幂\n\n快速幂算法比较经典了，直接贴代码：\n\n```java\npublic long fastPow(long x,int y){\n        long ans = 1;\n        while(y>0){\n            if((y&1)==1){\n                ans = (x*ans)%mod;\n            }\n            x = (x*x)%mod;\n            y >>= 1;\n        }\n        return ans;\n    }\n```\n\n## 其他\n\n\n\n大根堆没什么好说的，创建一个优先队列指定，按照质数分数逆序存数组下标就行\n\n不重复的子数组通过计数原理实现\n\n对于每个元素`nums[i]`，只要子数组的下界在`(left[i],i]`之间，上界在`[i,right[i])`之间，那么这个子数组最后选择的元素一定是`nums[i]`，一共有`(i-left[i])*(right[i]-i)`个这样的子数组；并且对于整个数组`nums`，选中每个元素的子数组集合之间一定没有交集（因为每个子数组只会选中一个元素），所以可以确定子数组之前一定是没有选择过的。\n\n那么在`k`不为0时，从大根堆里弹出下标`i`，对于`nums[i]`，它对结果产生的贡献就是乘以`pow(nums[i], Math.min(k,(i-left[i])*(right[i]-i)))`，循环直到`k`为0即可。\n\n## 代码\n\n最终整道题的代码如下：\n\n用时击败28.57%的java用户，不高，但时间复杂度依然是`O(nlogn)`：\n\n```java\nclass Solution {\n    int mod = 1000000007;\n\n    static int[] isPrime = new int[100001];\n\n    static{\n        for(int i=2;i<isPrime.length;i++){\n            if(isPrime[i]==0){\n                for(int j=1;j*i<isPrime.length;j++){\n                    isPrime[i*j]++;\n                }\n            }\n        }\n    }\n\n    public int maximumScore(List<Integer> nums, int k) {\n        int n = nums.size();\n        Queue<Integer> queue = new PriorityQueue<>(new Comparator<Integer>(){\n            @Override\n            public int compare(Integer o1, Integer o2){\n                return nums.get(o2)-nums.get(o1);\n            }\n        });\n        int[][] scores = new int[n][2];\n        for(int i=0;i<n;i++){\n            scores[i][1] = n;\n            queue.offer(i);\n        }\n        \n        Stack<Integer> stack = new Stack<>();\n        stack.push(-1);\n        for(int i=0;i<n;i++){\n            while(stack.size()>1&&isPrime[nums.get(stack.peek())]<isPrime[nums.get(i)]){\n                scores[stack.pop()][1]=i;\n            }\n            scores[i][0] = stack.peek();\n            stack.push(i);\n        }\n        // System.out.println(Arrays.deepToString(scores));\n        int curMax = 0 ,curMaxIndex = 0, subCount = 0;\n        long ans = 1;\n        while(k>0){\n            curMaxIndex = queue.poll();\n            curMax = nums.get(curMaxIndex);\n            subCount = (curMaxIndex - scores[curMaxIndex][0])*(scores[curMaxIndex][1] - curMaxIndex);\n            if(subCount>k){\n                ans = (ans*fastPow(curMax, k))%mod;\n                // System.out.println(\"乘以\"+curMax+\"的\"+k+\"次方\");\n                k = 0;\n            }else{\n                ans = (ans*fastPow(curMax, subCount))%mod;\n                // System.out.println(\"乘以\"+curMax+\"的\"+subCount+\"次方\");\n                k -= subCount;\n            }\n        }\n        return (int)ans;\n    }\n\n    public long fastPow(long x,int y){\n        long ans = 1;\n        while(y>0){\n            if((y&1)==1){\n                ans = (x*ans)%mod;\n            }\n            x = (x*x)%mod;\n            y >>= 1;\n        }\n        return ans;\n    }\n}\n```\n\n","slug":"一道缝合怪算法题的总结-LeetCode2818","published":1,"updated":"2024-04-09T10:59:25.135Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clusa3wno000h2s7eb9fg0wze","content":"<p>[2818.操作使得分最大](<a href=\"https://leetcode.cn/problems/apply-operations-to-maximize-score/description/\">2818. 操作使得分最大 - 力扣（LeetCode）</a>)</p>\n<h2 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h2><p>给你一个长度为 <code>n</code> 的正整数数组 <code>nums</code> 和一个整数 <code>k</code> 。</p>\n<p>一开始，你的分数为 <code>1</code> 。你可以进行以下操作至多 <code>k</code> 次，目标是使你的分数最大：</p>\n<ul>\n<li>选择一个之前没有选过的 <strong>非空</strong> 子数组 <code>nums[l, ..., r]</code> 。</li>\n<li>从 <code>nums[l, ..., r]</code> 里面选择一个 <strong>质数分数</strong> 最高的元素 <code>x</code> 。如果多个元素质数分数相同且最高，选择下标最小的一个。</li>\n<li>将你的分数乘以 <code>x</code> 。</li>\n</ul>\n<p><code>nums[l, ..., r]</code> 表示 <code>nums</code> 中起始下标为 <code>l</code> ，结束下标为 <code>r</code> 的子数组，两个端点都包含。</p>\n<p>一个整数的 <strong>质数分数</strong> 等于 <code>x</code> 不同质因子的数目。比方说， <code>300</code> 的质数分数为 <code>3</code> ，因为 <code>300 = 2 * 2 * 3 * 5 * 5</code> 。</p>\n<p>请你返回进行至多 <code>k</code> 次操作后，可以得到的 <strong>最大分数</strong> 。</p>\n<p>由于答案可能很大，请你将结果对 <code>109 + 7</code> 取余后返回。</p>\n<p><strong>提示：</strong></p>\n<ul>\n<li><code>1 &lt;= nums.length == n &lt;= 10^5</code></li>\n<li><code>1 &lt;= nums[i] &lt;= 10^5</code></li>\n<li><code>1 &lt;= k &lt;= min(n * (n + 1) / 2, 10^9)</code></li>\n</ul>\n<h2 id=\"问题分解\"><a href=\"#问题分解\" class=\"headerlink\" title=\"问题分解\"></a>问题分解</h2><ol>\n<li>题目最终目的是使得分最大，而得分是通过乘以数组元素实现的，也就是要尽可能乘以更大的元素，考虑维护一个大根堆</li>\n<li>一个元素可以被选择多少次由两个指标决定：一是和左右两边质数分数的大小有关，这决定了选中该元素的子数组最多可以向两侧扩张多少，考虑维护一个单调栈；二是和非空子数组之前是否被选择过有关，涉及到了数学的计数原理</li>\n<li>质数分数的大小计算可以先维护一个质数表</li>\n</ol>\n<h2 id=\"质数表的预处理\"><a href=\"#质数表的预处理\" class=\"headerlink\" title=\"质数表的预处理\"></a>质数表的预处理</h2><p>​\t判断一个数是否为质数，通常采用的是从2遍历到根号n，这样做的时间复杂度为$$O(\\sqrt{n})$$，还可以通过提前维护素数表来实现：</p>\n<blockquote>\n<p> 题目中数组元素的最大值为100000，可以提前创建一个boolean型数组<code>boolean[] isPrime = new boolean[100001];</code>，并将所有元素置为<code>true</code>，按照以下方法处理：</p>\n<ol>\n<li>从2开始向100000&#x2F;2遍历，每次遍历到<code>isPrime[i]</code>时，将<code>i</code>的倍数<code>isPrime[i*j] ,j=2,...n</code>置为<code>false</code>表示<code>i*j</code>是合数</li>\n<li>若当遍历到<code>isPrime[i]</code>时，<code>isPrime[i]</code>已经为<code>false</code>，代表<code>i</code>是合数 , 且它的倍数一定在之前已经被遍历过 , 所以直接跳过即可</li>\n</ol>\n</blockquote>\n<p>经过这一步骤，数组<code>isPrime</code>已经可以判断数<code>i</code>是否为质数</p>\n<p>但本题不仅要判断是否为质数 , 还需要求该数的所有质因数的数量，所以对预处理方法稍作修改：</p>\n<blockquote>\n<p>创建一个int型数组<code>int[] scores = new int[100001]</code>，存放每个数的质数分数，基于上述方法做如下修改：</p>\n<ol>\n<li>遍历到<code>scores[i]</code>时，将<code>i</code>的倍数<code>scores[i*j] ,j=1，2,...n</code>加一</li>\n<li>遍历到<code>scores[i]</code>时，如果<code>scores[i]==0</code>代表之前从来没有被访问过，也就是<code>i</code>是素数，但考虑到素数本身也是它的质数分数，所以要将<code>scores[i]++</code>，这也就是为什么这里<code>j=1，2,...n</code>而上面的布尔型数组的<code>j=2,...n</code></li>\n</ol>\n</blockquote>\n<p>经过这一步骤，数组<code>scores</code>已经存放各个数字的质数分数</p>\n<h2 id=\"单调栈\"><a href=\"#单调栈\" class=\"headerlink\" title=\"单调栈\"></a>单调栈</h2><p>​\t由于要判断数组元素左右两侧距离它最近的质数分数大于等于它的数（由于题目要求如果多个元素质数分数相同且最高，选择下标最小的一个，所以左侧是大于等于，右侧是大于），所以需要维护两个数组<code>int[] left,right</code>，这两个数组的初始化由单调栈完成</p>\n<p>​\t我最开始的思路是：</p>\n<ol>\n<li>**从左往右 **遍历数组<code>nums</code>，按照质数分数 <strong>递减</strong> 维护一个单调栈，栈中存数组下标，<code>left[i]</code>的值等于栈中第一个质量分数大于等于<code>nums[i]</code>的下标</li>\n<li>再 <strong>从右往左</strong> 遍历数组<code>nums</code>，按照按照质数分数 <strong>递增</strong> 维护一个单调栈，<code>right[i]</code>的值等于栈中第一个质量分数大于等于<code>nums[i]</code>的下标</li>\n</ol>\n<p>​\t代码如下：</p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> scores <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//这里scores第一列是left数组，第二列是right数组</span>\n      <span class=\"token class-name\">Stack</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> stack <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Stack</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>n<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n          <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>stack<span class=\"token punctuation\">.</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;&amp;</span>isPrime<span class=\"token punctuation\">[</span>nums<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>stack<span class=\"token punctuation\">.</span><span class=\"token function\">peek</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token operator\">&lt;</span>isPrime<span class=\"token punctuation\">[</span>nums<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n              stack<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          <span class=\"token punctuation\">&#125;</span>\n          scores<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> stack<span class=\"token punctuation\">.</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">?</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token operator\">:</span>stack<span class=\"token punctuation\">.</span><span class=\"token function\">peek</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          stack<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">&#125;</span>\n      stack<span class=\"token punctuation\">.</span><span class=\"token function\">clear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span>n<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">>=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n          <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>stack<span class=\"token punctuation\">.</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;&amp;</span>isPrime<span class=\"token punctuation\">[</span>nums<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>stack<span class=\"token punctuation\">.</span><span class=\"token function\">peek</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token operator\">&lt;=</span>isPrime<span class=\"token punctuation\">[</span>nums<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n              stack<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          <span class=\"token punctuation\">&#125;</span>\n          scores<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> stack<span class=\"token punctuation\">.</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">?</span>n<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token operator\">:</span>isPrime<span class=\"token punctuation\">[</span>nums<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>stack<span class=\"token punctuation\">.</span><span class=\"token function\">peek</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token operator\">==</span>isPrime<span class=\"token punctuation\">[</span>nums<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>stack<span class=\"token punctuation\">.</span><span class=\"token function\">peek</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span>stack<span class=\"token punctuation\">.</span><span class=\"token function\">peek</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n          stack<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">&#125;</span></code></pre>\n\n\n\n<p>但是看了灵神的题解发现一次遍历就可以做到（灵神是真的强），思路是这样的：</p>\n<ol>\n<li><code>right</code>数组所有值初始化为<code>nums</code>长度</li>\n<li>栈中放一个初始元素<code>-1</code>，方便数组第一个元素</li>\n<li><strong>从左往右</strong> 遍历数组<code>nums</code>， 由于栈中存放的是数组下标，因此在因为栈顶元素的质数分数小于当前元素<code>nums[i</code>]时，可以直接把弹出的数组下标的<code>right[stack.pop()] = i</code>位置幅值当前遍历的下标，当前位置即是栈中元素右侧的第一个更大的元素</li>\n<li>栈顶质量分数小的下标弹出后，栈顶元素即是当前元素<code>nums[i]</code>左侧第一个质数分数大于等于当前元素的下标，令<code>left[i]=stack.peek()</code>即可</li>\n<li>把下标<code>i</code>放入栈中</li>\n</ol>\n<p>代码如下：</p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> scores <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>n<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n          scores<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> n<span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">&#125;</span>\t\t\n<span class=\"token class-name\">Stack</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> stack <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Stack</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      stack<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>n<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n          <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>stack<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">></span><span class=\"token number\">1</span><span class=\"token operator\">&amp;&amp;</span>isPrime<span class=\"token punctuation\">[</span>nums<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>stack<span class=\"token punctuation\">.</span><span class=\"token function\">peek</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token operator\">&lt;</span>isPrime<span class=\"token punctuation\">[</span>nums<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n              scores<span class=\"token punctuation\">[</span>stack<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>i<span class=\"token punctuation\">;</span>\n          <span class=\"token punctuation\">&#125;</span>\n          scores<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> stack<span class=\"token punctuation\">.</span><span class=\"token function\">peek</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          stack<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">&#125;</span></code></pre>\n\n<h2 id=\"快速幂\"><a href=\"#快速幂\" class=\"headerlink\" title=\"快速幂\"></a>快速幂</h2><p>快速幂算法比较经典了，直接贴代码：</p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">long</span> <span class=\"token function\">fastPow</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">long</span> x<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">long</span> ans <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>y<span class=\"token operator\">></span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>y<span class=\"token operator\">&amp;</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token operator\">==</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n                ans <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>x<span class=\"token operator\">*</span>ans<span class=\"token punctuation\">)</span><span class=\"token operator\">%</span>mod<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n            x <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>x<span class=\"token operator\">*</span>x<span class=\"token punctuation\">)</span><span class=\"token operator\">%</span>mod<span class=\"token punctuation\">;</span>\n            y <span class=\"token operator\">>>=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">return</span> ans<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span></code></pre>\n\n<h2 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h2><p>大根堆没什么好说的，创建一个优先队列指定，按照质数分数逆序存数组下标就行</p>\n<p>不重复的子数组通过计数原理实现</p>\n<p>对于每个元素<code>nums[i]</code>，只要子数组的下界在<code>(left[i],i]</code>之间，上界在<code>[i,right[i])</code>之间，那么这个子数组最后选择的元素一定是<code>nums[i]</code>，一共有<code>(i-left[i])*(right[i]-i)</code>个这样的子数组；并且对于整个数组<code>nums</code>，选中每个元素的子数组集合之间一定没有交集（因为每个子数组只会选中一个元素），所以可以确定子数组之前一定是没有选择过的。</p>\n<p>那么在<code>k</code>不为0时，从大根堆里弹出下标<code>i</code>，对于<code>nums[i]</code>，它对结果产生的贡献就是乘以<code>pow(nums[i], Math.min(k,(i-left[i])*(right[i]-i)))</code>，循环直到<code>k</code>为0即可。</p>\n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><p>最终整道题的代码如下：</p>\n<p>用时击败28.57%的java用户，不高，但时间复杂度依然是<code>O(nlogn)</code>：</p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">int</span> mod <span class=\"token operator\">=</span> <span class=\"token number\">1000000007</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> isPrime <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token number\">100001</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">static</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>isPrime<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>isPrime<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">==</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>j<span class=\"token operator\">*</span>i<span class=\"token operator\">&lt;</span>isPrime<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n                    isPrime<span class=\"token punctuation\">[</span>i<span class=\"token operator\">*</span>j<span class=\"token punctuation\">]</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">maximumScore</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> nums<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> k<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">int</span> n <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Queue</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> queue <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">PriorityQueue</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Comparator</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token annotation punctuation\">@Override</span>\n            <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">compare</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Integer</span> o1<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Integer</span> o2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">return</span> nums<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>o2<span class=\"token punctuation\">)</span><span class=\"token operator\">-</span>nums<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>o1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> scores <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>n<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            scores<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> n<span class=\"token punctuation\">;</span>\n            queue<span class=\"token punctuation\">.</span><span class=\"token function\">offer</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        \n        <span class=\"token class-name\">Stack</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> stack <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Stack</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        stack<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>n<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>stack<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">></span><span class=\"token number\">1</span><span class=\"token operator\">&amp;&amp;</span>isPrime<span class=\"token punctuation\">[</span>nums<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>stack<span class=\"token punctuation\">.</span><span class=\"token function\">peek</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token operator\">&lt;</span>isPrime<span class=\"token punctuation\">[</span>nums<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n                scores<span class=\"token punctuation\">[</span>stack<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>i<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n            scores<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> stack<span class=\"token punctuation\">.</span><span class=\"token function\">peek</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            stack<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token comment\">// System.out.println(Arrays.deepToString(scores));</span>\n        <span class=\"token keyword\">int</span> curMax <span class=\"token operator\">=</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">,</span>curMaxIndex <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> subCount <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">long</span> ans <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>k<span class=\"token operator\">></span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            curMaxIndex <span class=\"token operator\">=</span> queue<span class=\"token punctuation\">.</span><span class=\"token function\">poll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            curMax <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>curMaxIndex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            subCount <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>curMaxIndex <span class=\"token operator\">-</span> scores<span class=\"token punctuation\">[</span>curMaxIndex<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>scores<span class=\"token punctuation\">[</span>curMaxIndex<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span> curMaxIndex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>subCount<span class=\"token operator\">></span>k<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n                ans <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>ans<span class=\"token operator\">*</span><span class=\"token function\">fastPow</span><span class=\"token punctuation\">(</span>curMax<span class=\"token punctuation\">,</span> k<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token operator\">%</span>mod<span class=\"token punctuation\">;</span>\n                <span class=\"token comment\">// System.out.println(\"乘以\"+curMax+\"的\"+k+\"次方\");</span>\n                k <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span>\n                ans <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>ans<span class=\"token operator\">*</span><span class=\"token function\">fastPow</span><span class=\"token punctuation\">(</span>curMax<span class=\"token punctuation\">,</span> subCount<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token operator\">%</span>mod<span class=\"token punctuation\">;</span>\n                <span class=\"token comment\">// System.out.println(\"乘以\"+curMax+\"的\"+subCount+\"次方\");</span>\n                k <span class=\"token operator\">-=</span> subCount<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span>ans<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">long</span> <span class=\"token function\">fastPow</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">long</span> x<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">long</span> ans <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>y<span class=\"token operator\">></span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>y<span class=\"token operator\">&amp;</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token operator\">==</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n                ans <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>x<span class=\"token operator\">*</span>ans<span class=\"token punctuation\">)</span><span class=\"token operator\">%</span>mod<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n            x <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>x<span class=\"token operator\">*</span>x<span class=\"token punctuation\">)</span><span class=\"token operator\">%</span>mod<span class=\"token punctuation\">;</span>\n            y <span class=\"token operator\">>>=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">return</span> ans<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n\n","site":{"data":{}},"excerpt":"","more":"<p>[2818.操作使得分最大](<a href=\"https://leetcode.cn/problems/apply-operations-to-maximize-score/description/\">2818. 操作使得分最大 - 力扣（LeetCode）</a>)</p>\n<h2 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h2><p>给你一个长度为 <code>n</code> 的正整数数组 <code>nums</code> 和一个整数 <code>k</code> 。</p>\n<p>一开始，你的分数为 <code>1</code> 。你可以进行以下操作至多 <code>k</code> 次，目标是使你的分数最大：</p>\n<ul>\n<li>选择一个之前没有选过的 <strong>非空</strong> 子数组 <code>nums[l, ..., r]</code> 。</li>\n<li>从 <code>nums[l, ..., r]</code> 里面选择一个 <strong>质数分数</strong> 最高的元素 <code>x</code> 。如果多个元素质数分数相同且最高，选择下标最小的一个。</li>\n<li>将你的分数乘以 <code>x</code> 。</li>\n</ul>\n<p><code>nums[l, ..., r]</code> 表示 <code>nums</code> 中起始下标为 <code>l</code> ，结束下标为 <code>r</code> 的子数组，两个端点都包含。</p>\n<p>一个整数的 <strong>质数分数</strong> 等于 <code>x</code> 不同质因子的数目。比方说， <code>300</code> 的质数分数为 <code>3</code> ，因为 <code>300 = 2 * 2 * 3 * 5 * 5</code> 。</p>\n<p>请你返回进行至多 <code>k</code> 次操作后，可以得到的 <strong>最大分数</strong> 。</p>\n<p>由于答案可能很大，请你将结果对 <code>109 + 7</code> 取余后返回。</p>\n<p><strong>提示：</strong></p>\n<ul>\n<li><code>1 &lt;= nums.length == n &lt;= 10^5</code></li>\n<li><code>1 &lt;= nums[i] &lt;= 10^5</code></li>\n<li><code>1 &lt;= k &lt;= min(n * (n + 1) / 2, 10^9)</code></li>\n</ul>\n<h2 id=\"问题分解\"><a href=\"#问题分解\" class=\"headerlink\" title=\"问题分解\"></a>问题分解</h2><ol>\n<li>题目最终目的是使得分最大，而得分是通过乘以数组元素实现的，也就是要尽可能乘以更大的元素，考虑维护一个大根堆</li>\n<li>一个元素可以被选择多少次由两个指标决定：一是和左右两边质数分数的大小有关，这决定了选中该元素的子数组最多可以向两侧扩张多少，考虑维护一个单调栈；二是和非空子数组之前是否被选择过有关，涉及到了数学的计数原理</li>\n<li>质数分数的大小计算可以先维护一个质数表</li>\n</ol>\n<h2 id=\"质数表的预处理\"><a href=\"#质数表的预处理\" class=\"headerlink\" title=\"质数表的预处理\"></a>质数表的预处理</h2><p>​\t判断一个数是否为质数，通常采用的是从2遍历到根号n，这样做的时间复杂度为$$O(\\sqrt{n})$$，还可以通过提前维护素数表来实现：</p>\n<blockquote>\n<p> 题目中数组元素的最大值为100000，可以提前创建一个boolean型数组<code>boolean[] isPrime = new boolean[100001];</code>，并将所有元素置为<code>true</code>，按照以下方法处理：</p>\n<ol>\n<li>从2开始向100000&#x2F;2遍历，每次遍历到<code>isPrime[i]</code>时，将<code>i</code>的倍数<code>isPrime[i*j] ,j=2,...n</code>置为<code>false</code>表示<code>i*j</code>是合数</li>\n<li>若当遍历到<code>isPrime[i]</code>时，<code>isPrime[i]</code>已经为<code>false</code>，代表<code>i</code>是合数 , 且它的倍数一定在之前已经被遍历过 , 所以直接跳过即可</li>\n</ol>\n</blockquote>\n<p>经过这一步骤，数组<code>isPrime</code>已经可以判断数<code>i</code>是否为质数</p>\n<p>但本题不仅要判断是否为质数 , 还需要求该数的所有质因数的数量，所以对预处理方法稍作修改：</p>\n<blockquote>\n<p>创建一个int型数组<code>int[] scores = new int[100001]</code>，存放每个数的质数分数，基于上述方法做如下修改：</p>\n<ol>\n<li>遍历到<code>scores[i]</code>时，将<code>i</code>的倍数<code>scores[i*j] ,j=1，2,...n</code>加一</li>\n<li>遍历到<code>scores[i]</code>时，如果<code>scores[i]==0</code>代表之前从来没有被访问过，也就是<code>i</code>是素数，但考虑到素数本身也是它的质数分数，所以要将<code>scores[i]++</code>，这也就是为什么这里<code>j=1，2,...n</code>而上面的布尔型数组的<code>j=2,...n</code></li>\n</ol>\n</blockquote>\n<p>经过这一步骤，数组<code>scores</code>已经存放各个数字的质数分数</p>\n<h2 id=\"单调栈\"><a href=\"#单调栈\" class=\"headerlink\" title=\"单调栈\"></a>单调栈</h2><p>​\t由于要判断数组元素左右两侧距离它最近的质数分数大于等于它的数（由于题目要求如果多个元素质数分数相同且最高，选择下标最小的一个，所以左侧是大于等于，右侧是大于），所以需要维护两个数组<code>int[] left,right</code>，这两个数组的初始化由单调栈完成</p>\n<p>​\t我最开始的思路是：</p>\n<ol>\n<li>**从左往右 **遍历数组<code>nums</code>，按照质数分数 <strong>递减</strong> 维护一个单调栈，栈中存数组下标，<code>left[i]</code>的值等于栈中第一个质量分数大于等于<code>nums[i]</code>的下标</li>\n<li>再 <strong>从右往左</strong> 遍历数组<code>nums</code>，按照按照质数分数 <strong>递增</strong> 维护一个单调栈，<code>right[i]</code>的值等于栈中第一个质量分数大于等于<code>nums[i]</code>的下标</li>\n</ol>\n<p>​\t代码如下：</p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> scores <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//这里scores第一列是left数组，第二列是right数组</span>\n      <span class=\"token class-name\">Stack</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> stack <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Stack</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>n<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n          <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>stack<span class=\"token punctuation\">.</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;&amp;</span>isPrime<span class=\"token punctuation\">[</span>nums<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>stack<span class=\"token punctuation\">.</span><span class=\"token function\">peek</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token operator\">&lt;</span>isPrime<span class=\"token punctuation\">[</span>nums<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n              stack<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          <span class=\"token punctuation\">&#125;</span>\n          scores<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> stack<span class=\"token punctuation\">.</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">?</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token operator\">:</span>stack<span class=\"token punctuation\">.</span><span class=\"token function\">peek</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          stack<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">&#125;</span>\n      stack<span class=\"token punctuation\">.</span><span class=\"token function\">clear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span>n<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">>=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n          <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>stack<span class=\"token punctuation\">.</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;&amp;</span>isPrime<span class=\"token punctuation\">[</span>nums<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>stack<span class=\"token punctuation\">.</span><span class=\"token function\">peek</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token operator\">&lt;=</span>isPrime<span class=\"token punctuation\">[</span>nums<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n              stack<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          <span class=\"token punctuation\">&#125;</span>\n          scores<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> stack<span class=\"token punctuation\">.</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">?</span>n<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token operator\">:</span>isPrime<span class=\"token punctuation\">[</span>nums<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>stack<span class=\"token punctuation\">.</span><span class=\"token function\">peek</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token operator\">==</span>isPrime<span class=\"token punctuation\">[</span>nums<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>stack<span class=\"token punctuation\">.</span><span class=\"token function\">peek</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span>stack<span class=\"token punctuation\">.</span><span class=\"token function\">peek</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n          stack<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">&#125;</span></code></pre>\n\n\n\n<p>但是看了灵神的题解发现一次遍历就可以做到（灵神是真的强），思路是这样的：</p>\n<ol>\n<li><code>right</code>数组所有值初始化为<code>nums</code>长度</li>\n<li>栈中放一个初始元素<code>-1</code>，方便数组第一个元素</li>\n<li><strong>从左往右</strong> 遍历数组<code>nums</code>， 由于栈中存放的是数组下标，因此在因为栈顶元素的质数分数小于当前元素<code>nums[i</code>]时，可以直接把弹出的数组下标的<code>right[stack.pop()] = i</code>位置幅值当前遍历的下标，当前位置即是栈中元素右侧的第一个更大的元素</li>\n<li>栈顶质量分数小的下标弹出后，栈顶元素即是当前元素<code>nums[i]</code>左侧第一个质数分数大于等于当前元素的下标，令<code>left[i]=stack.peek()</code>即可</li>\n<li>把下标<code>i</code>放入栈中</li>\n</ol>\n<p>代码如下：</p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> scores <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>n<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n          scores<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> n<span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">&#125;</span>\t\t\n<span class=\"token class-name\">Stack</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> stack <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Stack</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      stack<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>n<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n          <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>stack<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">></span><span class=\"token number\">1</span><span class=\"token operator\">&amp;&amp;</span>isPrime<span class=\"token punctuation\">[</span>nums<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>stack<span class=\"token punctuation\">.</span><span class=\"token function\">peek</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token operator\">&lt;</span>isPrime<span class=\"token punctuation\">[</span>nums<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n              scores<span class=\"token punctuation\">[</span>stack<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>i<span class=\"token punctuation\">;</span>\n          <span class=\"token punctuation\">&#125;</span>\n          scores<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> stack<span class=\"token punctuation\">.</span><span class=\"token function\">peek</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          stack<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">&#125;</span></code></pre>\n\n<h2 id=\"快速幂\"><a href=\"#快速幂\" class=\"headerlink\" title=\"快速幂\"></a>快速幂</h2><p>快速幂算法比较经典了，直接贴代码：</p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">long</span> <span class=\"token function\">fastPow</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">long</span> x<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">long</span> ans <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>y<span class=\"token operator\">></span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>y<span class=\"token operator\">&amp;</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token operator\">==</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n                ans <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>x<span class=\"token operator\">*</span>ans<span class=\"token punctuation\">)</span><span class=\"token operator\">%</span>mod<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n            x <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>x<span class=\"token operator\">*</span>x<span class=\"token punctuation\">)</span><span class=\"token operator\">%</span>mod<span class=\"token punctuation\">;</span>\n            y <span class=\"token operator\">>>=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">return</span> ans<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span></code></pre>\n\n<h2 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h2><p>大根堆没什么好说的，创建一个优先队列指定，按照质数分数逆序存数组下标就行</p>\n<p>不重复的子数组通过计数原理实现</p>\n<p>对于每个元素<code>nums[i]</code>，只要子数组的下界在<code>(left[i],i]</code>之间，上界在<code>[i,right[i])</code>之间，那么这个子数组最后选择的元素一定是<code>nums[i]</code>，一共有<code>(i-left[i])*(right[i]-i)</code>个这样的子数组；并且对于整个数组<code>nums</code>，选中每个元素的子数组集合之间一定没有交集（因为每个子数组只会选中一个元素），所以可以确定子数组之前一定是没有选择过的。</p>\n<p>那么在<code>k</code>不为0时，从大根堆里弹出下标<code>i</code>，对于<code>nums[i]</code>，它对结果产生的贡献就是乘以<code>pow(nums[i], Math.min(k,(i-left[i])*(right[i]-i)))</code>，循环直到<code>k</code>为0即可。</p>\n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><p>最终整道题的代码如下：</p>\n<p>用时击败28.57%的java用户，不高，但时间复杂度依然是<code>O(nlogn)</code>：</p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">int</span> mod <span class=\"token operator\">=</span> <span class=\"token number\">1000000007</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> isPrime <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token number\">100001</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">static</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>isPrime<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>isPrime<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">==</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>j<span class=\"token operator\">*</span>i<span class=\"token operator\">&lt;</span>isPrime<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n                    isPrime<span class=\"token punctuation\">[</span>i<span class=\"token operator\">*</span>j<span class=\"token punctuation\">]</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">maximumScore</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> nums<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> k<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">int</span> n <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Queue</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> queue <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">PriorityQueue</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Comparator</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token annotation punctuation\">@Override</span>\n            <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">compare</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Integer</span> o1<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Integer</span> o2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">return</span> nums<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>o2<span class=\"token punctuation\">)</span><span class=\"token operator\">-</span>nums<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>o1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> scores <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>n<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            scores<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> n<span class=\"token punctuation\">;</span>\n            queue<span class=\"token punctuation\">.</span><span class=\"token function\">offer</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        \n        <span class=\"token class-name\">Stack</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> stack <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Stack</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        stack<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>n<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>stack<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">></span><span class=\"token number\">1</span><span class=\"token operator\">&amp;&amp;</span>isPrime<span class=\"token punctuation\">[</span>nums<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>stack<span class=\"token punctuation\">.</span><span class=\"token function\">peek</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token operator\">&lt;</span>isPrime<span class=\"token punctuation\">[</span>nums<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n                scores<span class=\"token punctuation\">[</span>stack<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>i<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n            scores<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> stack<span class=\"token punctuation\">.</span><span class=\"token function\">peek</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            stack<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token comment\">// System.out.println(Arrays.deepToString(scores));</span>\n        <span class=\"token keyword\">int</span> curMax <span class=\"token operator\">=</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">,</span>curMaxIndex <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> subCount <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">long</span> ans <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>k<span class=\"token operator\">></span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            curMaxIndex <span class=\"token operator\">=</span> queue<span class=\"token punctuation\">.</span><span class=\"token function\">poll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            curMax <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>curMaxIndex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            subCount <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>curMaxIndex <span class=\"token operator\">-</span> scores<span class=\"token punctuation\">[</span>curMaxIndex<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>scores<span class=\"token punctuation\">[</span>curMaxIndex<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span> curMaxIndex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>subCount<span class=\"token operator\">></span>k<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n                ans <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>ans<span class=\"token operator\">*</span><span class=\"token function\">fastPow</span><span class=\"token punctuation\">(</span>curMax<span class=\"token punctuation\">,</span> k<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token operator\">%</span>mod<span class=\"token punctuation\">;</span>\n                <span class=\"token comment\">// System.out.println(\"乘以\"+curMax+\"的\"+k+\"次方\");</span>\n                k <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span>\n                ans <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>ans<span class=\"token operator\">*</span><span class=\"token function\">fastPow</span><span class=\"token punctuation\">(</span>curMax<span class=\"token punctuation\">,</span> subCount<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token operator\">%</span>mod<span class=\"token punctuation\">;</span>\n                <span class=\"token comment\">// System.out.println(\"乘以\"+curMax+\"的\"+subCount+\"次方\");</span>\n                k <span class=\"token operator\">-=</span> subCount<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span>ans<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">long</span> <span class=\"token function\">fastPow</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">long</span> x<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">long</span> ans <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>y<span class=\"token operator\">></span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>y<span class=\"token operator\">&amp;</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token operator\">==</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n                ans <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>x<span class=\"token operator\">*</span>ans<span class=\"token punctuation\">)</span><span class=\"token operator\">%</span>mod<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n            x <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>x<span class=\"token operator\">*</span>x<span class=\"token punctuation\">)</span><span class=\"token operator\">%</span>mod<span class=\"token punctuation\">;</span>\n            y <span class=\"token operator\">>>=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">return</span> ans<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n\n"},{"title":"ubuntu安装mysql8.0流程记录","date":"2023-05-08T05:56:05.000Z","_content":"# ubuntu安装mysql8.0流程记录\n先切换到root用户下：\n```\nsudo su\n```\n\n本文档中使用的操作系统是ubuntu20.04，默认使用apt下载mysql默认版本可能是mysql5，所以先去官网<https://dev.mysql.com/downloads/mysql/>下载mysql8的源：\n![img](./mysql8安装1.png)\n![img](./mysql8安装2.png)\n我们将下载到的```mysql-apt-config_0.8.24-1_all.deb```文件放到用户主目录下，执行下面的命令：\n```\ndpkg -i mysql-apt-config_0.8.24-1_all.deb\n```\n会出现下面的界面，选择```mysql server -> mysql-8.0 -> ok```\n![img](./mysql8安装3.png)\n之后我们使用下面的命令安装mysql：s\n```ss\napt-get upgrade\napt-get install mysql-server\n```\n安装过程中会让你设置初始密码(如果没有这一步，看下面)：\n![img](./mysql8安装4.png)\n若是没出错就已经安装好了，可以尝试登录一下：\n```\nmysql -u root -p\n```\n输入刚才的初始密码即可。\n![img](./mysql8安装5.png)\n\n## 没有初始密码的情况\n这种情况我遇见很多次了，不知道原因是什么\n但是如果没有让你设置初始密码，那么理论上第一次登录你输入什么密码都会登录成功，这也是给你修改密码的机会。\n## 修改密码\n修改密码操作如下：\n```\nmysql> use mysql;\nmysql> alter user 'root'@'localhost' identified by '你的新密码';\nmysql> flush privileges;\n```\n然后退出数据库重新登录，输入你刚才设置的密码，即可登录成功。\n\n\n**登录失败有如下可能性：**\n> 1. 你的密码输入错误，谁是小丑我不说\n> 2. 如果你登录时没有加sudo，试着使用sudo进行登录。如果使用sudo才可以登录成功，那么其他连接数据库的接口，比如jdbc，大概率是无法连接数据库的，这种情况看下一节：**远程访问**\n\n如果你比上面说的还要小丑：密码记不住了，可以用如下两种方法之一来登录mysql：\n![小丑竟在我身边](./小丑.png)\n### 1.默认账户登录\nmysql会创建一个默认账户，账户密码存放在 **/etc/mysql/debian.cnf**文件内：\n```\nsudo cat /etc/mysql/debian.cnf\n# 输出如下：\n# Automatically generated for Debian scripts. DO NOT TOUCH!\n[client]\nhost     = localhost\nuser     = debian-sys-maint  #用户名\npassword = UXuglBQfbMeF4aEu  #密码，这个密码每次安装都不一样，不要直接复制我的\nsocket   = /var/run/mysqld/mysqld.sock\n[mysql_upgrade]\nhost     = localhost\nuser     = debian-sys-maint\npassword = UXuglBQfbMeF4aEu\nsocket   = /var/run/mysqld/mysqld.sock\n```\n按照这个用户名密码登录：\n```\nmysql -u debian-sys-maint -p UXuglBQfbMeF4aEu\n```\n\n之后按照上面的方法改密码即可。\n\n### 2. 免密登录\n在```/etc/mysql/mysql.conf.d/mysqld.cnf```文件的最后一行添加：```skip-grant-tables```\n重启数据库：\n```\nsystemctl restart mysql\n```\n再次登录数据库，随便输入一个密码就可。\n修改完密码之后，把```/etc/mysql/mysql.conf.d/mysqld.cnf```还原，再次重启数据库即可。\n\n## 远程访问\n防火墙这里先不提，需要提前配置好防火墙，开放端口。\n远程访问mysql至少需要满足两个条件：\n### 1.配置用户允许访问的ip地址\nmysql8默认只有本机可以访问，如果需要从其他机器远程访问数据库，需要进行配置。\n登录数据库，查看权限表：\n```\nmysql -u root -p\nmysql> use mysql;\nmysql> select user,host from user where user='root';\n```\n会查询到如下结果：\n```\n+------+-----------------+\n| user | host            |\n+------+-----------------+\n|root  | localhost       |\n+------+-----------------+\n1 row in set (0.00sec)\n```\n这里可以看到root用户的host字段是localhost，代表root用户只有本机可以访问。把它改成%（代表所有ip地址）：\n```\nupdate user set host = '%' where user ='root';\nflush privileges;\n```\n### 2.若只有sudo才可以登录成功\n需要修改一下用户的认证方式为```mysql_native_password```\n运行如下命令：\n```\nmysql> use mysql;\nmysql> alter user 'root'@'%' identified with mysql_native_password\nmysql> flush privileges;\n```","source":"_posts/ubuntu安装mysql8-0流程记录.md","raw":"---\ntitle: ubuntu安装mysql8.0流程记录\ndate: 2023-05-08 13:56:05\ntags:\n  - mysql\n  - ubuntu\ncategories: mysql\n---\n# ubuntu安装mysql8.0流程记录\n先切换到root用户下：\n```\nsudo su\n```\n\n本文档中使用的操作系统是ubuntu20.04，默认使用apt下载mysql默认版本可能是mysql5，所以先去官网<https://dev.mysql.com/downloads/mysql/>下载mysql8的源：\n![img](./mysql8安装1.png)\n![img](./mysql8安装2.png)\n我们将下载到的```mysql-apt-config_0.8.24-1_all.deb```文件放到用户主目录下，执行下面的命令：\n```\ndpkg -i mysql-apt-config_0.8.24-1_all.deb\n```\n会出现下面的界面，选择```mysql server -> mysql-8.0 -> ok```\n![img](./mysql8安装3.png)\n之后我们使用下面的命令安装mysql：s\n```ss\napt-get upgrade\napt-get install mysql-server\n```\n安装过程中会让你设置初始密码(如果没有这一步，看下面)：\n![img](./mysql8安装4.png)\n若是没出错就已经安装好了，可以尝试登录一下：\n```\nmysql -u root -p\n```\n输入刚才的初始密码即可。\n![img](./mysql8安装5.png)\n\n## 没有初始密码的情况\n这种情况我遇见很多次了，不知道原因是什么\n但是如果没有让你设置初始密码，那么理论上第一次登录你输入什么密码都会登录成功，这也是给你修改密码的机会。\n## 修改密码\n修改密码操作如下：\n```\nmysql> use mysql;\nmysql> alter user 'root'@'localhost' identified by '你的新密码';\nmysql> flush privileges;\n```\n然后退出数据库重新登录，输入你刚才设置的密码，即可登录成功。\n\n\n**登录失败有如下可能性：**\n> 1. 你的密码输入错误，谁是小丑我不说\n> 2. 如果你登录时没有加sudo，试着使用sudo进行登录。如果使用sudo才可以登录成功，那么其他连接数据库的接口，比如jdbc，大概率是无法连接数据库的，这种情况看下一节：**远程访问**\n\n如果你比上面说的还要小丑：密码记不住了，可以用如下两种方法之一来登录mysql：\n![小丑竟在我身边](./小丑.png)\n### 1.默认账户登录\nmysql会创建一个默认账户，账户密码存放在 **/etc/mysql/debian.cnf**文件内：\n```\nsudo cat /etc/mysql/debian.cnf\n# 输出如下：\n# Automatically generated for Debian scripts. DO NOT TOUCH!\n[client]\nhost     = localhost\nuser     = debian-sys-maint  #用户名\npassword = UXuglBQfbMeF4aEu  #密码，这个密码每次安装都不一样，不要直接复制我的\nsocket   = /var/run/mysqld/mysqld.sock\n[mysql_upgrade]\nhost     = localhost\nuser     = debian-sys-maint\npassword = UXuglBQfbMeF4aEu\nsocket   = /var/run/mysqld/mysqld.sock\n```\n按照这个用户名密码登录：\n```\nmysql -u debian-sys-maint -p UXuglBQfbMeF4aEu\n```\n\n之后按照上面的方法改密码即可。\n\n### 2. 免密登录\n在```/etc/mysql/mysql.conf.d/mysqld.cnf```文件的最后一行添加：```skip-grant-tables```\n重启数据库：\n```\nsystemctl restart mysql\n```\n再次登录数据库，随便输入一个密码就可。\n修改完密码之后，把```/etc/mysql/mysql.conf.d/mysqld.cnf```还原，再次重启数据库即可。\n\n## 远程访问\n防火墙这里先不提，需要提前配置好防火墙，开放端口。\n远程访问mysql至少需要满足两个条件：\n### 1.配置用户允许访问的ip地址\nmysql8默认只有本机可以访问，如果需要从其他机器远程访问数据库，需要进行配置。\n登录数据库，查看权限表：\n```\nmysql -u root -p\nmysql> use mysql;\nmysql> select user,host from user where user='root';\n```\n会查询到如下结果：\n```\n+------+-----------------+\n| user | host            |\n+------+-----------------+\n|root  | localhost       |\n+------+-----------------+\n1 row in set (0.00sec)\n```\n这里可以看到root用户的host字段是localhost，代表root用户只有本机可以访问。把它改成%（代表所有ip地址）：\n```\nupdate user set host = '%' where user ='root';\nflush privileges;\n```\n### 2.若只有sudo才可以登录成功\n需要修改一下用户的认证方式为```mysql_native_password```\n运行如下命令：\n```\nmysql> use mysql;\nmysql> alter user 'root'@'%' identified with mysql_native_password\nmysql> flush privileges;\n```","slug":"ubuntu安装mysql8-0流程记录","published":1,"updated":"2024-04-09T10:59:25.120Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clusa3wnp000j2s7e3secgcw2","content":"<h1 id=\"ubuntu安装mysql8-0流程记录\"><a href=\"#ubuntu安装mysql8-0流程记录\" class=\"headerlink\" title=\"ubuntu安装mysql8.0流程记录\"></a>ubuntu安装mysql8.0流程记录</h1><p>先切换到root用户下：</p>\n<pre class=\"language-none\"><code class=\"language-none\">sudo su</code></pre>\n\n<p>本文档中使用的操作系统是ubuntu20.04，默认使用apt下载mysql默认版本可能是mysql5，所以先去官网<a href=\"https://dev.mysql.com/downloads/mysql/\">https://dev.mysql.com/downloads/mysql/</a>下载mysql8的源：<br><img src=\"/2023/05/08/ubuntu-an-zhuang-mysql8-0-liu-cheng-ji-lu/mysql8%E5%AE%89%E8%A3%851.png\" alt=\"img\"><br><img src=\"/2023/05/08/ubuntu-an-zhuang-mysql8-0-liu-cheng-ji-lu/mysql8%E5%AE%89%E8%A3%852.png\" alt=\"img\"><br>我们将下载到的<code>mysql-apt-config_0.8.24-1_all.deb</code>文件放到用户主目录下，执行下面的命令：</p>\n<pre class=\"language-none\"><code class=\"language-none\">dpkg -i mysql-apt-config_0.8.24-1_all.deb</code></pre>\n<p>会出现下面的界面，选择<code>mysql server -&gt; mysql-8.0 -&gt; ok</code><br><img src=\"/2023/05/08/ubuntu-an-zhuang-mysql8-0-liu-cheng-ji-lu/mysql8%E5%AE%89%E8%A3%853.png\" alt=\"img\"><br>之后我们使用下面的命令安装mysql：s</p>\n<pre class=\"language-ss\" data-language=\"ss\"><code class=\"language-ss\">apt-get upgrade\napt-get install mysql-server</code></pre>\n<p>安装过程中会让你设置初始密码(如果没有这一步，看下面)：<br><img src=\"/2023/05/08/ubuntu-an-zhuang-mysql8-0-liu-cheng-ji-lu/mysql8%E5%AE%89%E8%A3%854.png\" alt=\"img\"><br>若是没出错就已经安装好了，可以尝试登录一下：</p>\n<pre class=\"language-none\"><code class=\"language-none\">mysql -u root -p</code></pre>\n<p>输入刚才的初始密码即可。<br><img src=\"/2023/05/08/ubuntu-an-zhuang-mysql8-0-liu-cheng-ji-lu/mysql8%E5%AE%89%E8%A3%855.png\" alt=\"img\"></p>\n<h2 id=\"没有初始密码的情况\"><a href=\"#没有初始密码的情况\" class=\"headerlink\" title=\"没有初始密码的情况\"></a>没有初始密码的情况</h2><p>这种情况我遇见很多次了，不知道原因是什么<br>但是如果没有让你设置初始密码，那么理论上第一次登录你输入什么密码都会登录成功，这也是给你修改密码的机会。</p>\n<h2 id=\"修改密码\"><a href=\"#修改密码\" class=\"headerlink\" title=\"修改密码\"></a>修改密码</h2><p>修改密码操作如下：</p>\n<pre class=\"language-none\"><code class=\"language-none\">mysql&gt; use mysql;\nmysql&gt; alter user &#39;root&#39;@&#39;localhost&#39; identified by &#39;你的新密码&#39;;\nmysql&gt; flush privileges;</code></pre>\n<p>然后退出数据库重新登录，输入你刚才设置的密码，即可登录成功。</p>\n<p><strong>登录失败有如下可能性：</strong></p>\n<blockquote>\n<ol>\n<li>你的密码输入错误，谁是小丑我不说</li>\n<li>如果你登录时没有加sudo，试着使用sudo进行登录。如果使用sudo才可以登录成功，那么其他连接数据库的接口，比如jdbc，大概率是无法连接数据库的，这种情况看下一节：<strong>远程访问</strong></li>\n</ol>\n</blockquote>\n<p>如果你比上面说的还要小丑：密码记不住了，可以用如下两种方法之一来登录mysql：<br><img src=\"/2023/05/08/ubuntu-an-zhuang-mysql8-0-liu-cheng-ji-lu/%E5%B0%8F%E4%B8%91.png\" alt=\"小丑竟在我身边\"></p>\n<h3 id=\"1-默认账户登录\"><a href=\"#1-默认账户登录\" class=\"headerlink\" title=\"1.默认账户登录\"></a>1.默认账户登录</h3><p>mysql会创建一个默认账户，账户密码存放在 <strong>&#x2F;etc&#x2F;mysql&#x2F;debian.cnf</strong>文件内：</p>\n<pre class=\"language-none\"><code class=\"language-none\">sudo cat &#x2F;etc&#x2F;mysql&#x2F;debian.cnf\n# 输出如下：\n# Automatically generated for Debian scripts. DO NOT TOUCH!\n[client]\nhost     &#x3D; localhost\nuser     &#x3D; debian-sys-maint  #用户名\npassword &#x3D; UXuglBQfbMeF4aEu  #密码，这个密码每次安装都不一样，不要直接复制我的\nsocket   &#x3D; &#x2F;var&#x2F;run&#x2F;mysqld&#x2F;mysqld.sock\n[mysql_upgrade]\nhost     &#x3D; localhost\nuser     &#x3D; debian-sys-maint\npassword &#x3D; UXuglBQfbMeF4aEu\nsocket   &#x3D; &#x2F;var&#x2F;run&#x2F;mysqld&#x2F;mysqld.sock</code></pre>\n<p>按照这个用户名密码登录：</p>\n<pre class=\"language-none\"><code class=\"language-none\">mysql -u debian-sys-maint -p UXuglBQfbMeF4aEu</code></pre>\n\n<p>之后按照上面的方法改密码即可。</p>\n<h3 id=\"2-免密登录\"><a href=\"#2-免密登录\" class=\"headerlink\" title=\"2. 免密登录\"></a>2. 免密登录</h3><p>在<code>/etc/mysql/mysql.conf.d/mysqld.cnf</code>文件的最后一行添加：<code>skip-grant-tables</code><br>重启数据库：</p>\n<pre class=\"language-none\"><code class=\"language-none\">systemctl restart mysql</code></pre>\n<p>再次登录数据库，随便输入一个密码就可。<br>修改完密码之后，把<code>/etc/mysql/mysql.conf.d/mysqld.cnf</code>还原，再次重启数据库即可。</p>\n<h2 id=\"远程访问\"><a href=\"#远程访问\" class=\"headerlink\" title=\"远程访问\"></a>远程访问</h2><p>防火墙这里先不提，需要提前配置好防火墙，开放端口。<br>远程访问mysql至少需要满足两个条件：</p>\n<h3 id=\"1-配置用户允许访问的ip地址\"><a href=\"#1-配置用户允许访问的ip地址\" class=\"headerlink\" title=\"1.配置用户允许访问的ip地址\"></a>1.配置用户允许访问的ip地址</h3><p>mysql8默认只有本机可以访问，如果需要从其他机器远程访问数据库，需要进行配置。<br>登录数据库，查看权限表：</p>\n<pre class=\"language-none\"><code class=\"language-none\">mysql -u root -p\nmysql&gt; use mysql;\nmysql&gt; select user,host from user where user&#x3D;&#39;root&#39;;</code></pre>\n<p>会查询到如下结果：</p>\n<pre class=\"language-none\"><code class=\"language-none\">+------+-----------------+\n| user | host            |\n+------+-----------------+\n|root  | localhost       |\n+------+-----------------+\n1 row in set (0.00sec)</code></pre>\n<p>这里可以看到root用户的host字段是localhost，代表root用户只有本机可以访问。把它改成%（代表所有ip地址）：</p>\n<pre class=\"language-none\"><code class=\"language-none\">update user set host &#x3D; &#39;%&#39; where user &#x3D;&#39;root&#39;;\nflush privileges;</code></pre>\n<h3 id=\"2-若只有sudo才可以登录成功\"><a href=\"#2-若只有sudo才可以登录成功\" class=\"headerlink\" title=\"2.若只有sudo才可以登录成功\"></a>2.若只有sudo才可以登录成功</h3><p>需要修改一下用户的认证方式为<code>mysql_native_password</code><br>运行如下命令：</p>\n<pre class=\"language-none\"><code class=\"language-none\">mysql&gt; use mysql;\nmysql&gt; alter user &#39;root&#39;@&#39;%&#39; identified with mysql_native_password\nmysql&gt; flush privileges;</code></pre>","site":{"data":{}},"excerpt":"","more":"<h1 id=\"ubuntu安装mysql8-0流程记录\"><a href=\"#ubuntu安装mysql8-0流程记录\" class=\"headerlink\" title=\"ubuntu安装mysql8.0流程记录\"></a>ubuntu安装mysql8.0流程记录</h1><p>先切换到root用户下：</p>\n<pre class=\"language-none\"><code class=\"language-none\">sudo su</code></pre>\n\n<p>本文档中使用的操作系统是ubuntu20.04，默认使用apt下载mysql默认版本可能是mysql5，所以先去官网<a href=\"https://dev.mysql.com/downloads/mysql/\">https://dev.mysql.com/downloads/mysql/</a>下载mysql8的源：<br><img src=\"/2023/05/08/ubuntu-an-zhuang-mysql8-0-liu-cheng-ji-lu/mysql8%E5%AE%89%E8%A3%851.png\" alt=\"img\"><br><img src=\"/2023/05/08/ubuntu-an-zhuang-mysql8-0-liu-cheng-ji-lu/mysql8%E5%AE%89%E8%A3%852.png\" alt=\"img\"><br>我们将下载到的<code>mysql-apt-config_0.8.24-1_all.deb</code>文件放到用户主目录下，执行下面的命令：</p>\n<pre class=\"language-none\"><code class=\"language-none\">dpkg -i mysql-apt-config_0.8.24-1_all.deb</code></pre>\n<p>会出现下面的界面，选择<code>mysql server -&gt; mysql-8.0 -&gt; ok</code><br><img src=\"/2023/05/08/ubuntu-an-zhuang-mysql8-0-liu-cheng-ji-lu/mysql8%E5%AE%89%E8%A3%853.png\" alt=\"img\"><br>之后我们使用下面的命令安装mysql：s</p>\n<pre class=\"language-ss\" data-language=\"ss\"><code class=\"language-ss\">apt-get upgrade\napt-get install mysql-server</code></pre>\n<p>安装过程中会让你设置初始密码(如果没有这一步，看下面)：<br><img src=\"/2023/05/08/ubuntu-an-zhuang-mysql8-0-liu-cheng-ji-lu/mysql8%E5%AE%89%E8%A3%854.png\" alt=\"img\"><br>若是没出错就已经安装好了，可以尝试登录一下：</p>\n<pre class=\"language-none\"><code class=\"language-none\">mysql -u root -p</code></pre>\n<p>输入刚才的初始密码即可。<br><img src=\"/2023/05/08/ubuntu-an-zhuang-mysql8-0-liu-cheng-ji-lu/mysql8%E5%AE%89%E8%A3%855.png\" alt=\"img\"></p>\n<h2 id=\"没有初始密码的情况\"><a href=\"#没有初始密码的情况\" class=\"headerlink\" title=\"没有初始密码的情况\"></a>没有初始密码的情况</h2><p>这种情况我遇见很多次了，不知道原因是什么<br>但是如果没有让你设置初始密码，那么理论上第一次登录你输入什么密码都会登录成功，这也是给你修改密码的机会。</p>\n<h2 id=\"修改密码\"><a href=\"#修改密码\" class=\"headerlink\" title=\"修改密码\"></a>修改密码</h2><p>修改密码操作如下：</p>\n<pre class=\"language-none\"><code class=\"language-none\">mysql&gt; use mysql;\nmysql&gt; alter user &#39;root&#39;@&#39;localhost&#39; identified by &#39;你的新密码&#39;;\nmysql&gt; flush privileges;</code></pre>\n<p>然后退出数据库重新登录，输入你刚才设置的密码，即可登录成功。</p>\n<p><strong>登录失败有如下可能性：</strong></p>\n<blockquote>\n<ol>\n<li>你的密码输入错误，谁是小丑我不说</li>\n<li>如果你登录时没有加sudo，试着使用sudo进行登录。如果使用sudo才可以登录成功，那么其他连接数据库的接口，比如jdbc，大概率是无法连接数据库的，这种情况看下一节：<strong>远程访问</strong></li>\n</ol>\n</blockquote>\n<p>如果你比上面说的还要小丑：密码记不住了，可以用如下两种方法之一来登录mysql：<br><img src=\"/2023/05/08/ubuntu-an-zhuang-mysql8-0-liu-cheng-ji-lu/%E5%B0%8F%E4%B8%91.png\" alt=\"小丑竟在我身边\"></p>\n<h3 id=\"1-默认账户登录\"><a href=\"#1-默认账户登录\" class=\"headerlink\" title=\"1.默认账户登录\"></a>1.默认账户登录</h3><p>mysql会创建一个默认账户，账户密码存放在 <strong>&#x2F;etc&#x2F;mysql&#x2F;debian.cnf</strong>文件内：</p>\n<pre class=\"language-none\"><code class=\"language-none\">sudo cat &#x2F;etc&#x2F;mysql&#x2F;debian.cnf\n# 输出如下：\n# Automatically generated for Debian scripts. DO NOT TOUCH!\n[client]\nhost     &#x3D; localhost\nuser     &#x3D; debian-sys-maint  #用户名\npassword &#x3D; UXuglBQfbMeF4aEu  #密码，这个密码每次安装都不一样，不要直接复制我的\nsocket   &#x3D; &#x2F;var&#x2F;run&#x2F;mysqld&#x2F;mysqld.sock\n[mysql_upgrade]\nhost     &#x3D; localhost\nuser     &#x3D; debian-sys-maint\npassword &#x3D; UXuglBQfbMeF4aEu\nsocket   &#x3D; &#x2F;var&#x2F;run&#x2F;mysqld&#x2F;mysqld.sock</code></pre>\n<p>按照这个用户名密码登录：</p>\n<pre class=\"language-none\"><code class=\"language-none\">mysql -u debian-sys-maint -p UXuglBQfbMeF4aEu</code></pre>\n\n<p>之后按照上面的方法改密码即可。</p>\n<h3 id=\"2-免密登录\"><a href=\"#2-免密登录\" class=\"headerlink\" title=\"2. 免密登录\"></a>2. 免密登录</h3><p>在<code>/etc/mysql/mysql.conf.d/mysqld.cnf</code>文件的最后一行添加：<code>skip-grant-tables</code><br>重启数据库：</p>\n<pre class=\"language-none\"><code class=\"language-none\">systemctl restart mysql</code></pre>\n<p>再次登录数据库，随便输入一个密码就可。<br>修改完密码之后，把<code>/etc/mysql/mysql.conf.d/mysqld.cnf</code>还原，再次重启数据库即可。</p>\n<h2 id=\"远程访问\"><a href=\"#远程访问\" class=\"headerlink\" title=\"远程访问\"></a>远程访问</h2><p>防火墙这里先不提，需要提前配置好防火墙，开放端口。<br>远程访问mysql至少需要满足两个条件：</p>\n<h3 id=\"1-配置用户允许访问的ip地址\"><a href=\"#1-配置用户允许访问的ip地址\" class=\"headerlink\" title=\"1.配置用户允许访问的ip地址\"></a>1.配置用户允许访问的ip地址</h3><p>mysql8默认只有本机可以访问，如果需要从其他机器远程访问数据库，需要进行配置。<br>登录数据库，查看权限表：</p>\n<pre class=\"language-none\"><code class=\"language-none\">mysql -u root -p\nmysql&gt; use mysql;\nmysql&gt; select user,host from user where user&#x3D;&#39;root&#39;;</code></pre>\n<p>会查询到如下结果：</p>\n<pre class=\"language-none\"><code class=\"language-none\">+------+-----------------+\n| user | host            |\n+------+-----------------+\n|root  | localhost       |\n+------+-----------------+\n1 row in set (0.00sec)</code></pre>\n<p>这里可以看到root用户的host字段是localhost，代表root用户只有本机可以访问。把它改成%（代表所有ip地址）：</p>\n<pre class=\"language-none\"><code class=\"language-none\">update user set host &#x3D; &#39;%&#39; where user &#x3D;&#39;root&#39;;\nflush privileges;</code></pre>\n<h3 id=\"2-若只有sudo才可以登录成功\"><a href=\"#2-若只有sudo才可以登录成功\" class=\"headerlink\" title=\"2.若只有sudo才可以登录成功\"></a>2.若只有sudo才可以登录成功</h3><p>需要修改一下用户的认证方式为<code>mysql_native_password</code><br>运行如下命令：</p>\n<pre class=\"language-none\"><code class=\"language-none\">mysql&gt; use mysql;\nmysql&gt; alter user &#39;root&#39;@&#39;%&#39; identified with mysql_native_password\nmysql&gt; flush privileges;</code></pre>"},{"title":"启用博客第一天","date":"2023-01-11T09:07:43.000Z","layout":"启用博客第一天","_content":"# 启用博客的第一天\n当前时间：2023年1月11日 17:10\n我不去想是否能够成功，既然选择了远方，便只顾风雨兼程。","source":"_posts/启用博客第一天.md","raw":"---\ntitle: 启用博客第一天\ndate: 2023-01-11 17:07:43\ntags: \"启用博客第一天\"\nlayout: \"启用博客第一天\"\n---\n# 启用博客的第一天\n当前时间：2023年1月11日 17:10\n我不去想是否能够成功，既然选择了远方，便只顾风雨兼程。","slug":"启用博客第一天","published":1,"updated":"2024-04-09T10:59:25.135Z","comments":1,"photos":[],"link":"","_id":"clusa3wnr000o2s7e0tz50uib","content":"<h1 id=\"启用博客的第一天\"><a href=\"#启用博客的第一天\" class=\"headerlink\" title=\"启用博客的第一天\"></a>启用博客的第一天</h1><p>当前时间：2023年1月11日 17:10<br>我不去想是否能够成功，既然选择了远方，便只顾风雨兼程。</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"启用博客的第一天\"><a href=\"#启用博客的第一天\" class=\"headerlink\" title=\"启用博客的第一天\"></a>启用博客的第一天</h1><p>当前时间：2023年1月11日 17:10<br>我不去想是否能够成功，既然选择了远方，便只顾风雨兼程。</p>\n"},{"title":"数列通项公式总结","date":"2023-05-15T07:27:30.000Z","_content":"# 数列通项公式总结\n## 1. $a_{n+1}=a_{n}+d$ 型\n等差数列，略\n## 2. $a_{n+1}=q \\cdot a_n$ 型\n等比数列，略\n## 3. 累加法\n**常见形式为 $a_{n+1}=a_n+f(n)$，且$f(n)$的前n项和易求得（比如等差、等比、差比、裂项等）**\n有：\n$$\na_n=(a_n-a_{n-1})+(a_{n-1}-a_{n-2})+\\ldots +(a_2-a_1)=f(n-1)+f(n-2)+\\ldots+f(1), (n \\geq 2)\n$$\n## 4. 累乘法\n**常见形式为：**\n$$\n\\frac{a_{n+1}}{a_n}=f(n)\n$$\n有：\n$$\na_n=\\frac{a_n}{a_{n-1}}\\cdot \\frac{a_{n-1}}{a_{n-2}}\\cdot \\ldots \\cdot \\frac{a_2}{a_1}\n=f(n-1)\\cdot f(n-2) \\cdot \\ldots \\cdot f(1)\n$$\n\n## 5. $a_{n+1}=p \\cdot a_n + q$ 型\n> **核心思想：构造等比数列**\n> **方法一：待定系数法**\n> 在等式两边加同一个常数，使得等式两边成等比数列：\n> $$\n> a_{n+1}+k = p \\cdot a_n + q+k \n> $$\n> 待定系数法确定k值，有：\n> $$\n> \\frac{k}{1}=\\frac{q+k}{p}\n> $$\n> 解得：\n> $$\n> k=\\frac{q}{p-1}\n> $$\n> 带回递推式：\n> $$\n> a_{n+1}+\\frac{q}{p-1} = p \\cdot a_n + \\frac{pq}{p-1}=p \\cdot (a_n+\\frac{q}{p-1})\n> $$\n> 令数列$b_n=a_n+\\frac{q}{p-1}$,得\n> $$\n> b_{n+1}=p \\cdot b_n\n> $$\n> 转化为等比数列求解即可\n> \n> **方法二：逐项相减法**\n> 有：\n> $$a_{n+1}=p \\cdot a_n + q\\\\\\\\a_{n}=p \\cdot a_{n-1} + q$$\n> 两式相减可得：\n> $$\n> a_{n+1}-a_n=p \\cdot (a_n-a_{n-1}),n\\geq 2\n> $$\n> 令数列 $b_n=a_n-a_{n-1},n\\geq 2$,有：\n> $$b_{n+1}=p\\cdot b_n$$\n> 转化为等比数列求解即可\n> **特别地，$p=1$时，k 值不存在，但是此时递推式直接退化为等差数列。**\n## 6. $a_{n+1}=pa_n+kn+b$ 型\n> **方法一：逐项相减法**\n> 有：\n> $$\n> a_{n+1}=pa_n+kn+b\\\\\\\\\n> a_n=pa_{n-1}+k(n-1)+b\n> $$\n> 两式相减得：\n> $$\n> a_{n+1}-a_n=p(a_n-a_{n-1})+k,n\\geq 2\n> $$\n> 令 $b_n=a_n-a_{n-1},n\\geq 2$，有：\n> $$\n> b_{n+1}=pb_n+k\n> $$\n> 转化成$a_{n+1}=p \\cdot a_n + q$ 型求解即可。\n>\n> **方法二：待定系数法**\n> 此方法的思路依旧是**构造等比数列**。\n> 在等式两边同时加一项 $x(n+1)+y$，得：\n> $$\n> a_{n+1}+x(n+1)+y=pa_n+(x+k)n+x+y+b\n> $$\n> 对应项成比例，有：\n> $$\n> x+k=px\\\\\\\\x+y+b=py\n> $$\n> 解得：\n> $$x=\\frac{k}{p-1}\\\\\\\\y=\\frac{k}{(p-1)^2}+\\frac{b}{p-1}$$\n> 带回原式：\n> $$a_{n+1}+\\frac{k}{p-1}(n+1)+\\frac{k+bp-b}{(p-1)^2}=pa_n+\\frac{pk}{p-1}n+\\frac{pk+bp^2-bp}{(p-1)^2}$$\n> 令$b_n=a_{n}+\\frac{k}{p-1}n+\\frac{k+bp-b}{(p-1)^2}$，得：\n> $$b_{n+1}=pb_n$$\n> 转化为等比数列即可。\n\n## 7. $a_{n+1} = p \\cdot a_n + q \\cdot m^n$ 型\n> **核心思想：构造等比数列**<br>\n> **方法一：**\n> 在等式两边同时除以 $m^{n+1}$ 得：\n> $$\n> \\frac{a_{n+1}}{m^{n+1}}=p \\cdot \\frac{a_n}{m^n} + \\frac{q}{m}\n> $$\n> 令数列$b_n=\\frac{a_n}{m^n}$,那么：\n> $$\n> b_{n+1}=p \\cdot b_n + \\frac{q}{m}\n> $$\n> 即转化为$a_{n+1}=p \\cdot a_n + q$ 型\n>\n> **方法二：**\n> 类似第三种$a_{n+1}=p \\cdot a_n + q$ 型，在等式两边同时加一项 $k \\cdot m^{n+1}$，得：\n> $$\n> a_{n+1} + k \\cdot m^{n+1} = p \\cdot a_n + (q+km)\\cdot m^n\n> $$\n> 等比数列需要指数项和数列项成比例， 由待定系数法确定 *k* 值：\n> $$\n> \\frac{k}{1}=\\frac{q+km}{p}\n> $$\n> 解得\n> $$\n> k = \\frac{q}{p-m}\n> $$\n> 带回递推式\n> $$\n> a_{n+1} + \\frac{q}{p-m} \\cdot q^{n+1} = p \\cdot a_n + (q+\\frac{q}{p-m}m)\\cdot q^n= p \\cdot (a_n+ \\frac{q}{p-m} \\cdot q^{n})\n> $$\n> 令数列$b_n=a_n+ \\frac{q}{p-m} \\cdot q^{n}$，那么;\n> $$\n> b_{n+1}=p \\cdot b_n\n> $$\n> 即转化为等比数列\n>\n## 8. $a_{n+1}=pa^q_n$ 型\n> 见到指数型，**取对数**\n> $$\n> lga_{n+1}=q\\cdot lga_n + lgp\n> $$\n> 令数列$b_n=lga_n$，有：\n> $$b_{n+1}=qb_n+lgp$$\n> 这依然是$a_{n+1}=p \\cdot a_n + q$ 型，求解即可。\n\n## 9. $a_{n+1}=\\frac{a\\cdot a_n}{b\\cdot a_n+c}$型\n> **倒数法**\n> 两边取倒数：\n> $$\\frac{1}{a_{n+1}}=\\frac{b}{a}\\cdot \\frac{1}{a_n}+\\frac{c}{a}$$\n> 令数列$b_n=\\frac{1}{a_n}$，有：\n> $$b_{n+1}=\\frac{b}{a}\\cdot b_n+\\frac{c}{a}$$\n> 即转化为$a_{n+1}=p \\cdot a_n + q$ 型\n## 10. $a_{n+1}=\\frac{a\\cdot a_n+b}{c\\cdot a_n+d}$型\n> **方法一：待定系数法**\n> 受到上一种类型的启发，是否可以构造一个数列，使得该问题可以转化为上一种类型的问题？\n> 两边同时加常数k：\n> $$a_{n+1}+k=\\frac{(a+ck)\\cdot a_n+(b+dk)}{c\\cdot a_n+d}   （1）$$\n> 想要取倒数之后，可以用另一个数列来换元，就需要右侧分子和左侧对应系数成比例：\n> $$\\frac{k}{1}=\\frac{b+dk}{a+ck}$$\n> 这是一个关于k的一元二次方程，分下面两种情况：\n> 1. 若k有解，那么把k带入（1）式，再取倒数，对右侧进行分离常数，即可转化为$a_{n+1}=\\frac{a\\cdot a_n}{b\\cdot a_n+c}$ 型；\n> 2. 若k无解，那么数列$\\{a_n\\}$是周期数列。\n> \n> **方法二：不动点法（了解）**\n> 不动点的定义为：满足$f(x_0)=x_0$的值$x_0$称为函数$f(x)$的不动点。\n> 对于数列递推式$a_{n+1}=\\frac{a\\cdot a_n+b}{c\\cdot a_n+d}$，把数列项全部换成x，有：\n> $$x=\\frac{ax+b}{cx+d}$$\n> 这是关于x的一元二次方程，会发现它和方法一中待定系数方程一样。这里详细地说一下它的解对数列的影响：\n> 1. 若方程有两个解 $\\lambda$、$\\mu$,那么数列$\\{\\frac{a_n-\\lambda}{a_n-\\mu}\\}$为等比数列；\n> 2. 若方程有唯一解 $\\lambda$，那么数列$\\{\\frac{1}{a_n-\\lambda}\\}$为等差数列；\n> 3. 若方程无解，那么数列$\\{a_n\\}$是周期数列。\n> \n> **该方法可以当做一个技巧去记忆，但是切记不可以钻牛角尖；在平时做题你会看到很多形如$a_{n+1}=\\frac{a\\cdot a_n+b}{c\\cdot a_n+d}$的递推式，但是多数情况并不需要求它的递推式，尤其在小题中，可以使用不动点法判断$\\{a_n\\}$是否为周期数列，否则不要把该方法当成第一考虑的方法。**\n\n","source":"_posts/数列通项公式总结.md","raw":"---\ntitle: '数列通项公式总结'\ndate: 2023-05-15 15:27:30\ntags: \n  - 高中数学\n  - 数列\n  - 通项公式\ncategories: 高中数学\n---\n# 数列通项公式总结\n## 1. $a_{n+1}=a_{n}+d$ 型\n等差数列，略\n## 2. $a_{n+1}=q \\cdot a_n$ 型\n等比数列，略\n## 3. 累加法\n**常见形式为 $a_{n+1}=a_n+f(n)$，且$f(n)$的前n项和易求得（比如等差、等比、差比、裂项等）**\n有：\n$$\na_n=(a_n-a_{n-1})+(a_{n-1}-a_{n-2})+\\ldots +(a_2-a_1)=f(n-1)+f(n-2)+\\ldots+f(1), (n \\geq 2)\n$$\n## 4. 累乘法\n**常见形式为：**\n$$\n\\frac{a_{n+1}}{a_n}=f(n)\n$$\n有：\n$$\na_n=\\frac{a_n}{a_{n-1}}\\cdot \\frac{a_{n-1}}{a_{n-2}}\\cdot \\ldots \\cdot \\frac{a_2}{a_1}\n=f(n-1)\\cdot f(n-2) \\cdot \\ldots \\cdot f(1)\n$$\n\n## 5. $a_{n+1}=p \\cdot a_n + q$ 型\n> **核心思想：构造等比数列**\n> **方法一：待定系数法**\n> 在等式两边加同一个常数，使得等式两边成等比数列：\n> $$\n> a_{n+1}+k = p \\cdot a_n + q+k \n> $$\n> 待定系数法确定k值，有：\n> $$\n> \\frac{k}{1}=\\frac{q+k}{p}\n> $$\n> 解得：\n> $$\n> k=\\frac{q}{p-1}\n> $$\n> 带回递推式：\n> $$\n> a_{n+1}+\\frac{q}{p-1} = p \\cdot a_n + \\frac{pq}{p-1}=p \\cdot (a_n+\\frac{q}{p-1})\n> $$\n> 令数列$b_n=a_n+\\frac{q}{p-1}$,得\n> $$\n> b_{n+1}=p \\cdot b_n\n> $$\n> 转化为等比数列求解即可\n> \n> **方法二：逐项相减法**\n> 有：\n> $$a_{n+1}=p \\cdot a_n + q\\\\\\\\a_{n}=p \\cdot a_{n-1} + q$$\n> 两式相减可得：\n> $$\n> a_{n+1}-a_n=p \\cdot (a_n-a_{n-1}),n\\geq 2\n> $$\n> 令数列 $b_n=a_n-a_{n-1},n\\geq 2$,有：\n> $$b_{n+1}=p\\cdot b_n$$\n> 转化为等比数列求解即可\n> **特别地，$p=1$时，k 值不存在，但是此时递推式直接退化为等差数列。**\n## 6. $a_{n+1}=pa_n+kn+b$ 型\n> **方法一：逐项相减法**\n> 有：\n> $$\n> a_{n+1}=pa_n+kn+b\\\\\\\\\n> a_n=pa_{n-1}+k(n-1)+b\n> $$\n> 两式相减得：\n> $$\n> a_{n+1}-a_n=p(a_n-a_{n-1})+k,n\\geq 2\n> $$\n> 令 $b_n=a_n-a_{n-1},n\\geq 2$，有：\n> $$\n> b_{n+1}=pb_n+k\n> $$\n> 转化成$a_{n+1}=p \\cdot a_n + q$ 型求解即可。\n>\n> **方法二：待定系数法**\n> 此方法的思路依旧是**构造等比数列**。\n> 在等式两边同时加一项 $x(n+1)+y$，得：\n> $$\n> a_{n+1}+x(n+1)+y=pa_n+(x+k)n+x+y+b\n> $$\n> 对应项成比例，有：\n> $$\n> x+k=px\\\\\\\\x+y+b=py\n> $$\n> 解得：\n> $$x=\\frac{k}{p-1}\\\\\\\\y=\\frac{k}{(p-1)^2}+\\frac{b}{p-1}$$\n> 带回原式：\n> $$a_{n+1}+\\frac{k}{p-1}(n+1)+\\frac{k+bp-b}{(p-1)^2}=pa_n+\\frac{pk}{p-1}n+\\frac{pk+bp^2-bp}{(p-1)^2}$$\n> 令$b_n=a_{n}+\\frac{k}{p-1}n+\\frac{k+bp-b}{(p-1)^2}$，得：\n> $$b_{n+1}=pb_n$$\n> 转化为等比数列即可。\n\n## 7. $a_{n+1} = p \\cdot a_n + q \\cdot m^n$ 型\n> **核心思想：构造等比数列**<br>\n> **方法一：**\n> 在等式两边同时除以 $m^{n+1}$ 得：\n> $$\n> \\frac{a_{n+1}}{m^{n+1}}=p \\cdot \\frac{a_n}{m^n} + \\frac{q}{m}\n> $$\n> 令数列$b_n=\\frac{a_n}{m^n}$,那么：\n> $$\n> b_{n+1}=p \\cdot b_n + \\frac{q}{m}\n> $$\n> 即转化为$a_{n+1}=p \\cdot a_n + q$ 型\n>\n> **方法二：**\n> 类似第三种$a_{n+1}=p \\cdot a_n + q$ 型，在等式两边同时加一项 $k \\cdot m^{n+1}$，得：\n> $$\n> a_{n+1} + k \\cdot m^{n+1} = p \\cdot a_n + (q+km)\\cdot m^n\n> $$\n> 等比数列需要指数项和数列项成比例， 由待定系数法确定 *k* 值：\n> $$\n> \\frac{k}{1}=\\frac{q+km}{p}\n> $$\n> 解得\n> $$\n> k = \\frac{q}{p-m}\n> $$\n> 带回递推式\n> $$\n> a_{n+1} + \\frac{q}{p-m} \\cdot q^{n+1} = p \\cdot a_n + (q+\\frac{q}{p-m}m)\\cdot q^n= p \\cdot (a_n+ \\frac{q}{p-m} \\cdot q^{n})\n> $$\n> 令数列$b_n=a_n+ \\frac{q}{p-m} \\cdot q^{n}$，那么;\n> $$\n> b_{n+1}=p \\cdot b_n\n> $$\n> 即转化为等比数列\n>\n## 8. $a_{n+1}=pa^q_n$ 型\n> 见到指数型，**取对数**\n> $$\n> lga_{n+1}=q\\cdot lga_n + lgp\n> $$\n> 令数列$b_n=lga_n$，有：\n> $$b_{n+1}=qb_n+lgp$$\n> 这依然是$a_{n+1}=p \\cdot a_n + q$ 型，求解即可。\n\n## 9. $a_{n+1}=\\frac{a\\cdot a_n}{b\\cdot a_n+c}$型\n> **倒数法**\n> 两边取倒数：\n> $$\\frac{1}{a_{n+1}}=\\frac{b}{a}\\cdot \\frac{1}{a_n}+\\frac{c}{a}$$\n> 令数列$b_n=\\frac{1}{a_n}$，有：\n> $$b_{n+1}=\\frac{b}{a}\\cdot b_n+\\frac{c}{a}$$\n> 即转化为$a_{n+1}=p \\cdot a_n + q$ 型\n## 10. $a_{n+1}=\\frac{a\\cdot a_n+b}{c\\cdot a_n+d}$型\n> **方法一：待定系数法**\n> 受到上一种类型的启发，是否可以构造一个数列，使得该问题可以转化为上一种类型的问题？\n> 两边同时加常数k：\n> $$a_{n+1}+k=\\frac{(a+ck)\\cdot a_n+(b+dk)}{c\\cdot a_n+d}   （1）$$\n> 想要取倒数之后，可以用另一个数列来换元，就需要右侧分子和左侧对应系数成比例：\n> $$\\frac{k}{1}=\\frac{b+dk}{a+ck}$$\n> 这是一个关于k的一元二次方程，分下面两种情况：\n> 1. 若k有解，那么把k带入（1）式，再取倒数，对右侧进行分离常数，即可转化为$a_{n+1}=\\frac{a\\cdot a_n}{b\\cdot a_n+c}$ 型；\n> 2. 若k无解，那么数列$\\{a_n\\}$是周期数列。\n> \n> **方法二：不动点法（了解）**\n> 不动点的定义为：满足$f(x_0)=x_0$的值$x_0$称为函数$f(x)$的不动点。\n> 对于数列递推式$a_{n+1}=\\frac{a\\cdot a_n+b}{c\\cdot a_n+d}$，把数列项全部换成x，有：\n> $$x=\\frac{ax+b}{cx+d}$$\n> 这是关于x的一元二次方程，会发现它和方法一中待定系数方程一样。这里详细地说一下它的解对数列的影响：\n> 1. 若方程有两个解 $\\lambda$、$\\mu$,那么数列$\\{\\frac{a_n-\\lambda}{a_n-\\mu}\\}$为等比数列；\n> 2. 若方程有唯一解 $\\lambda$，那么数列$\\{\\frac{1}{a_n-\\lambda}\\}$为等差数列；\n> 3. 若方程无解，那么数列$\\{a_n\\}$是周期数列。\n> \n> **该方法可以当做一个技巧去记忆，但是切记不可以钻牛角尖；在平时做题你会看到很多形如$a_{n+1}=\\frac{a\\cdot a_n+b}{c\\cdot a_n+d}$的递推式，但是多数情况并不需要求它的递推式，尤其在小题中，可以使用不动点法判断$\\{a_n\\}$是否为周期数列，否则不要把该方法当成第一考虑的方法。**\n\n","slug":"数列通项公式总结","published":1,"updated":"2024-04-09T10:59:25.135Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clusa3wns000p2s7egy5s783o","content":"<h1 id=\"数列通项公式总结\"><a href=\"#数列通项公式总结\" class=\"headerlink\" title=\"数列通项公式总结\"></a>数列通项公式总结</h1><h2 id=\"1-a-n-1-x3D-a-n-d-型\"><a href=\"#1-a-n-1-x3D-a-n-d-型\" class=\"headerlink\" title=\"1. $a_{n+1}&#x3D;a_{n}+d$ 型\"></a>1. $a_{n+1}&#x3D;a_{n}+d$ 型</h2><p>等差数列，略</p>\n<h2 id=\"2-a-n-1-x3D-q-cdot-a-n-型\"><a href=\"#2-a-n-1-x3D-q-cdot-a-n-型\" class=\"headerlink\" title=\"2. $a_{n+1}&#x3D;q \\cdot a_n$ 型\"></a>2. $a_{n+1}&#x3D;q \\cdot a_n$ 型</h2><p>等比数列，略</p>\n<h2 id=\"3-累加法\"><a href=\"#3-累加法\" class=\"headerlink\" title=\"3. 累加法\"></a>3. 累加法</h2><p><strong>常见形式为 $a_{n+1}&#x3D;a_n+f(n)$，且$f(n)$的前n项和易求得（比如等差、等比、差比、裂项等）</strong><br>有：<br>$$<br>a_n&#x3D;(a_n-a_{n-1})+(a_{n-1}-a_{n-2})+\\ldots +(a_2-a_1)&#x3D;f(n-1)+f(n-2)+\\ldots+f(1), (n \\geq 2)<br>$$</p>\n<h2 id=\"4-累乘法\"><a href=\"#4-累乘法\" class=\"headerlink\" title=\"4. 累乘法\"></a>4. 累乘法</h2><p><strong>常见形式为：</strong><br>$$<br>\\frac{a_{n+1}}{a_n}&#x3D;f(n)<br>$$<br>有：<br>$$<br>a_n&#x3D;\\frac{a_n}{a_{n-1}}\\cdot \\frac{a_{n-1}}{a_{n-2}}\\cdot \\ldots \\cdot \\frac{a_2}{a_1}<br>&#x3D;f(n-1)\\cdot f(n-2) \\cdot \\ldots \\cdot f(1)<br>$$</p>\n<h2 id=\"5-a-n-1-x3D-p-cdot-a-n-q-型\"><a href=\"#5-a-n-1-x3D-p-cdot-a-n-q-型\" class=\"headerlink\" title=\"5. $a_{n+1}&#x3D;p \\cdot a_n + q$ 型\"></a>5. $a_{n+1}&#x3D;p \\cdot a_n + q$ 型</h2><blockquote>\n<p><strong>核心思想：构造等比数列</strong><br><strong>方法一：待定系数法</strong><br>在等式两边加同一个常数，使得等式两边成等比数列：<br>$$<br>a_{n+1}+k &#x3D; p \\cdot a_n + q+k<br>$$<br>待定系数法确定k值，有：<br>$$<br>\\frac{k}{1}&#x3D;\\frac{q+k}{p}<br>$$<br>解得：<br>$$<br>k&#x3D;\\frac{q}{p-1}<br>$$<br>带回递推式：<br>$$<br>a_{n+1}+\\frac{q}{p-1} &#x3D; p \\cdot a_n + \\frac{pq}{p-1}&#x3D;p \\cdot (a_n+\\frac{q}{p-1})<br>$$<br>令数列$b_n&#x3D;a_n+\\frac{q}{p-1}$,得<br>$$<br>b_{n+1}&#x3D;p \\cdot b_n<br>$$<br>转化为等比数列求解即可</p>\n<p><strong>方法二：逐项相减法</strong><br>有：<br>$$a_{n+1}&#x3D;p \\cdot a_n + q\\\\a_{n}&#x3D;p \\cdot a_{n-1} + q$$<br>两式相减可得：<br>$$<br>a_{n+1}-a_n&#x3D;p \\cdot (a_n-a_{n-1}),n\\geq 2<br>$$<br>令数列 $b_n&#x3D;a_n-a_{n-1},n\\geq 2$,有：<br>$$b_{n+1}&#x3D;p\\cdot b_n$$<br>转化为等比数列求解即可<br><strong>特别地，$p&#x3D;1$时，k 值不存在，但是此时递推式直接退化为等差数列。</strong></p>\n</blockquote>\n<h2 id=\"6-a-n-1-x3D-pa-n-kn-b-型\"><a href=\"#6-a-n-1-x3D-pa-n-kn-b-型\" class=\"headerlink\" title=\"6. $a_{n+1}&#x3D;pa_n+kn+b$ 型\"></a>6. $a_{n+1}&#x3D;pa_n+kn+b$ 型</h2><blockquote>\n<p><strong>方法一：逐项相减法</strong><br>有：<br>$$<br>a_{n+1}&#x3D;pa_n+kn+b\\\\<br>a_n&#x3D;pa_{n-1}+k(n-1)+b<br>$$<br>两式相减得：<br>$$<br>a_{n+1}-a_n&#x3D;p(a_n-a_{n-1})+k,n\\geq 2<br>$$<br>令 $b_n&#x3D;a_n-a_{n-1},n\\geq 2$，有：<br>$$<br>b_{n+1}&#x3D;pb_n+k<br>$$<br>转化成$a_{n+1}&#x3D;p \\cdot a_n + q$ 型求解即可。</p>\n<p><strong>方法二：待定系数法</strong><br>此方法的思路依旧是<strong>构造等比数列</strong>。<br>在等式两边同时加一项 $x(n+1)+y$，得：<br>$$<br>a_{n+1}+x(n+1)+y&#x3D;pa_n+(x+k)n+x+y+b<br>$$<br>对应项成比例，有：<br>$$<br>x+k&#x3D;px\\\\x+y+b&#x3D;py<br>$$<br>解得：<br>$$x&#x3D;\\frac{k}{p-1}\\\\y&#x3D;\\frac{k}{(p-1)^2}+\\frac{b}{p-1}$$<br>带回原式：<br>$$a_{n+1}+\\frac{k}{p-1}(n+1)+\\frac{k+bp-b}{(p-1)^2}&#x3D;pa_n+\\frac{pk}{p-1}n+\\frac{pk+bp^2-bp}{(p-1)^2}$$<br>令$b_n&#x3D;a_{n}+\\frac{k}{p-1}n+\\frac{k+bp-b}{(p-1)^2}$，得：<br>$$b_{n+1}&#x3D;pb_n$$<br>转化为等比数列即可。</p>\n</blockquote>\n<h2 id=\"7-a-n-1-x3D-p-cdot-a-n-q-cdot-m-n-型\"><a href=\"#7-a-n-1-x3D-p-cdot-a-n-q-cdot-m-n-型\" class=\"headerlink\" title=\"7. $a_{n+1} &#x3D; p \\cdot a_n + q \\cdot m^n$ 型\"></a>7. $a_{n+1} &#x3D; p \\cdot a_n + q \\cdot m^n$ 型</h2><blockquote>\n<p><strong>核心思想：构造等比数列</strong><br><br><strong>方法一：</strong><br>在等式两边同时除以 $m^{n+1}$ 得：<br>$$<br>\\frac{a_{n+1}}{m^{n+1}}&#x3D;p \\cdot \\frac{a_n}{m^n} + \\frac{q}{m}<br>$$<br>令数列$b_n&#x3D;\\frac{a_n}{m^n}$,那么：<br>$$<br>b_{n+1}&#x3D;p \\cdot b_n + \\frac{q}{m}<br>$$<br>即转化为$a_{n+1}&#x3D;p \\cdot a_n + q$ 型</p>\n<p><strong>方法二：</strong><br>类似第三种$a_{n+1}&#x3D;p \\cdot a_n + q$ 型，在等式两边同时加一项 $k \\cdot m^{n+1}$，得：<br>$$<br>a_{n+1} + k \\cdot m^{n+1} &#x3D; p \\cdot a_n + (q+km)\\cdot m^n<br>$$<br>等比数列需要指数项和数列项成比例， 由待定系数法确定 <em>k</em> 值：<br>$$<br>\\frac{k}{1}&#x3D;\\frac{q+km}{p}<br>$$<br>解得<br>$$<br>k &#x3D; \\frac{q}{p-m}<br>$$<br>带回递推式<br>$$<br>a_{n+1} + \\frac{q}{p-m} \\cdot q^{n+1} &#x3D; p \\cdot a_n + (q+\\frac{q}{p-m}m)\\cdot q^n&#x3D; p \\cdot (a_n+ \\frac{q}{p-m} \\cdot q^{n})<br>$$<br>令数列$b_n&#x3D;a_n+ \\frac{q}{p-m} \\cdot q^{n}$，那么;<br>$$<br>b_{n+1}&#x3D;p \\cdot b_n<br>$$<br>即转化为等比数列</p>\n</blockquote>\n<h2 id=\"8-a-n-1-x3D-pa-q-n-型\"><a href=\"#8-a-n-1-x3D-pa-q-n-型\" class=\"headerlink\" title=\"8. $a_{n+1}&#x3D;pa^q_n$ 型\"></a>8. $a_{n+1}&#x3D;pa^q_n$ 型</h2><blockquote>\n<p>见到指数型，<strong>取对数</strong><br>$$<br>lga_{n+1}&#x3D;q\\cdot lga_n + lgp<br>$$<br>令数列$b_n&#x3D;lga_n$，有：<br>$$b_{n+1}&#x3D;qb_n+lgp$$<br>这依然是$a_{n+1}&#x3D;p \\cdot a_n + q$ 型，求解即可。</p>\n</blockquote>\n<h2 id=\"9-a-n-1-x3D-frac-a-cdot-a-n-b-cdot-a-n-c-型\"><a href=\"#9-a-n-1-x3D-frac-a-cdot-a-n-b-cdot-a-n-c-型\" class=\"headerlink\" title=\"9. $a_{n+1}&#x3D;\\frac{a\\cdot a_n}{b\\cdot a_n+c}$型\"></a>9. $a_{n+1}&#x3D;\\frac{a\\cdot a_n}{b\\cdot a_n+c}$型</h2><blockquote>\n<p><strong>倒数法</strong><br>两边取倒数：<br>$$\\frac{1}{a_{n+1}}&#x3D;\\frac{b}{a}\\cdot \\frac{1}{a_n}+\\frac{c}{a}$$<br>令数列$b_n&#x3D;\\frac{1}{a_n}$，有：<br>$$b_{n+1}&#x3D;\\frac{b}{a}\\cdot b_n+\\frac{c}{a}$$<br>即转化为$a_{n+1}&#x3D;p \\cdot a_n + q$ 型</p>\n</blockquote>\n<h2 id=\"10-a-n-1-x3D-frac-a-cdot-a-n-b-c-cdot-a-n-d-型\"><a href=\"#10-a-n-1-x3D-frac-a-cdot-a-n-b-c-cdot-a-n-d-型\" class=\"headerlink\" title=\"10. $a_{n+1}&#x3D;\\frac{a\\cdot a_n+b}{c\\cdot a_n+d}$型\"></a>10. $a_{n+1}&#x3D;\\frac{a\\cdot a_n+b}{c\\cdot a_n+d}$型</h2><blockquote>\n<p><strong>方法一：待定系数法</strong><br>受到上一种类型的启发，是否可以构造一个数列，使得该问题可以转化为上一种类型的问题？<br>两边同时加常数k：<br>$$a_{n+1}+k&#x3D;\\frac{(a+ck)\\cdot a_n+(b+dk)}{c\\cdot a_n+d}   （1）$$<br>想要取倒数之后，可以用另一个数列来换元，就需要右侧分子和左侧对应系数成比例：<br>$$\\frac{k}{1}&#x3D;\\frac{b+dk}{a+ck}$$<br>这是一个关于k的一元二次方程，分下面两种情况：</p>\n<ol>\n<li>若k有解，那么把k带入（1）式，再取倒数，对右侧进行分离常数，即可转化为$a_{n+1}&#x3D;\\frac{a\\cdot a_n}{b\\cdot a_n+c}$ 型；</li>\n<li>若k无解，那么数列${a_n}$是周期数列。</li>\n</ol>\n<p><strong>方法二：不动点法（了解）</strong><br>不动点的定义为：满足$f(x_0)&#x3D;x_0$的值$x_0$称为函数$f(x)$的不动点。<br>对于数列递推式$a_{n+1}&#x3D;\\frac{a\\cdot a_n+b}{c\\cdot a_n+d}$，把数列项全部换成x，有：<br>$$x&#x3D;\\frac{ax+b}{cx+d}$$<br>这是关于x的一元二次方程，会发现它和方法一中待定系数方程一样。这里详细地说一下它的解对数列的影响：</p>\n<ol>\n<li>若方程有两个解 $\\lambda$、$\\mu$,那么数列${\\frac{a_n-\\lambda}{a_n-\\mu}}$为等比数列；</li>\n<li>若方程有唯一解 $\\lambda$，那么数列${\\frac{1}{a_n-\\lambda}}$为等差数列；</li>\n<li>若方程无解，那么数列${a_n}$是周期数列。</li>\n</ol>\n<p><strong>该方法可以当做一个技巧去记忆，但是切记不可以钻牛角尖；在平时做题你会看到很多形如$a_{n+1}&#x3D;\\frac{a\\cdot a_n+b}{c\\cdot a_n+d}$的递推式，但是多数情况并不需要求它的递推式，尤其在小题中，可以使用不动点法判断${a_n}$是否为周期数列，否则不要把该方法当成第一考虑的方法。</strong></p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"数列通项公式总结\"><a href=\"#数列通项公式总结\" class=\"headerlink\" title=\"数列通项公式总结\"></a>数列通项公式总结</h1><h2 id=\"1-a-n-1-x3D-a-n-d-型\"><a href=\"#1-a-n-1-x3D-a-n-d-型\" class=\"headerlink\" title=\"1. $a_{n+1}&#x3D;a_{n}+d$ 型\"></a>1. $a_{n+1}&#x3D;a_{n}+d$ 型</h2><p>等差数列，略</p>\n<h2 id=\"2-a-n-1-x3D-q-cdot-a-n-型\"><a href=\"#2-a-n-1-x3D-q-cdot-a-n-型\" class=\"headerlink\" title=\"2. $a_{n+1}&#x3D;q \\cdot a_n$ 型\"></a>2. $a_{n+1}&#x3D;q \\cdot a_n$ 型</h2><p>等比数列，略</p>\n<h2 id=\"3-累加法\"><a href=\"#3-累加法\" class=\"headerlink\" title=\"3. 累加法\"></a>3. 累加法</h2><p><strong>常见形式为 $a_{n+1}&#x3D;a_n+f(n)$，且$f(n)$的前n项和易求得（比如等差、等比、差比、裂项等）</strong><br>有：<br>$$<br>a_n&#x3D;(a_n-a_{n-1})+(a_{n-1}-a_{n-2})+\\ldots +(a_2-a_1)&#x3D;f(n-1)+f(n-2)+\\ldots+f(1), (n \\geq 2)<br>$$</p>\n<h2 id=\"4-累乘法\"><a href=\"#4-累乘法\" class=\"headerlink\" title=\"4. 累乘法\"></a>4. 累乘法</h2><p><strong>常见形式为：</strong><br>$$<br>\\frac{a_{n+1}}{a_n}&#x3D;f(n)<br>$$<br>有：<br>$$<br>a_n&#x3D;\\frac{a_n}{a_{n-1}}\\cdot \\frac{a_{n-1}}{a_{n-2}}\\cdot \\ldots \\cdot \\frac{a_2}{a_1}<br>&#x3D;f(n-1)\\cdot f(n-2) \\cdot \\ldots \\cdot f(1)<br>$$</p>\n<h2 id=\"5-a-n-1-x3D-p-cdot-a-n-q-型\"><a href=\"#5-a-n-1-x3D-p-cdot-a-n-q-型\" class=\"headerlink\" title=\"5. $a_{n+1}&#x3D;p \\cdot a_n + q$ 型\"></a>5. $a_{n+1}&#x3D;p \\cdot a_n + q$ 型</h2><blockquote>\n<p><strong>核心思想：构造等比数列</strong><br><strong>方法一：待定系数法</strong><br>在等式两边加同一个常数，使得等式两边成等比数列：<br>$$<br>a_{n+1}+k &#x3D; p \\cdot a_n + q+k<br>$$<br>待定系数法确定k值，有：<br>$$<br>\\frac{k}{1}&#x3D;\\frac{q+k}{p}<br>$$<br>解得：<br>$$<br>k&#x3D;\\frac{q}{p-1}<br>$$<br>带回递推式：<br>$$<br>a_{n+1}+\\frac{q}{p-1} &#x3D; p \\cdot a_n + \\frac{pq}{p-1}&#x3D;p \\cdot (a_n+\\frac{q}{p-1})<br>$$<br>令数列$b_n&#x3D;a_n+\\frac{q}{p-1}$,得<br>$$<br>b_{n+1}&#x3D;p \\cdot b_n<br>$$<br>转化为等比数列求解即可</p>\n<p><strong>方法二：逐项相减法</strong><br>有：<br>$$a_{n+1}&#x3D;p \\cdot a_n + q\\\\a_{n}&#x3D;p \\cdot a_{n-1} + q$$<br>两式相减可得：<br>$$<br>a_{n+1}-a_n&#x3D;p \\cdot (a_n-a_{n-1}),n\\geq 2<br>$$<br>令数列 $b_n&#x3D;a_n-a_{n-1},n\\geq 2$,有：<br>$$b_{n+1}&#x3D;p\\cdot b_n$$<br>转化为等比数列求解即可<br><strong>特别地，$p&#x3D;1$时，k 值不存在，但是此时递推式直接退化为等差数列。</strong></p>\n</blockquote>\n<h2 id=\"6-a-n-1-x3D-pa-n-kn-b-型\"><a href=\"#6-a-n-1-x3D-pa-n-kn-b-型\" class=\"headerlink\" title=\"6. $a_{n+1}&#x3D;pa_n+kn+b$ 型\"></a>6. $a_{n+1}&#x3D;pa_n+kn+b$ 型</h2><blockquote>\n<p><strong>方法一：逐项相减法</strong><br>有：<br>$$<br>a_{n+1}&#x3D;pa_n+kn+b\\\\<br>a_n&#x3D;pa_{n-1}+k(n-1)+b<br>$$<br>两式相减得：<br>$$<br>a_{n+1}-a_n&#x3D;p(a_n-a_{n-1})+k,n\\geq 2<br>$$<br>令 $b_n&#x3D;a_n-a_{n-1},n\\geq 2$，有：<br>$$<br>b_{n+1}&#x3D;pb_n+k<br>$$<br>转化成$a_{n+1}&#x3D;p \\cdot a_n + q$ 型求解即可。</p>\n<p><strong>方法二：待定系数法</strong><br>此方法的思路依旧是<strong>构造等比数列</strong>。<br>在等式两边同时加一项 $x(n+1)+y$，得：<br>$$<br>a_{n+1}+x(n+1)+y&#x3D;pa_n+(x+k)n+x+y+b<br>$$<br>对应项成比例，有：<br>$$<br>x+k&#x3D;px\\\\x+y+b&#x3D;py<br>$$<br>解得：<br>$$x&#x3D;\\frac{k}{p-1}\\\\y&#x3D;\\frac{k}{(p-1)^2}+\\frac{b}{p-1}$$<br>带回原式：<br>$$a_{n+1}+\\frac{k}{p-1}(n+1)+\\frac{k+bp-b}{(p-1)^2}&#x3D;pa_n+\\frac{pk}{p-1}n+\\frac{pk+bp^2-bp}{(p-1)^2}$$<br>令$b_n&#x3D;a_{n}+\\frac{k}{p-1}n+\\frac{k+bp-b}{(p-1)^2}$，得：<br>$$b_{n+1}&#x3D;pb_n$$<br>转化为等比数列即可。</p>\n</blockquote>\n<h2 id=\"7-a-n-1-x3D-p-cdot-a-n-q-cdot-m-n-型\"><a href=\"#7-a-n-1-x3D-p-cdot-a-n-q-cdot-m-n-型\" class=\"headerlink\" title=\"7. $a_{n+1} &#x3D; p \\cdot a_n + q \\cdot m^n$ 型\"></a>7. $a_{n+1} &#x3D; p \\cdot a_n + q \\cdot m^n$ 型</h2><blockquote>\n<p><strong>核心思想：构造等比数列</strong><br><br><strong>方法一：</strong><br>在等式两边同时除以 $m^{n+1}$ 得：<br>$$<br>\\frac{a_{n+1}}{m^{n+1}}&#x3D;p \\cdot \\frac{a_n}{m^n} + \\frac{q}{m}<br>$$<br>令数列$b_n&#x3D;\\frac{a_n}{m^n}$,那么：<br>$$<br>b_{n+1}&#x3D;p \\cdot b_n + \\frac{q}{m}<br>$$<br>即转化为$a_{n+1}&#x3D;p \\cdot a_n + q$ 型</p>\n<p><strong>方法二：</strong><br>类似第三种$a_{n+1}&#x3D;p \\cdot a_n + q$ 型，在等式两边同时加一项 $k \\cdot m^{n+1}$，得：<br>$$<br>a_{n+1} + k \\cdot m^{n+1} &#x3D; p \\cdot a_n + (q+km)\\cdot m^n<br>$$<br>等比数列需要指数项和数列项成比例， 由待定系数法确定 <em>k</em> 值：<br>$$<br>\\frac{k}{1}&#x3D;\\frac{q+km}{p}<br>$$<br>解得<br>$$<br>k &#x3D; \\frac{q}{p-m}<br>$$<br>带回递推式<br>$$<br>a_{n+1} + \\frac{q}{p-m} \\cdot q^{n+1} &#x3D; p \\cdot a_n + (q+\\frac{q}{p-m}m)\\cdot q^n&#x3D; p \\cdot (a_n+ \\frac{q}{p-m} \\cdot q^{n})<br>$$<br>令数列$b_n&#x3D;a_n+ \\frac{q}{p-m} \\cdot q^{n}$，那么;<br>$$<br>b_{n+1}&#x3D;p \\cdot b_n<br>$$<br>即转化为等比数列</p>\n</blockquote>\n<h2 id=\"8-a-n-1-x3D-pa-q-n-型\"><a href=\"#8-a-n-1-x3D-pa-q-n-型\" class=\"headerlink\" title=\"8. $a_{n+1}&#x3D;pa^q_n$ 型\"></a>8. $a_{n+1}&#x3D;pa^q_n$ 型</h2><blockquote>\n<p>见到指数型，<strong>取对数</strong><br>$$<br>lga_{n+1}&#x3D;q\\cdot lga_n + lgp<br>$$<br>令数列$b_n&#x3D;lga_n$，有：<br>$$b_{n+1}&#x3D;qb_n+lgp$$<br>这依然是$a_{n+1}&#x3D;p \\cdot a_n + q$ 型，求解即可。</p>\n</blockquote>\n<h2 id=\"9-a-n-1-x3D-frac-a-cdot-a-n-b-cdot-a-n-c-型\"><a href=\"#9-a-n-1-x3D-frac-a-cdot-a-n-b-cdot-a-n-c-型\" class=\"headerlink\" title=\"9. $a_{n+1}&#x3D;\\frac{a\\cdot a_n}{b\\cdot a_n+c}$型\"></a>9. $a_{n+1}&#x3D;\\frac{a\\cdot a_n}{b\\cdot a_n+c}$型</h2><blockquote>\n<p><strong>倒数法</strong><br>两边取倒数：<br>$$\\frac{1}{a_{n+1}}&#x3D;\\frac{b}{a}\\cdot \\frac{1}{a_n}+\\frac{c}{a}$$<br>令数列$b_n&#x3D;\\frac{1}{a_n}$，有：<br>$$b_{n+1}&#x3D;\\frac{b}{a}\\cdot b_n+\\frac{c}{a}$$<br>即转化为$a_{n+1}&#x3D;p \\cdot a_n + q$ 型</p>\n</blockquote>\n<h2 id=\"10-a-n-1-x3D-frac-a-cdot-a-n-b-c-cdot-a-n-d-型\"><a href=\"#10-a-n-1-x3D-frac-a-cdot-a-n-b-c-cdot-a-n-d-型\" class=\"headerlink\" title=\"10. $a_{n+1}&#x3D;\\frac{a\\cdot a_n+b}{c\\cdot a_n+d}$型\"></a>10. $a_{n+1}&#x3D;\\frac{a\\cdot a_n+b}{c\\cdot a_n+d}$型</h2><blockquote>\n<p><strong>方法一：待定系数法</strong><br>受到上一种类型的启发，是否可以构造一个数列，使得该问题可以转化为上一种类型的问题？<br>两边同时加常数k：<br>$$a_{n+1}+k&#x3D;\\frac{(a+ck)\\cdot a_n+(b+dk)}{c\\cdot a_n+d}   （1）$$<br>想要取倒数之后，可以用另一个数列来换元，就需要右侧分子和左侧对应系数成比例：<br>$$\\frac{k}{1}&#x3D;\\frac{b+dk}{a+ck}$$<br>这是一个关于k的一元二次方程，分下面两种情况：</p>\n<ol>\n<li>若k有解，那么把k带入（1）式，再取倒数，对右侧进行分离常数，即可转化为$a_{n+1}&#x3D;\\frac{a\\cdot a_n}{b\\cdot a_n+c}$ 型；</li>\n<li>若k无解，那么数列${a_n}$是周期数列。</li>\n</ol>\n<p><strong>方法二：不动点法（了解）</strong><br>不动点的定义为：满足$f(x_0)&#x3D;x_0$的值$x_0$称为函数$f(x)$的不动点。<br>对于数列递推式$a_{n+1}&#x3D;\\frac{a\\cdot a_n+b}{c\\cdot a_n+d}$，把数列项全部换成x，有：<br>$$x&#x3D;\\frac{ax+b}{cx+d}$$<br>这是关于x的一元二次方程，会发现它和方法一中待定系数方程一样。这里详细地说一下它的解对数列的影响：</p>\n<ol>\n<li>若方程有两个解 $\\lambda$、$\\mu$,那么数列${\\frac{a_n-\\lambda}{a_n-\\mu}}$为等比数列；</li>\n<li>若方程有唯一解 $\\lambda$，那么数列${\\frac{1}{a_n-\\lambda}}$为等差数列；</li>\n<li>若方程无解，那么数列${a_n}$是周期数列。</li>\n</ol>\n<p><strong>该方法可以当做一个技巧去记忆，但是切记不可以钻牛角尖；在平时做题你会看到很多形如$a_{n+1}&#x3D;\\frac{a\\cdot a_n+b}{c\\cdot a_n+d}$的递推式，但是多数情况并不需要求它的递推式，尤其在小题中，可以使用不动点法判断${a_n}$是否为周期数列，否则不要把该方法当成第一考虑的方法。</strong></p>\n</blockquote>\n"},{"layout":"解决failed to configure a datasource ‘url‘ attribute is not specified","title":"解决failed to configure a datasource ‘url‘ attribute is not specified","date":"2023-03-31T07:18:40.000Z","_content":"# 解决failed to configure a datasource ‘url‘ attribute is not specified\n\n今天做项目的时候，jar包启动报了数据源url找不到的错误：\n```\n***************************\nAPPLICATION FAILED TO START\n***************************\n \nDescription:\n \nFailed to configure a DataSource: 'url' attribute is not specified and no embedded datasource could be configured.\n \nReason: Failed to determine a suitable driver class\n \n \nAction:\n \nConsider the following:\n  If you want an embedded database (H2, HSQL or Derby), please put it on the classpath.\n  If you have database settings to be loaded from a particular profile you may need to activate it (no profiles are currently active).\n \n \nProcess finished with exit code 1\n```\n报错信息提示找不到数据源url，但是迷惑的是，在application.properties文件下确实配置了，也没有问题：\n```\nspring.datasource.url=jdbc:mysql://localhost:3306/AIO\nspring.datasource.username=root\n#spring.datasource.password=Shark666@nju\nspring.datasource.password=123456\nspring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver\n```\n所以考虑是不是application.properties在打包时没有加载到classes目录下的问题，一看果然：\n![img](./application.png)\n那么原因在哪里，为什么加载不出来？\n经过排查，找到之前引入外部jar包作为库的时候，在pom.xml文件中加了一段代码：\n```\n        <resources>\n            <resource>\n                <directory>${project.basedir}/lib</directory>\n                <targetPath>/BOOT-INF/lib/</targetPath>\n                <includes>\n                    <include>**/*.jar</include>\n                </includes>\n            </resource>\n        </resources>\n```\n虽然不清楚这个配置的具体原理，不过想到spring有一些其他的配置，和这个include类似，不写在include内的其他东西会被排除掉，所以加了一段代码：\n```\n        <resources>\n            <resource>\n                <directory>${project.basedir}/lib</directory>\n                <targetPath>/BOOT-INF/lib/</targetPath>\n                <includes>\n                    <include>**/*.jar</include>\n                </includes>\n            </resource>\n            <resource>\n                <directory>src/main/resources</directory>\n                <targetPath>BOOT-INF/classes/</targetPath>\n                <includes>\n                    <include>**/*</include>\n                </includes>\n            </resource>\n        </resources>\n```\n再次打包就正常了。","source":"_posts/解决failed to configure a datasource ‘url‘ attribute is not specified.md","raw":"---\nlayout: '解决failed to configure a datasource ‘url‘ attribute is not specified'\ntitle: '解决failed to configure a datasource ‘url‘ attribute is not specified'\ndate: 2023-03-31 15:18:40\ntags: \n - spring boot\n - spring boot错误记录\n - Maven\ncategories: spring boot\n---\n# 解决failed to configure a datasource ‘url‘ attribute is not specified\n\n今天做项目的时候，jar包启动报了数据源url找不到的错误：\n```\n***************************\nAPPLICATION FAILED TO START\n***************************\n \nDescription:\n \nFailed to configure a DataSource: 'url' attribute is not specified and no embedded datasource could be configured.\n \nReason: Failed to determine a suitable driver class\n \n \nAction:\n \nConsider the following:\n  If you want an embedded database (H2, HSQL or Derby), please put it on the classpath.\n  If you have database settings to be loaded from a particular profile you may need to activate it (no profiles are currently active).\n \n \nProcess finished with exit code 1\n```\n报错信息提示找不到数据源url，但是迷惑的是，在application.properties文件下确实配置了，也没有问题：\n```\nspring.datasource.url=jdbc:mysql://localhost:3306/AIO\nspring.datasource.username=root\n#spring.datasource.password=Shark666@nju\nspring.datasource.password=123456\nspring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver\n```\n所以考虑是不是application.properties在打包时没有加载到classes目录下的问题，一看果然：\n![img](./application.png)\n那么原因在哪里，为什么加载不出来？\n经过排查，找到之前引入外部jar包作为库的时候，在pom.xml文件中加了一段代码：\n```\n        <resources>\n            <resource>\n                <directory>${project.basedir}/lib</directory>\n                <targetPath>/BOOT-INF/lib/</targetPath>\n                <includes>\n                    <include>**/*.jar</include>\n                </includes>\n            </resource>\n        </resources>\n```\n虽然不清楚这个配置的具体原理，不过想到spring有一些其他的配置，和这个include类似，不写在include内的其他东西会被排除掉，所以加了一段代码：\n```\n        <resources>\n            <resource>\n                <directory>${project.basedir}/lib</directory>\n                <targetPath>/BOOT-INF/lib/</targetPath>\n                <includes>\n                    <include>**/*.jar</include>\n                </includes>\n            </resource>\n            <resource>\n                <directory>src/main/resources</directory>\n                <targetPath>BOOT-INF/classes/</targetPath>\n                <includes>\n                    <include>**/*</include>\n                </includes>\n            </resource>\n        </resources>\n```\n再次打包就正常了。","slug":"解决failed to configure a datasource ‘url‘ attribute is not specified","published":1,"updated":"2024-04-09T10:59:25.135Z","comments":1,"photos":[],"link":"","_id":"clusa3wnu000t2s7ega7h1ukz","content":"<h1 id=\"解决failed-to-configure-a-datasource-‘url‘-attribute-is-not-specified\"><a href=\"#解决failed-to-configure-a-datasource-‘url‘-attribute-is-not-specified\" class=\"headerlink\" title=\"解决failed to configure a datasource ‘url‘ attribute is not specified\"></a>解决failed to configure a datasource ‘url‘ attribute is not specified</h1><p>今天做项目的时候，jar包启动报了数据源url找不到的错误：</p>\n<pre class=\"language-none\"><code class=\"language-none\">***************************\nAPPLICATION FAILED TO START\n***************************\n \nDescription:\n \nFailed to configure a DataSource: &#39;url&#39; attribute is not specified and no embedded datasource could be configured.\n \nReason: Failed to determine a suitable driver class\n \n \nAction:\n \nConsider the following:\n  If you want an embedded database (H2, HSQL or Derby), please put it on the classpath.\n  If you have database settings to be loaded from a particular profile you may need to activate it (no profiles are currently active).\n \n \nProcess finished with exit code 1</code></pre>\n<p>报错信息提示找不到数据源url，但是迷惑的是，在application.properties文件下确实配置了，也没有问题：</p>\n<pre class=\"language-none\"><code class=\"language-none\">spring.datasource.url&#x3D;jdbc:mysql:&#x2F;&#x2F;localhost:3306&#x2F;AIO\nspring.datasource.username&#x3D;root\n#spring.datasource.password&#x3D;Shark666@nju\nspring.datasource.password&#x3D;123456\nspring.datasource.driver-class-name&#x3D;com.mysql.cj.jdbc.Driver</code></pre>\n<p>所以考虑是不是application.properties在打包时没有加载到classes目录下的问题，一看果然：<br><img src=\"/2023/03/31/jie-jue-failed-to-configure-a-datasource-url-attribute-is-not-specified/application.png\" alt=\"img\"><br>那么原因在哪里，为什么加载不出来？<br>经过排查，找到之前引入外部jar包作为库的时候，在pom.xml文件中加了一段代码：</p>\n<pre class=\"language-none\"><code class=\"language-none\">&lt;resources&gt;\n    &lt;resource&gt;\n        &lt;directory&gt;$&#123;project.basedir&#125;&#x2F;lib&lt;&#x2F;directory&gt;\n        &lt;targetPath&gt;&#x2F;BOOT-INF&#x2F;lib&#x2F;&lt;&#x2F;targetPath&gt;\n        &lt;includes&gt;\n            &lt;include&gt;**&#x2F;*.jar&lt;&#x2F;include&gt;\n        &lt;&#x2F;includes&gt;\n    &lt;&#x2F;resource&gt;\n&lt;&#x2F;resources&gt;</code></pre>\n<p>虽然不清楚这个配置的具体原理，不过想到spring有一些其他的配置，和这个include类似，不写在include内的其他东西会被排除掉，所以加了一段代码：</p>\n<pre class=\"language-none\"><code class=\"language-none\">&lt;resources&gt;\n    &lt;resource&gt;\n        &lt;directory&gt;$&#123;project.basedir&#125;&#x2F;lib&lt;&#x2F;directory&gt;\n        &lt;targetPath&gt;&#x2F;BOOT-INF&#x2F;lib&#x2F;&lt;&#x2F;targetPath&gt;\n        &lt;includes&gt;\n            &lt;include&gt;**&#x2F;*.jar&lt;&#x2F;include&gt;\n        &lt;&#x2F;includes&gt;\n    &lt;&#x2F;resource&gt;\n    &lt;resource&gt;\n        &lt;directory&gt;src&#x2F;main&#x2F;resources&lt;&#x2F;directory&gt;\n        &lt;targetPath&gt;BOOT-INF&#x2F;classes&#x2F;&lt;&#x2F;targetPath&gt;\n        &lt;includes&gt;\n            &lt;include&gt;**&#x2F;*&lt;&#x2F;include&gt;\n        &lt;&#x2F;includes&gt;\n    &lt;&#x2F;resource&gt;\n&lt;&#x2F;resources&gt;</code></pre>\n<p>再次打包就正常了。</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"解决failed-to-configure-a-datasource-‘url‘-attribute-is-not-specified\"><a href=\"#解决failed-to-configure-a-datasource-‘url‘-attribute-is-not-specified\" class=\"headerlink\" title=\"解决failed to configure a datasource ‘url‘ attribute is not specified\"></a>解决failed to configure a datasource ‘url‘ attribute is not specified</h1><p>今天做项目的时候，jar包启动报了数据源url找不到的错误：</p>\n<pre class=\"language-none\"><code class=\"language-none\">***************************\nAPPLICATION FAILED TO START\n***************************\n \nDescription:\n \nFailed to configure a DataSource: &#39;url&#39; attribute is not specified and no embedded datasource could be configured.\n \nReason: Failed to determine a suitable driver class\n \n \nAction:\n \nConsider the following:\n  If you want an embedded database (H2, HSQL or Derby), please put it on the classpath.\n  If you have database settings to be loaded from a particular profile you may need to activate it (no profiles are currently active).\n \n \nProcess finished with exit code 1</code></pre>\n<p>报错信息提示找不到数据源url，但是迷惑的是，在application.properties文件下确实配置了，也没有问题：</p>\n<pre class=\"language-none\"><code class=\"language-none\">spring.datasource.url&#x3D;jdbc:mysql:&#x2F;&#x2F;localhost:3306&#x2F;AIO\nspring.datasource.username&#x3D;root\n#spring.datasource.password&#x3D;Shark666@nju\nspring.datasource.password&#x3D;123456\nspring.datasource.driver-class-name&#x3D;com.mysql.cj.jdbc.Driver</code></pre>\n<p>所以考虑是不是application.properties在打包时没有加载到classes目录下的问题，一看果然：<br><img src=\"/2023/03/31/jie-jue-failed-to-configure-a-datasource-url-attribute-is-not-specified/application.png\" alt=\"img\"><br>那么原因在哪里，为什么加载不出来？<br>经过排查，找到之前引入外部jar包作为库的时候，在pom.xml文件中加了一段代码：</p>\n<pre class=\"language-none\"><code class=\"language-none\">&lt;resources&gt;\n    &lt;resource&gt;\n        &lt;directory&gt;$&#123;project.basedir&#125;&#x2F;lib&lt;&#x2F;directory&gt;\n        &lt;targetPath&gt;&#x2F;BOOT-INF&#x2F;lib&#x2F;&lt;&#x2F;targetPath&gt;\n        &lt;includes&gt;\n            &lt;include&gt;**&#x2F;*.jar&lt;&#x2F;include&gt;\n        &lt;&#x2F;includes&gt;\n    &lt;&#x2F;resource&gt;\n&lt;&#x2F;resources&gt;</code></pre>\n<p>虽然不清楚这个配置的具体原理，不过想到spring有一些其他的配置，和这个include类似，不写在include内的其他东西会被排除掉，所以加了一段代码：</p>\n<pre class=\"language-none\"><code class=\"language-none\">&lt;resources&gt;\n    &lt;resource&gt;\n        &lt;directory&gt;$&#123;project.basedir&#125;&#x2F;lib&lt;&#x2F;directory&gt;\n        &lt;targetPath&gt;&#x2F;BOOT-INF&#x2F;lib&#x2F;&lt;&#x2F;targetPath&gt;\n        &lt;includes&gt;\n            &lt;include&gt;**&#x2F;*.jar&lt;&#x2F;include&gt;\n        &lt;&#x2F;includes&gt;\n    &lt;&#x2F;resource&gt;\n    &lt;resource&gt;\n        &lt;directory&gt;src&#x2F;main&#x2F;resources&lt;&#x2F;directory&gt;\n        &lt;targetPath&gt;BOOT-INF&#x2F;classes&#x2F;&lt;&#x2F;targetPath&gt;\n        &lt;includes&gt;\n            &lt;include&gt;**&#x2F;*&lt;&#x2F;include&gt;\n        &lt;&#x2F;includes&gt;\n    &lt;&#x2F;resource&gt;\n&lt;&#x2F;resources&gt;</code></pre>\n<p>再次打包就正常了。</p>\n"},{"title":"最长递增子序列（LIS）问题","date":"2024-04-06T05:36:40.000Z","_content":"[leetcode 300 最长递增子序列](https://leetcode.cn/problems/longest-increasing-subsequence/description/)\n\n# 题目描述\n\n> 给你一个整数数组 nums ，找到其中最长严格递增子序列的长度。\n>\n> 子序列 是由数组派生而来的序列，删除（或不删除）数组中的元素而不改变其余元素的顺序。\n\n这个题目第一反应是动态规划，dp数组表示以nums数组第i个元素结尾的子序列，最长递增长度为多少。\n状态转移方程为：\n$$\ndp[i] = \\max_{nums[j]<nums[i]} dp[j]+1\n$$\n时间复杂度为 $$o(n^2)$$，空间复杂度为$$o(n)$$\n\n# 贪心+二分查找\n\n二分查找可以达到$$O(nlogn)$$的复杂度，思路如下：\n\n1. 维护一个辅助数组 **p** ，它的每一项 $$p[i]$$ 的含义是，所有长度为 **i+1 **的上升子序列的末尾元素中的最小值；\n2. 遍历数组$$num$$ , 如果 $$nums[i]$$ 大于数组中最后一个元素,那么直接把该元素放到数组尾部 ; 否则使用二分查找寻找 $$nums[i]$$ 插入数组 ***p*** 的位置 ***j***  , 并使$$p[j]=nums[i]$$\n\n可知 , 数组 **p** 是严格递增的 . \n\n这种算法的思想是这样的:\n\n​\t在寻找最长递增子序列的过程中 , 我们希望子序列的增长尽可能的慢 , 这样在后续的遍历中才能放下更多的元素 。因此我们在遍历时，会使用$$nums[i]$$来替换$$p[j]$$的值，目的是使子序列 ***p*** 上升得尽可能慢，例如：\n\n​\t我们在遍历时已经得到了数组 ***p*** 为：\n$$\np = [1,3,5,7,9]\n$$\n​\t现在遍历到$$nums[i]=8$$,显然使用二分查找后，找到元素 8 应该在 ***p*** 中的下标为 4， 那么我们用 8 来替换 $$p[4]$$，得到：\n$$\np = [1,3,5,7,8]\n$$\n​\t这样就保证了在不降低递增子序列长度的前提下，使 ***p*** 增长得尽可能慢。\n\n​\t**注意：最后得到的数组 p 并不是最后的递增子序列，只能保证它的长度等于最大递增子序列的长度！**\n\n​\t考虑下面的数组：\n$$\nnums = [1,3,5,7,9,4]\n$$\n​\t我们在遍历到下标 4 的位置时，得到的数组 ***p*** 为\n$$\np = [1,3,5,7,9]\n$$\n​\t继续遍历到$$nums[5]=4$$时，按照算法，应该把它插入到$$p[2]$$的位置，于是得到数组 ***p*** 为\n$$\n p = [1,3,4,7,9]\n$$\n​\t这显然不是最后得到的最大递增子序列，只是它的长度是在遍历过程中出现过的最长递增子序列的长度而已。\n\n​\t\n\n实现的代码如下：\n\n```java\nclass Solution {\n    public int lengthOfLIS(int[] nums) {\n        List<Integer> list = new ArrayList<>();\n        for(int i=0;i<nums.length;i++){\n            if(list.size()==0||nums[i]>list.get(list.size()-1)){\n                list.add(nums[i]);\n            }else{\n                list.set(sort(list, nums[i]), nums[i]);\n            }\n        }\n        return list.size();\n    }\n\n    public int sort(List<Integer> list, int target){\n        int left=0,right=list.size(),mid;\n        while(left<right){\n            mid = left + ((right-left)>>1);\n            if(list.get(mid)<target){\n                left = mid + 1;\n            }else{\n                right = mid;\n            }\n        }\n        return left;\n    }\n}\n```\n\n\n\n","source":"_posts/最长递增子序列（LIS）问题.md","raw":"---\ntitle: 最长递增子序列（LIS）问题\ndate: 2024-04-06 13:36:40\ntags:\n - LIS\n - 二分查找\ncategories: 算法\n---\n[leetcode 300 最长递增子序列](https://leetcode.cn/problems/longest-increasing-subsequence/description/)\n\n# 题目描述\n\n> 给你一个整数数组 nums ，找到其中最长严格递增子序列的长度。\n>\n> 子序列 是由数组派生而来的序列，删除（或不删除）数组中的元素而不改变其余元素的顺序。\n\n这个题目第一反应是动态规划，dp数组表示以nums数组第i个元素结尾的子序列，最长递增长度为多少。\n状态转移方程为：\n$$\ndp[i] = \\max_{nums[j]<nums[i]} dp[j]+1\n$$\n时间复杂度为 $$o(n^2)$$，空间复杂度为$$o(n)$$\n\n# 贪心+二分查找\n\n二分查找可以达到$$O(nlogn)$$的复杂度，思路如下：\n\n1. 维护一个辅助数组 **p** ，它的每一项 $$p[i]$$ 的含义是，所有长度为 **i+1 **的上升子序列的末尾元素中的最小值；\n2. 遍历数组$$num$$ , 如果 $$nums[i]$$ 大于数组中最后一个元素,那么直接把该元素放到数组尾部 ; 否则使用二分查找寻找 $$nums[i]$$ 插入数组 ***p*** 的位置 ***j***  , 并使$$p[j]=nums[i]$$\n\n可知 , 数组 **p** 是严格递增的 . \n\n这种算法的思想是这样的:\n\n​\t在寻找最长递增子序列的过程中 , 我们希望子序列的增长尽可能的慢 , 这样在后续的遍历中才能放下更多的元素 。因此我们在遍历时，会使用$$nums[i]$$来替换$$p[j]$$的值，目的是使子序列 ***p*** 上升得尽可能慢，例如：\n\n​\t我们在遍历时已经得到了数组 ***p*** 为：\n$$\np = [1,3,5,7,9]\n$$\n​\t现在遍历到$$nums[i]=8$$,显然使用二分查找后，找到元素 8 应该在 ***p*** 中的下标为 4， 那么我们用 8 来替换 $$p[4]$$，得到：\n$$\np = [1,3,5,7,8]\n$$\n​\t这样就保证了在不降低递增子序列长度的前提下，使 ***p*** 增长得尽可能慢。\n\n​\t**注意：最后得到的数组 p 并不是最后的递增子序列，只能保证它的长度等于最大递增子序列的长度！**\n\n​\t考虑下面的数组：\n$$\nnums = [1,3,5,7,9,4]\n$$\n​\t我们在遍历到下标 4 的位置时，得到的数组 ***p*** 为\n$$\np = [1,3,5,7,9]\n$$\n​\t继续遍历到$$nums[5]=4$$时，按照算法，应该把它插入到$$p[2]$$的位置，于是得到数组 ***p*** 为\n$$\n p = [1,3,4,7,9]\n$$\n​\t这显然不是最后得到的最大递增子序列，只是它的长度是在遍历过程中出现过的最长递增子序列的长度而已。\n\n​\t\n\n实现的代码如下：\n\n```java\nclass Solution {\n    public int lengthOfLIS(int[] nums) {\n        List<Integer> list = new ArrayList<>();\n        for(int i=0;i<nums.length;i++){\n            if(list.size()==0||nums[i]>list.get(list.size()-1)){\n                list.add(nums[i]);\n            }else{\n                list.set(sort(list, nums[i]), nums[i]);\n            }\n        }\n        return list.size();\n    }\n\n    public int sort(List<Integer> list, int target){\n        int left=0,right=list.size(),mid;\n        while(left<right){\n            mid = left + ((right-left)>>1);\n            if(list.get(mid)<target){\n                left = mid + 1;\n            }else{\n                right = mid;\n            }\n        }\n        return left;\n    }\n}\n```\n\n\n\n","slug":"最长递增子序列（LIS）问题","published":1,"updated":"2024-04-09T10:59:25.135Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clusa3wob002k2s7e6hihfk1c","content":"<p><a href=\"https://leetcode.cn/problems/longest-increasing-subsequence/description/\">leetcode 300 最长递增子序列</a></p>\n<h1 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h1><blockquote>\n<p>给你一个整数数组 nums ，找到其中最长严格递增子序列的长度。</p>\n<p>子序列 是由数组派生而来的序列，删除（或不删除）数组中的元素而不改变其余元素的顺序。</p>\n</blockquote>\n<p>这个题目第一反应是动态规划，dp数组表示以nums数组第i个元素结尾的子序列，最长递增长度为多少。<br>状态转移方程为：<br>$$<br>dp[i] &#x3D; \\max_{nums[j]&lt;nums[i]} dp[j]+1<br>$$<br>时间复杂度为 $$o(n^2)$$，空间复杂度为$$o(n)$$</p>\n<h1 id=\"贪心-二分查找\"><a href=\"#贪心-二分查找\" class=\"headerlink\" title=\"贪心+二分查找\"></a>贪心+二分查找</h1><p>二分查找可以达到$$O(nlogn)$$的复杂度，思路如下：</p>\n<ol>\n<li>维护一个辅助数组 <strong>p</strong> ，它的每一项 $$p[i]$$ 的含义是，所有长度为 **i+1 **的上升子序列的末尾元素中的最小值；</li>\n<li>遍历数组$$num$$ , 如果 $$nums[i]$$ 大于数组中最后一个元素,那么直接把该元素放到数组尾部 ; 否则使用二分查找寻找 $$nums[i]$$ 插入数组 <em><strong>p</strong></em> 的位置 <em><strong>j</strong></em>  , 并使$$p[j]&#x3D;nums[i]$$</li>\n</ol>\n<p>可知 , 数组 <strong>p</strong> 是严格递增的 . </p>\n<p>这种算法的思想是这样的:</p>\n<p>​\t在寻找最长递增子序列的过程中 , 我们希望子序列的增长尽可能的慢 , 这样在后续的遍历中才能放下更多的元素 。因此我们在遍历时，会使用$$nums[i]$$来替换$$p[j]$$的值，目的是使子序列 <em><strong>p</strong></em> 上升得尽可能慢，例如：</p>\n<p>​\t我们在遍历时已经得到了数组 <em><strong>p</strong></em> 为：<br>$$<br>p &#x3D; [1,3,5,7,9]<br>$$<br>​\t现在遍历到$$nums[i]&#x3D;8$$,显然使用二分查找后，找到元素 8 应该在 <em><strong>p</strong></em> 中的下标为 4， 那么我们用 8 来替换 $$p[4]$$，得到：<br>$$<br>p &#x3D; [1,3,5,7,8]<br>$$<br>​\t这样就保证了在不降低递增子序列长度的前提下，使 <em><strong>p</strong></em> 增长得尽可能慢。</p>\n<p>​\t<strong>注意：最后得到的数组 p 并不是最后的递增子序列，只能保证它的长度等于最大递增子序列的长度！</strong></p>\n<p>​\t考虑下面的数组：<br>$$<br>nums &#x3D; [1,3,5,7,9,4]<br>$$<br>​\t我们在遍历到下标 4 的位置时，得到的数组 <em><strong>p</strong></em> 为<br>$$<br>p &#x3D; [1,3,5,7,9]<br>$$<br>​\t继续遍历到$$nums[5]&#x3D;4$$时，按照算法，应该把它插入到$$p[2]$$的位置，于是得到数组 <em><strong>p</strong></em> 为<br>$$<br> p &#x3D; [1,3,4,7,9]<br>$$<br>​\t这显然不是最后得到的最大递增子序列，只是它的长度是在遍历过程中出现过的最长递增子序列的长度而已。</p>\n<p>​\t</p>\n<p>实现的代码如下：</p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">lengthOfLIS</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> nums<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> list <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>nums<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">==</span><span class=\"token number\">0</span><span class=\"token operator\">||</span>nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">></span>list<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n                list<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span>\n                list<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token function\">sort</span><span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">,</span> nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">return</span> list<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">sort</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> list<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> target<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">int</span> left<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>right<span class=\"token operator\">=</span>list<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>mid<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>left<span class=\"token operator\">&lt;</span>right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            mid <span class=\"token operator\">=</span> left <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>right<span class=\"token operator\">-</span>left<span class=\"token punctuation\">)</span><span class=\"token operator\">>></span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>mid<span class=\"token punctuation\">)</span><span class=\"token operator\">&lt;</span>target<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n                left <span class=\"token operator\">=</span> mid <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span>\n                right <span class=\"token operator\">=</span> mid<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">return</span> left<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n\n\n\n","site":{"data":{}},"excerpt":"","more":"<p><a href=\"https://leetcode.cn/problems/longest-increasing-subsequence/description/\">leetcode 300 最长递增子序列</a></p>\n<h1 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h1><blockquote>\n<p>给你一个整数数组 nums ，找到其中最长严格递增子序列的长度。</p>\n<p>子序列 是由数组派生而来的序列，删除（或不删除）数组中的元素而不改变其余元素的顺序。</p>\n</blockquote>\n<p>这个题目第一反应是动态规划，dp数组表示以nums数组第i个元素结尾的子序列，最长递增长度为多少。<br>状态转移方程为：<br>$$<br>dp[i] &#x3D; \\max_{nums[j]&lt;nums[i]} dp[j]+1<br>$$<br>时间复杂度为 $$o(n^2)$$，空间复杂度为$$o(n)$$</p>\n<h1 id=\"贪心-二分查找\"><a href=\"#贪心-二分查找\" class=\"headerlink\" title=\"贪心+二分查找\"></a>贪心+二分查找</h1><p>二分查找可以达到$$O(nlogn)$$的复杂度，思路如下：</p>\n<ol>\n<li>维护一个辅助数组 <strong>p</strong> ，它的每一项 $$p[i]$$ 的含义是，所有长度为 **i+1 **的上升子序列的末尾元素中的最小值；</li>\n<li>遍历数组$$num$$ , 如果 $$nums[i]$$ 大于数组中最后一个元素,那么直接把该元素放到数组尾部 ; 否则使用二分查找寻找 $$nums[i]$$ 插入数组 <em><strong>p</strong></em> 的位置 <em><strong>j</strong></em>  , 并使$$p[j]&#x3D;nums[i]$$</li>\n</ol>\n<p>可知 , 数组 <strong>p</strong> 是严格递增的 . </p>\n<p>这种算法的思想是这样的:</p>\n<p>​\t在寻找最长递增子序列的过程中 , 我们希望子序列的增长尽可能的慢 , 这样在后续的遍历中才能放下更多的元素 。因此我们在遍历时，会使用$$nums[i]$$来替换$$p[j]$$的值，目的是使子序列 <em><strong>p</strong></em> 上升得尽可能慢，例如：</p>\n<p>​\t我们在遍历时已经得到了数组 <em><strong>p</strong></em> 为：<br>$$<br>p &#x3D; [1,3,5,7,9]<br>$$<br>​\t现在遍历到$$nums[i]&#x3D;8$$,显然使用二分查找后，找到元素 8 应该在 <em><strong>p</strong></em> 中的下标为 4， 那么我们用 8 来替换 $$p[4]$$，得到：<br>$$<br>p &#x3D; [1,3,5,7,8]<br>$$<br>​\t这样就保证了在不降低递增子序列长度的前提下，使 <em><strong>p</strong></em> 增长得尽可能慢。</p>\n<p>​\t<strong>注意：最后得到的数组 p 并不是最后的递增子序列，只能保证它的长度等于最大递增子序列的长度！</strong></p>\n<p>​\t考虑下面的数组：<br>$$<br>nums &#x3D; [1,3,5,7,9,4]<br>$$<br>​\t我们在遍历到下标 4 的位置时，得到的数组 <em><strong>p</strong></em> 为<br>$$<br>p &#x3D; [1,3,5,7,9]<br>$$<br>​\t继续遍历到$$nums[5]&#x3D;4$$时，按照算法，应该把它插入到$$p[2]$$的位置，于是得到数组 <em><strong>p</strong></em> 为<br>$$<br> p &#x3D; [1,3,4,7,9]<br>$$<br>​\t这显然不是最后得到的最大递增子序列，只是它的长度是在遍历过程中出现过的最长递增子序列的长度而已。</p>\n<p>​\t</p>\n<p>实现的代码如下：</p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">lengthOfLIS</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> nums<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> list <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>nums<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">==</span><span class=\"token number\">0</span><span class=\"token operator\">||</span>nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">></span>list<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n                list<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span>\n                list<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token function\">sort</span><span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">,</span> nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">return</span> list<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">sort</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> list<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> target<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">int</span> left<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>right<span class=\"token operator\">=</span>list<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>mid<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>left<span class=\"token operator\">&lt;</span>right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            mid <span class=\"token operator\">=</span> left <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>right<span class=\"token operator\">-</span>left<span class=\"token punctuation\">)</span><span class=\"token operator\">>></span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>mid<span class=\"token punctuation\">)</span><span class=\"token operator\">&lt;</span>target<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n                left <span class=\"token operator\">=</span> mid <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span>\n                right <span class=\"token operator\">=</span> mid<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">return</span> left<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n\n\n\n"},{"title":"Spring Boot常用注解","date":"2023-02-04T09:29:24.000Z","_content":"\n\n# 配置类相关\n## @Configuration\n> 声明一个类为配置类，用于取代bean.xml配置文件注册bean对象。<br/>\n> @Configuration注解中含有@Component注解，所以被@Configuration标记的配置类会作为一个bean对象被加载到ioc容器中。<br>\n> 它通常搭配@Bean注解和@Scope注解使用。\n\n>@Configuration有一个属性proxyBeanMethods，用于指定是否为懒加载，默认值为true。\nproxyBeanMethods = true的情况下，保持单实例对象，在spring容器启动时就会创建bean对象。这种情况主要用在bean对象的依赖情况下，如果存在一个bean依赖另一个bean时，一般会采用Full模式。\nproxyBeanMethods = false的情况下，不检查IOC容器中是否存在，而是简单的调用方法进行创建对象，无法保持单实例。当不存在bean对象的依赖问题时，会才有轻量级的配置。\n\n测试代码如下：\n```java\n@SpringBootApplication\npublic class TestSpringBootApp {\n    public static void main(String[] args) {\n        //获取ioc容器\n        ConfigurableApplicationContext run = SpringApplication.run(TestSpringBootApp.class);\n\n        Object dogBean = run.getBean(Dog.class);\n        System.out.println(dogBean);\n        User userBean = (User)run.getBean(User.class);\n        System.out.println(userBean);\n        System.out.println(userBean.getDog()==dogBean);\n    }\n}\n```\nUser类：\n```java\n@Data\n@NoArgsConstructor\n@AllArgsConstructor\n@ToString\npublic class User {\n    private Integer id;\n    private String name;\n    private Integer age;\n    private String email;\n\n    private Dog dog;\n}\n```\nDog类：\n```java\n@Data\n@NoArgsConstructor\n@AllArgsConstructor\n@ToString\npublic class Dog {\n    private Integer id;\n    private String name;\n    private Integer age;\n}\n\n```\ntestConfiguration类：\n```java\n@Configuration(proxyBeanMethods = false)//多例模式\npublic class TestConfiguration {\n\n    public static int count = 0;\n\n    @Bean\n    public User userBean(){\n        System.out.println(\"User对象创建\");\n        return new User(1,\"dfy\", 15, null, dogBean());\n    }\n\n    @Bean\n    public Dog dogBean(){\n        System.out.println(\"Dog对象第\"+ (++count)+\"次创建\");\n        return new Dog(1,\"六六\",3);\n    }\n}\n```\n输出结果如下：\n![输出结果](@Configuration1.png)\n\n\n如果改成单例模式，即```proxyBeanMethods = true```，那么输出结果将变成：\n![输出结果](@Configuration2.png)\n    \n\n## @Bean\n\n@Bean注解通常标记一个Supplier方法，用于声明一个bean对象的注册，默认的加载模式为饿汉单例。<br/>\n> 使用@Bean声明一个bean：\n\n\n\n```java\n@Configuration\npublic class TestConfiguration {\n\n    @Bean\n    public User userBean(){\n        System.out.println(\"User对象正在创建\");\n        return new User(1,\"dfy\", 15, null);\n    }\n}\n```\n```java\n@SpringBootApplication\npublic class TestSpringBootApp {\n    public static void main(String[] args) {\n        //获取ioc容器\n        ConfigurableApplicationContext run = SpringApplication.runTestSpringBootApp.class);\n        Object user = run.getBean(User.class);\n        System.out.println(user);\n    }\n}\n```\n输出结果为：\n ![输出结果](@Bean1.png)\n\n@Bean注解含有如下属性：\n```java\npublic @interface Bean {\n    @AliasFor(\"name\")\n    String[] value() default {};\n\n    @AliasFor(\"value\")\n    String[] name() default {};\n\n    /** @deprecated */\n    @Deprecated\n    Autowire autowire() default Autowire.NO;\n\n    boolean autowireCandidate() default true;\n\n    String initMethod() default \"\";\n\n    String destroyMethod() default \"(inferred)\";\n}\n ```\n* value和name\n    >可以看到value和name两个属性是一个别名对，它们的作用是指定该bean的名称。\n    如果在使用时未指定bean的名称，默认使用带注解方法的名称；如果指定了，方法本身的名称就会被忽略。\n\n\n```java\n@Configuration\npublic class TestConfiguration {\n\n    @Bean\n    public User userBean(){\n        System.out.println(\"未指定名称的User对象正在创建\");\n        return new User(1,\"dfy\", 15, null);\n    }\n\n    @Bean(\"User01\")\n    public User userBean01(){\n        System.out.println(\"指定名称的User对象正在创建\");\n        return new User(1,\"dfy\", 15, null);\n    }\n}\n```\n\n\n```java\n@SpringBootApplication\npublic class TestSpringBootApp {\n    public static void main(String[] args) {\n        //获取ioc容器\n        ConfigurableApplicationContext run = SpringApplication.run(TestSpringBootApp.class);\n        //获取所有bean对象的名称\n        String[] beanDefinitionNames = run.getBeanDefinitionNames();\n        for(String s : beanDefinitionNames){\n            System.out.println(s);\n        }\n    }\n}\n```\n\n\n输出结果如下：\n![输出结果](@Bean2.png)\n* autowire\n    >已弃用。\n    >autowire确定自动装配状态，即该bean创建时是否使用它的setter方法对它的成员变量进行自动装配。\n    Autowire是一个枚举类，有三个值：\n    > + NO：不自动装配\n    > + BY_NAME：根据名称自动装配\n    > + BY_TYPE：根据类型自动装配\n    >默认值是NO，即不自动装配。\n\n* autowireCandidate\n    > autowireCandidate和配置文件bean标签的autowireCandidate属性一样，就是让其他的bean在自动注入时，是否会装配当前的bean。 默认值true。\n\n\n```java\n@Configuration\npublic class TestConfiguration {\n\n    @Bean\n    public User userBean(){\n        return new User(1,\"dfy\", 15, null, null);\n    }\n\n    @Bean\n    public Dog dog1(){\n        return new Dog(1,\"狗宝\",5);\n    }\n\n    @Bean(autowireCandidate = false)//不作为自动注入的候选者\n    public Dog dog2(){\n        return new Dog(2,\"六六\",3);\n    }\n}\n```\n```java\n@Data\n@NoArgsConstructor\n@AllArgsConstructor\n@ToString\n@Component\npublic class User {\n    private Integer id;\n    private String name;\n    private Integer age;\n    private String email;\n    @Autowired\n    private Dog dog;\n}\n```\n```java\n@SpringBootApplication\npublic class TestSpringBootApp {\n    public static void main(String[] args) {\n        //获取ioc容器\n        ConfigurableApplicationContext run = SpringApplication.run(TestSpringBootApp.class);\n\n        Object userBean = run.getBean(\"userBean\");\n        System.out.println(userBean);\n    }\n}\n```\n输出结果为：\n```User(id=1, name=dfy, age=15, email=null, dog=Dog(id=1, name=狗宝, age=5))```\n如果取消dog2的```autowireCandidate = false```，spring容器会报```NoUniqueBeanDefinitionException```异常。\n有趣的是，虽然spring容器启动时可以正常装配第二个Dog对象，但是idea会编译报错：\n![自动装配报错](@Bean3.png)\n* initMethod和destroyMethod\n>用于指定bean的初始化和销毁方法。\n\n\n```java\n@Configuration\npublic class TestConfiguration {\n\n    @Bean(initMethod = \"userInit\", destroyMethod = \"userDestroy\")\n    public User userBean(){\n        return new User(1,\"dfy\", 15, null, null);\n    }\n}\n```\n\n\n```java\n@Data\n@NoArgsConstructor\n@AllArgsConstructor\n@ToString\n@Component\npublic class User {\n    private Integer id;\n    private String name;\n    private Integer age;\n    private String email;\n    public void userInit(){\n        System.out.println(\"User init...\");\n    }\n\n    public void userDestroy(){\n        System.out.println(\"User destroy...\");\n    }\n}\n```\n输出结果：\n![输出结果](@Bean4.png)\n\n\n\n## @Value\n>常用于标记成员变量，注入外部化属性\n@Value的三种用法：\n> * 注入普通属性\n    语法为@Value(...)，直接使用字面量即可\n> * 注入配置文件\n    语法为@Value(\"${...}\")，注入配置文件中写好的属性值\n> * 注入表达式并运算\n    语法为@Value(\"#{...}\")，写入spring框架的SpEl表达式即可\n    每个框架有自己的一套SpEl表达式，详情可以参考[官方文档](https://docs.spring.io/spring-framework/docs/current/reference/html/core.html#expressions)\n\n代码示例如下：\n```java\n@Data\n@NoArgsConstructor\n@AllArgsConstructor\n@ToString\n@Component\npublic class User {\n    @Value(\"10\")//注入普通属性\n    private Integer id;\n    @Value(\"${user_name}\")//注入外部配置文件\n    //application.yml中写入属性： user_name: user01\n    private String name;\n    @Value(\"#{2+1+3}\")//注入表达式\n    private Integer age;\n    private String email;\n    public void userInit(){\n        System.out.println(\"User init...\");\n    }\n\n    public void userDestroy(){\n        System.out.println(\"User destroy...\");\n    }\n}\n ```\n```java\n@Configuration\npublic class TestConfiguration {\n\n    @Bean\n    public User userBean(){\n        return new User(1,\"dfy\", 15, null);\n    }\n}\n ```\n该bean的输出结果为：\n```User(id=10, name=user01, age=6, email=null)```\n可以看到属性值已经成功注入，并且在new User对象时指定的默认值没有起到作用，被@Value的值覆盖掉了。\n\n## @Scope\n> @Scope通常和@Bean配合使用，用于指定该bean的作用域。它具有以下几种作用域：\n> * singleton 单例模式（默认值）\n> * prototype 多例模式\n> * request 每次http请求产生一个bean，该bean在本次HTTP request内有效\n> * session 每次http请求产生一个bean，该bean在本次HTTP session内有效\n\n# 生命周期相关\n## @Lazy(true)\n> @Lazy表明一个bean是否被延迟加载，当@Lazy的值设定为true（默认值即为true）时，表明该bean被延迟加载。\n> * 标记在方法上，表示该方法被延迟加载\n> * 标记在@Component的类上或是@Component作为元注解的类上（其实就是标记在一个bean上），表示该bean被延迟加载\n\n测试代码：\n```java\n@Data\n@AllArgsConstructor\n@ToString\n@Component\n@Lazy//延迟加载\npublic class User {\n    private Integer id;\n    private String name;\n    private Integer age;\n    private String email;\n    private Dog dog;\n\n    public User() {\n        System.out.println(\"User 对象被创建\");\n    }\n}\n ```\n在spring启动时未看到User对象的创建：\n![输出结果](@Lazy1.png)\n## @PostConstruct 和 @PreDestory\n> 实现初始化和销毁bean之前进行的操作，只能有一个方法可以用此注释进行注释，方法不能有参数，返回值必需是void,方法需要是非静态的,不能抛出异常。\n> * @PostConstruct：在构造方法和init方法（如果有的话）之间得到调用，且只会执行一次。\n> * @PreDestory：注解的方法在destory()方法调用后得到执行。\n\n代码示例：\n```java\n@Configuration\npublic class TestConfiguration {\n\n    @Bean(initMethod = \"init\",destroyMethod = \"destroy\")\n    public Dog dogBean(){\n        System.out.println(\"Dog对象配置类中创建...\");\n        return new Dog(1,\"六六\",3);\n    }\n}\n ```\n```java\n@Data\n@NoArgsConstructor\n@AllArgsConstructor\n@ToString\npublic class Dog {\n    private Integer id;\n    private String name;\n    private Integer age;\n\n    public void init(){\n        System.out.println(\"Dog对象初始化...\");\n    }\n\n    public void destroy(){\n        System.out.println(\"Dog对象销毁...\");\n    }\n\n    @PostConstruct\n    public void postConstruct(){\n        System.out.println(\"Dog对象初始化之前...\");\n    }\n\n    @PreDestroy\n    public void preDestroy(){\n        System.out.println(\"Dog对象销毁之后...\");\n    }\n}\n ```\nspring启动后结果为：\n![输出结果](@PreDestroy1.png)\n# bean对象相关\n\n## @Controller, @Service, @Repository, @Compnent\n\n这四个注解的作用没有区别，都是声明一个bean对象注册到ioc容器中。但是为了程序可读性和开发规范，在使用时依然要按照java类的实际作用去使用。\n\n在使用时只需要把它们标注在一个类上，spring容器启动时就会把对象创建好注入ioc：\n```java\n@Data\n@NoArgsConstructor\n@AllArgsConstructor\n@ToString\n@Component\npublic class Dog {\n    private Integer id;\n    private String name;\n    private Integer age;\n}\n ```\n![输出结果](@Component1.png)\n\n也可以给这些注解一个值，作为bean对象的名称：\n```java\n@Data\n@NoArgsConstructor\n@AllArgsConstructor\n@ToString\n@Component(\"firstDog\")\npublic class Dog {\n    private Integer id;\n    private String name;\n    private Integer age;\n}\n ```\n![输出结果](@Component2.png)\n## @Named和@Inject\n> 这两个注解是JSR-330的一部分。在Spring 3中，开始支持JSR-330的注解。这些注解在使用上和Spring的注解一样，所不同的只是需要额外的相关jar包。你可以使用下面的注解在spring 3应用中。\n@Inject替代@Autowired来执行注入\n@Named替代@Component来声明一个Bean\n\n> 在springboot项目中，使用这两个注解需要先引入依赖：\n> ```xml\n>    <dependency>\n>        <groupId>javax.inject</groupId>\n>        <artifactId>javax.inject</artifactId>\n>        <version>1</version>\n>    </dependency>\n> ```\n\n> * @Named功能和@Component注解相同，它的值用于指定bean的名称，如果没有值默认使用类名作为bean名称。\n> * @Inject注解在spring环境下，和@Autowired是相同的。\n\n  \n## @Autowired和@Resource\n> 这两个注解的作用相同，用于bean对象的自动装配。\n\n使用示例：\n```java\n//@Autowired\n@Resource\nprivate Dog dog;\n ```\n下面详细说一下@Autowired的装配原理：\n> * @Autowired默认按照ByType类型进行装配。\n> * 若ByType类型匹配到多个bean，那么按照ByName类型装配：\n>     * 若没有和@Qualifier搭配使用，默认按照变量名作为bean名称去匹配（例如上面Dog的例子，默认使用变量名dog作为bean名称），这种情况下若没有匹配到bean，会报NoUniqueBeanDefinationException异常。\n>     * 若搭配@Qualifier使用，会按照@Qualifier注解指定的bean名称进行匹配，如果没有匹配到，会报NoSuchBeanDefinitionException异常。\n> * @Autowired有一个required属性，默认值为true，表示不接受空值，若没有匹配到bean报错。如果设置为false，表示允许null。\n\n@Resource和@Autowired的区别：\n> @Resource默认按照Byname方式匹配bean，匹配失败会回滚到@Autowired。\n可以手动指定bean,它有2个属性分别是name和type，使用name属性，则使用byName的自动注入，而使用type属性时则使用byType自动注入。\n@Resource(name=”bean名字”)或@Resource(type=”bean的class”)\n  \n  \n## @Primary\n> 自动装配时当出现多个Bean候选者时，被注解为@Primary的Bean将作为首选者，否则将抛出异常。\n\n# 多线程\n## @Async\n1. 在方法上使用该@Async注解，申明该方法是一个异步任务；\n2. 在类上面使用该@Async注解，申明该类中的所有方法都是异步任务；\n3. 使用此注解的方法的类对象，必须是spring管理下的bean对象； \n4. 要想使用异步任务，需要在主类上开启异步配置，即，配置上@EnableAsync注解\n<https://blog.csdn.net/qq_44750696/article/details/123960134>\n# 参数校验\n## @Valid,@Valided\n<https://blog.csdn.net/weixin_51439775/article/details/128386125>\n\n# WEB相关\n\n## @RequestBody\n> 获取request请求体中的内容，常用来处理content-type不是默认的application/x-www-form-urlcoded编码（form表单格式）的内容，比如说：application/json或者是application/xml等。一般情况下来说常用其来处理application/json类型。\n\n> @RequestBody注解可以解析请求体中json格式的数据，并将其封装到javaBean中。\n\n测试：\n\n使用postman发送请求，请求体中使用json格式字符串。\n![发送请求](@RequestBody1.png)\n在后端代码可以用String来接收，接收结果是原json字符串：\n```java\n@Controller\npublic class TestController {\n\n    @RequestMapping(\"/\")\n    public String welcome(@RequestBody(required = false) String dog){\n        System.out.println(dog);\n        return \"index\";\n    }\n}\n ```\n控制台输出：```{\"id\":\"1\",\"name\":\"六六\",\"age\":\"3\"}```\n\n\n也可以用对象来接收，接收结果是json字符串封装后的对象：\n```java\n@Controller\npublic class TestController {\n\n    @RequestMapping(\"/\")\n    public String welcome(@RequestBody(required = false) Dog dog){\n        System.out.println(dog);\n        return \"index\";\n    }\n}\n ```\n控制台输出：```Dog(id=1, name=六六, age=3)```\n\n如果使用@RequestBody注解来接收form表单的请求（即application/x-www-form-urlcoded编码）会报415，并在控制台报出编码格式不支持的错误：\n```Resolved [org.springframework.web.HttpMediaTypeNotSupportedException: Content type 'application/x-www-form-urlencoded;charset=UTF-8' not supported]```\n\n## @RequestParam\n用于将请求参数映射到控制层方法的参数上。\n@RequestParam含有以下三个属性：\n* value：设置传入的参数的名称，若不设置默认使用变量值。\n* required：设置该参数是否必填。表示请求中一定要传入对应的参数，否则会报404错误，如果设置为false时，当请求中没有此参数，将会默认为null,而对于基本数据类型的变量，则必须有值，这时会抛出空指针异常。\n* defaultValue：参数的默认值，如果请求中没有同名的参数时，该变量默认为此值。注意默认值可以使用SpEL表达式。\n## @PathVariable\n处理请求的URL，把占位符绑定到controller的方法参数上。\n该注解有两个属性：\n* value：设置匹配的占位符的名称，若不设置，默认使用参数名称匹配占位符。\n* required：设置该参数是否必填，默认值为true，表示URL中必须含有匹配的占位符，否则将抛出异常。\n\n\n使用方法例如：\n```java\n@GetMapping({\"/{page}/{pageSize}\",\"/delete/{page}/{pageSize}\"})\npublic String toEmpPage(HttpServletRequest request,\n                        @PathVariable(\"page\") Integer page,\n                        @PathVariable(\"pageSize\") Integer pageSize) {\n    //业务部分\n}\n ```\n上述代码即是把URL中的{page}和{pageSize}分别绑定到方法参数中的page和pageSize上。\n\n## @RequestHeader\n用于把请求头中的参数绑定到方法参数上。\n它有三个属性，和@RequestParam注解完全相同。\n## @CookieValue\n用于把请求中的cookie绑定到方法参数上。\n它的属性同上。\n## @ModelAttribute\n@ModelAttribute的作用是把数据添加进模型对象中，供前端页面渲染使用。它的用法有很多：\n1. 入参处使用\n    > 将@ModelAttribute注解标记在入参上，在渲染页面之前就会自动把标记的入参添加到模型对象中。\n\n示例代码：\n```java\n@Controller\npublic class TestController {\n\n    @RequestMapping(\"/\")\n    public String welcome(@ModelAttribute(\"msg2\")String msg2){\n        return \"index\";\n    }\n}\n```\n\n前端代码：\n```HTML\n<form th:action=\"@{/}\" method=\"post\">\n    <label>\n        msg2:\n        <input type=\"text\" name=\"msg2\"/>\n    </label>\n    <input type=\"submit\">\n    <p th:text=\"${msg2}\"></p><!--  前端提交表单后，后端再次返回该页面，并将上次输入的信息显示在此处   -->\n</form>\n```\n结果：\n发送之前：![页面效果](@ModelAttribute1.png)\n发送之后：![页面效果](@ModelAttribute2.png)\n\n\n2. 方法上使用\n   被@ModelAttribute注释的方法会在此controller的每个方法执行前被执行 ，如果有返回值，则自动将该返回值加入到ModelMap中。\n   * 若注解没有返回值的方法，一般在方法体内部用model对象手动加入：\n  \n\n```java\n@Controller\npublic class TestController {\n\n    @ModelAttribute\n    public void before(@RequestParam String msg2, Model model){\n        model.addAttribute(\"msg2\",msg2);\n    }\n\n    @RequestMapping(\"/\")\n    public String welcome(){\n        return \"index\";\n    }\n}\n```\n\n   * 若注解有返回值的方法，建议通过@ModelAttribute(value = \"\")指定名称，若不指定，默认使用返回类型小写作为名称。\n\n\n```java\n@Controller\npublic class TestController {\n\n    @ModelAttribute//不指定名称，属性名为返回类型小写，即string\n    public String before(@RequestParam String msg2){\n        System.out.println(msg2);\n        return msg2;\n    }\n\n    @RequestMapping(\"/\")\n    public String welcome(){\n        return \"index\";\n    }\n}\n  ```\n        \n\n## @SessionAttributes\n将ModelMap等方式传到前端的属性值共享到session中。\n> @SessionAttributes注解只能使用在类上，用于在多个请求之间传递参数，类似于Session的Attribute，但不完全一样，一般来说@SessionAttributes设置的参数只用于暂时的传递（存入sessionAttributeStore），而不是长期的保存，长期保存的数据还是要放到Session中。\n\n\n> 有两种方式将ModelMap中的属性值共享到session中：\n> + 使用注解的value属性：可以通过属性名指定需要放到会话中的属性；\n> + 使用注解的types属性：还可以通过模型属性的对象类型指定哪些模型属性需要放到会话中。\n\n## @CrossOrigin\n\n## @RestController\n## @ControllerAdvice\n@ControllerAdvice的作用也是声明一个控制层组件，通常用于全局异常处理、添加全局数据以及请求参数预处理。\n* 全局异常处理\n  > 搭配@ExceptionHandler注解使用。@ExceptionHandler注解只有一个属性value，是一个Throwable类型的数组，它的作用是设置匹配异常的种类，当Controller层出现value数组内的异常时，将调用被@ExceptionHandler标记的方法。\n\n  > 方法的参数可以包括异常实例、HttpServletRequest、HttpServletResponse、Model等；返回值可以是void、Json（需要用@ResponseBody标记）、ModelAndView（可以添加数据、设置视图名称）、甚至是逻辑视图名。\n\n示例代码：\n```java\n@ControllerAdvice\npublic class TestControllerAdvice {\n    @ExceptionHandler(ArithmeticException.class)\n    public ModelAndView exceptionHandler(){\n        System.out.println(\"出现异常\");\n        ModelAndView model = new ModelAndView();\n        model.addObject(\"msg2\",\"出现异常！\");\n        model.setViewName(\"index\");\n        return model;\n    }\n}\n```\n```java\n@Controller\npublic class TestController {\n\n    @RequestMapping(\"/\")\n    public String welcome(){\n        int a = 1/0;\n        return \"index\";\n    }\n}\n```\n浏览器访问该方法时触发ArithmeticException异常，返回页面如下：\n![页面](Spring-Boot常用注解/@ControllerAdvice1.png)\n* 添加全局数据\n  > 搭配@ModelAttribute注解使用。@ModelAttribute标记一个方法，该方法的返回值将作为全局数据，所有Controller层方法和页面都可以访问到。\n\n    示例代码如下：\n    controllerAdvice：\n```java\n    @ControllerAdvice\n    public class TestControllerAdvice {\n\n        @ModelAttribute(value = \"user\")//model中的key\n        public Map<String,String> GlobalConfig(){\n            HashMap<String,String> map = new HashMap<>();\n            map.put(\"username\", \"dfy\");\n            map.put(\"age\", \"18\");\n            return map;//model中的value\n        }\n    }\n```\ncontroller:\n```java\n    @Controller\n    public class TestController {\n\n        @RequestMapping(\"/\")\n        public String welcome(Model model){\n            Map<String, Object> map = model.asMap();\n            Set<String> keySet = map.keySet();\n            Iterator<String> iterator = keySet.iterator();\n            while(iterator.hasNext()){\n                String key = iterator.next();\n                Object value = map.get(key);\n                System.out.println(key + \"=\" + value);\n            }\n            return \"index\";\n        }\n    }\n```\n页面：\n```HTML\n    <p th:text=\"${user.username}\"></p>\n    <p th:text=\"${user.age}\"></p>\n```\n控制台输出为：\n```user={age=18, username=dfy}```\n页面输出为：\n![页面](@ControllerAdvice2.png)\n\n* 请求参数预处理\n  搭配@InitBinder注解使用。被@InitBinder标记的方法，参数中必须要含有WebDataBinder，具体用法如下：\n  ```java\n    @InitBinder\n    public void initBinder(WebDataBinder binder){\n        binder.registerCustomEditor(String.class, new StringTrimmerEditor(true));\n    }\n  ```\n  通过WebDataBinder类的registerCustomEditor方法来注册请求参数的预处理器，它的方法参数为：\n  ```registerCustomEditor(Class<?> requiredType, PropertyEditor propertyEditor)```\n  requiredType代表该预处理器处理的数据类型；propertyEditor代表预处理器，它的实现类有很多，这里不一一列举。\n  自定义属性编辑器可以通过继承```java.beans.PropertyEditorSupport```类并重写其```setAsText```方法实现，最后调用setValue(Object Value)方法完成转换后的值的设置。\n\n  还有其他花式用法，具体可参见博客<https://blog.csdn.net/wang0907/article/details/108357696>\n\n## 元注解包括  @Retention @Target @Document @Inherited四种\n## @RequestMapping\n## @GetMapping和@PostMapping\n","source":"_posts/Spring-Boot常用注解.md","raw":"---\ntitle: Spring Boot常用注解\ntags:  \n    - spring\n    - spring boot\ncategories: spring boot\ndate: 2023-02-04 17:29:24\n---\n\n\n# 配置类相关\n## @Configuration\n> 声明一个类为配置类，用于取代bean.xml配置文件注册bean对象。<br/>\n> @Configuration注解中含有@Component注解，所以被@Configuration标记的配置类会作为一个bean对象被加载到ioc容器中。<br>\n> 它通常搭配@Bean注解和@Scope注解使用。\n\n>@Configuration有一个属性proxyBeanMethods，用于指定是否为懒加载，默认值为true。\nproxyBeanMethods = true的情况下，保持单实例对象，在spring容器启动时就会创建bean对象。这种情况主要用在bean对象的依赖情况下，如果存在一个bean依赖另一个bean时，一般会采用Full模式。\nproxyBeanMethods = false的情况下，不检查IOC容器中是否存在，而是简单的调用方法进行创建对象，无法保持单实例。当不存在bean对象的依赖问题时，会才有轻量级的配置。\n\n测试代码如下：\n```java\n@SpringBootApplication\npublic class TestSpringBootApp {\n    public static void main(String[] args) {\n        //获取ioc容器\n        ConfigurableApplicationContext run = SpringApplication.run(TestSpringBootApp.class);\n\n        Object dogBean = run.getBean(Dog.class);\n        System.out.println(dogBean);\n        User userBean = (User)run.getBean(User.class);\n        System.out.println(userBean);\n        System.out.println(userBean.getDog()==dogBean);\n    }\n}\n```\nUser类：\n```java\n@Data\n@NoArgsConstructor\n@AllArgsConstructor\n@ToString\npublic class User {\n    private Integer id;\n    private String name;\n    private Integer age;\n    private String email;\n\n    private Dog dog;\n}\n```\nDog类：\n```java\n@Data\n@NoArgsConstructor\n@AllArgsConstructor\n@ToString\npublic class Dog {\n    private Integer id;\n    private String name;\n    private Integer age;\n}\n\n```\ntestConfiguration类：\n```java\n@Configuration(proxyBeanMethods = false)//多例模式\npublic class TestConfiguration {\n\n    public static int count = 0;\n\n    @Bean\n    public User userBean(){\n        System.out.println(\"User对象创建\");\n        return new User(1,\"dfy\", 15, null, dogBean());\n    }\n\n    @Bean\n    public Dog dogBean(){\n        System.out.println(\"Dog对象第\"+ (++count)+\"次创建\");\n        return new Dog(1,\"六六\",3);\n    }\n}\n```\n输出结果如下：\n![输出结果](@Configuration1.png)\n\n\n如果改成单例模式，即```proxyBeanMethods = true```，那么输出结果将变成：\n![输出结果](@Configuration2.png)\n    \n\n## @Bean\n\n@Bean注解通常标记一个Supplier方法，用于声明一个bean对象的注册，默认的加载模式为饿汉单例。<br/>\n> 使用@Bean声明一个bean：\n\n\n\n```java\n@Configuration\npublic class TestConfiguration {\n\n    @Bean\n    public User userBean(){\n        System.out.println(\"User对象正在创建\");\n        return new User(1,\"dfy\", 15, null);\n    }\n}\n```\n```java\n@SpringBootApplication\npublic class TestSpringBootApp {\n    public static void main(String[] args) {\n        //获取ioc容器\n        ConfigurableApplicationContext run = SpringApplication.runTestSpringBootApp.class);\n        Object user = run.getBean(User.class);\n        System.out.println(user);\n    }\n}\n```\n输出结果为：\n ![输出结果](@Bean1.png)\n\n@Bean注解含有如下属性：\n```java\npublic @interface Bean {\n    @AliasFor(\"name\")\n    String[] value() default {};\n\n    @AliasFor(\"value\")\n    String[] name() default {};\n\n    /** @deprecated */\n    @Deprecated\n    Autowire autowire() default Autowire.NO;\n\n    boolean autowireCandidate() default true;\n\n    String initMethod() default \"\";\n\n    String destroyMethod() default \"(inferred)\";\n}\n ```\n* value和name\n    >可以看到value和name两个属性是一个别名对，它们的作用是指定该bean的名称。\n    如果在使用时未指定bean的名称，默认使用带注解方法的名称；如果指定了，方法本身的名称就会被忽略。\n\n\n```java\n@Configuration\npublic class TestConfiguration {\n\n    @Bean\n    public User userBean(){\n        System.out.println(\"未指定名称的User对象正在创建\");\n        return new User(1,\"dfy\", 15, null);\n    }\n\n    @Bean(\"User01\")\n    public User userBean01(){\n        System.out.println(\"指定名称的User对象正在创建\");\n        return new User(1,\"dfy\", 15, null);\n    }\n}\n```\n\n\n```java\n@SpringBootApplication\npublic class TestSpringBootApp {\n    public static void main(String[] args) {\n        //获取ioc容器\n        ConfigurableApplicationContext run = SpringApplication.run(TestSpringBootApp.class);\n        //获取所有bean对象的名称\n        String[] beanDefinitionNames = run.getBeanDefinitionNames();\n        for(String s : beanDefinitionNames){\n            System.out.println(s);\n        }\n    }\n}\n```\n\n\n输出结果如下：\n![输出结果](@Bean2.png)\n* autowire\n    >已弃用。\n    >autowire确定自动装配状态，即该bean创建时是否使用它的setter方法对它的成员变量进行自动装配。\n    Autowire是一个枚举类，有三个值：\n    > + NO：不自动装配\n    > + BY_NAME：根据名称自动装配\n    > + BY_TYPE：根据类型自动装配\n    >默认值是NO，即不自动装配。\n\n* autowireCandidate\n    > autowireCandidate和配置文件bean标签的autowireCandidate属性一样，就是让其他的bean在自动注入时，是否会装配当前的bean。 默认值true。\n\n\n```java\n@Configuration\npublic class TestConfiguration {\n\n    @Bean\n    public User userBean(){\n        return new User(1,\"dfy\", 15, null, null);\n    }\n\n    @Bean\n    public Dog dog1(){\n        return new Dog(1,\"狗宝\",5);\n    }\n\n    @Bean(autowireCandidate = false)//不作为自动注入的候选者\n    public Dog dog2(){\n        return new Dog(2,\"六六\",3);\n    }\n}\n```\n```java\n@Data\n@NoArgsConstructor\n@AllArgsConstructor\n@ToString\n@Component\npublic class User {\n    private Integer id;\n    private String name;\n    private Integer age;\n    private String email;\n    @Autowired\n    private Dog dog;\n}\n```\n```java\n@SpringBootApplication\npublic class TestSpringBootApp {\n    public static void main(String[] args) {\n        //获取ioc容器\n        ConfigurableApplicationContext run = SpringApplication.run(TestSpringBootApp.class);\n\n        Object userBean = run.getBean(\"userBean\");\n        System.out.println(userBean);\n    }\n}\n```\n输出结果为：\n```User(id=1, name=dfy, age=15, email=null, dog=Dog(id=1, name=狗宝, age=5))```\n如果取消dog2的```autowireCandidate = false```，spring容器会报```NoUniqueBeanDefinitionException```异常。\n有趣的是，虽然spring容器启动时可以正常装配第二个Dog对象，但是idea会编译报错：\n![自动装配报错](@Bean3.png)\n* initMethod和destroyMethod\n>用于指定bean的初始化和销毁方法。\n\n\n```java\n@Configuration\npublic class TestConfiguration {\n\n    @Bean(initMethod = \"userInit\", destroyMethod = \"userDestroy\")\n    public User userBean(){\n        return new User(1,\"dfy\", 15, null, null);\n    }\n}\n```\n\n\n```java\n@Data\n@NoArgsConstructor\n@AllArgsConstructor\n@ToString\n@Component\npublic class User {\n    private Integer id;\n    private String name;\n    private Integer age;\n    private String email;\n    public void userInit(){\n        System.out.println(\"User init...\");\n    }\n\n    public void userDestroy(){\n        System.out.println(\"User destroy...\");\n    }\n}\n```\n输出结果：\n![输出结果](@Bean4.png)\n\n\n\n## @Value\n>常用于标记成员变量，注入外部化属性\n@Value的三种用法：\n> * 注入普通属性\n    语法为@Value(...)，直接使用字面量即可\n> * 注入配置文件\n    语法为@Value(\"${...}\")，注入配置文件中写好的属性值\n> * 注入表达式并运算\n    语法为@Value(\"#{...}\")，写入spring框架的SpEl表达式即可\n    每个框架有自己的一套SpEl表达式，详情可以参考[官方文档](https://docs.spring.io/spring-framework/docs/current/reference/html/core.html#expressions)\n\n代码示例如下：\n```java\n@Data\n@NoArgsConstructor\n@AllArgsConstructor\n@ToString\n@Component\npublic class User {\n    @Value(\"10\")//注入普通属性\n    private Integer id;\n    @Value(\"${user_name}\")//注入外部配置文件\n    //application.yml中写入属性： user_name: user01\n    private String name;\n    @Value(\"#{2+1+3}\")//注入表达式\n    private Integer age;\n    private String email;\n    public void userInit(){\n        System.out.println(\"User init...\");\n    }\n\n    public void userDestroy(){\n        System.out.println(\"User destroy...\");\n    }\n}\n ```\n```java\n@Configuration\npublic class TestConfiguration {\n\n    @Bean\n    public User userBean(){\n        return new User(1,\"dfy\", 15, null);\n    }\n}\n ```\n该bean的输出结果为：\n```User(id=10, name=user01, age=6, email=null)```\n可以看到属性值已经成功注入，并且在new User对象时指定的默认值没有起到作用，被@Value的值覆盖掉了。\n\n## @Scope\n> @Scope通常和@Bean配合使用，用于指定该bean的作用域。它具有以下几种作用域：\n> * singleton 单例模式（默认值）\n> * prototype 多例模式\n> * request 每次http请求产生一个bean，该bean在本次HTTP request内有效\n> * session 每次http请求产生一个bean，该bean在本次HTTP session内有效\n\n# 生命周期相关\n## @Lazy(true)\n> @Lazy表明一个bean是否被延迟加载，当@Lazy的值设定为true（默认值即为true）时，表明该bean被延迟加载。\n> * 标记在方法上，表示该方法被延迟加载\n> * 标记在@Component的类上或是@Component作为元注解的类上（其实就是标记在一个bean上），表示该bean被延迟加载\n\n测试代码：\n```java\n@Data\n@AllArgsConstructor\n@ToString\n@Component\n@Lazy//延迟加载\npublic class User {\n    private Integer id;\n    private String name;\n    private Integer age;\n    private String email;\n    private Dog dog;\n\n    public User() {\n        System.out.println(\"User 对象被创建\");\n    }\n}\n ```\n在spring启动时未看到User对象的创建：\n![输出结果](@Lazy1.png)\n## @PostConstruct 和 @PreDestory\n> 实现初始化和销毁bean之前进行的操作，只能有一个方法可以用此注释进行注释，方法不能有参数，返回值必需是void,方法需要是非静态的,不能抛出异常。\n> * @PostConstruct：在构造方法和init方法（如果有的话）之间得到调用，且只会执行一次。\n> * @PreDestory：注解的方法在destory()方法调用后得到执行。\n\n代码示例：\n```java\n@Configuration\npublic class TestConfiguration {\n\n    @Bean(initMethod = \"init\",destroyMethod = \"destroy\")\n    public Dog dogBean(){\n        System.out.println(\"Dog对象配置类中创建...\");\n        return new Dog(1,\"六六\",3);\n    }\n}\n ```\n```java\n@Data\n@NoArgsConstructor\n@AllArgsConstructor\n@ToString\npublic class Dog {\n    private Integer id;\n    private String name;\n    private Integer age;\n\n    public void init(){\n        System.out.println(\"Dog对象初始化...\");\n    }\n\n    public void destroy(){\n        System.out.println(\"Dog对象销毁...\");\n    }\n\n    @PostConstruct\n    public void postConstruct(){\n        System.out.println(\"Dog对象初始化之前...\");\n    }\n\n    @PreDestroy\n    public void preDestroy(){\n        System.out.println(\"Dog对象销毁之后...\");\n    }\n}\n ```\nspring启动后结果为：\n![输出结果](@PreDestroy1.png)\n# bean对象相关\n\n## @Controller, @Service, @Repository, @Compnent\n\n这四个注解的作用没有区别，都是声明一个bean对象注册到ioc容器中。但是为了程序可读性和开发规范，在使用时依然要按照java类的实际作用去使用。\n\n在使用时只需要把它们标注在一个类上，spring容器启动时就会把对象创建好注入ioc：\n```java\n@Data\n@NoArgsConstructor\n@AllArgsConstructor\n@ToString\n@Component\npublic class Dog {\n    private Integer id;\n    private String name;\n    private Integer age;\n}\n ```\n![输出结果](@Component1.png)\n\n也可以给这些注解一个值，作为bean对象的名称：\n```java\n@Data\n@NoArgsConstructor\n@AllArgsConstructor\n@ToString\n@Component(\"firstDog\")\npublic class Dog {\n    private Integer id;\n    private String name;\n    private Integer age;\n}\n ```\n![输出结果](@Component2.png)\n## @Named和@Inject\n> 这两个注解是JSR-330的一部分。在Spring 3中，开始支持JSR-330的注解。这些注解在使用上和Spring的注解一样，所不同的只是需要额外的相关jar包。你可以使用下面的注解在spring 3应用中。\n@Inject替代@Autowired来执行注入\n@Named替代@Component来声明一个Bean\n\n> 在springboot项目中，使用这两个注解需要先引入依赖：\n> ```xml\n>    <dependency>\n>        <groupId>javax.inject</groupId>\n>        <artifactId>javax.inject</artifactId>\n>        <version>1</version>\n>    </dependency>\n> ```\n\n> * @Named功能和@Component注解相同，它的值用于指定bean的名称，如果没有值默认使用类名作为bean名称。\n> * @Inject注解在spring环境下，和@Autowired是相同的。\n\n  \n## @Autowired和@Resource\n> 这两个注解的作用相同，用于bean对象的自动装配。\n\n使用示例：\n```java\n//@Autowired\n@Resource\nprivate Dog dog;\n ```\n下面详细说一下@Autowired的装配原理：\n> * @Autowired默认按照ByType类型进行装配。\n> * 若ByType类型匹配到多个bean，那么按照ByName类型装配：\n>     * 若没有和@Qualifier搭配使用，默认按照变量名作为bean名称去匹配（例如上面Dog的例子，默认使用变量名dog作为bean名称），这种情况下若没有匹配到bean，会报NoUniqueBeanDefinationException异常。\n>     * 若搭配@Qualifier使用，会按照@Qualifier注解指定的bean名称进行匹配，如果没有匹配到，会报NoSuchBeanDefinitionException异常。\n> * @Autowired有一个required属性，默认值为true，表示不接受空值，若没有匹配到bean报错。如果设置为false，表示允许null。\n\n@Resource和@Autowired的区别：\n> @Resource默认按照Byname方式匹配bean，匹配失败会回滚到@Autowired。\n可以手动指定bean,它有2个属性分别是name和type，使用name属性，则使用byName的自动注入，而使用type属性时则使用byType自动注入。\n@Resource(name=”bean名字”)或@Resource(type=”bean的class”)\n  \n  \n## @Primary\n> 自动装配时当出现多个Bean候选者时，被注解为@Primary的Bean将作为首选者，否则将抛出异常。\n\n# 多线程\n## @Async\n1. 在方法上使用该@Async注解，申明该方法是一个异步任务；\n2. 在类上面使用该@Async注解，申明该类中的所有方法都是异步任务；\n3. 使用此注解的方法的类对象，必须是spring管理下的bean对象； \n4. 要想使用异步任务，需要在主类上开启异步配置，即，配置上@EnableAsync注解\n<https://blog.csdn.net/qq_44750696/article/details/123960134>\n# 参数校验\n## @Valid,@Valided\n<https://blog.csdn.net/weixin_51439775/article/details/128386125>\n\n# WEB相关\n\n## @RequestBody\n> 获取request请求体中的内容，常用来处理content-type不是默认的application/x-www-form-urlcoded编码（form表单格式）的内容，比如说：application/json或者是application/xml等。一般情况下来说常用其来处理application/json类型。\n\n> @RequestBody注解可以解析请求体中json格式的数据，并将其封装到javaBean中。\n\n测试：\n\n使用postman发送请求，请求体中使用json格式字符串。\n![发送请求](@RequestBody1.png)\n在后端代码可以用String来接收，接收结果是原json字符串：\n```java\n@Controller\npublic class TestController {\n\n    @RequestMapping(\"/\")\n    public String welcome(@RequestBody(required = false) String dog){\n        System.out.println(dog);\n        return \"index\";\n    }\n}\n ```\n控制台输出：```{\"id\":\"1\",\"name\":\"六六\",\"age\":\"3\"}```\n\n\n也可以用对象来接收，接收结果是json字符串封装后的对象：\n```java\n@Controller\npublic class TestController {\n\n    @RequestMapping(\"/\")\n    public String welcome(@RequestBody(required = false) Dog dog){\n        System.out.println(dog);\n        return \"index\";\n    }\n}\n ```\n控制台输出：```Dog(id=1, name=六六, age=3)```\n\n如果使用@RequestBody注解来接收form表单的请求（即application/x-www-form-urlcoded编码）会报415，并在控制台报出编码格式不支持的错误：\n```Resolved [org.springframework.web.HttpMediaTypeNotSupportedException: Content type 'application/x-www-form-urlencoded;charset=UTF-8' not supported]```\n\n## @RequestParam\n用于将请求参数映射到控制层方法的参数上。\n@RequestParam含有以下三个属性：\n* value：设置传入的参数的名称，若不设置默认使用变量值。\n* required：设置该参数是否必填。表示请求中一定要传入对应的参数，否则会报404错误，如果设置为false时，当请求中没有此参数，将会默认为null,而对于基本数据类型的变量，则必须有值，这时会抛出空指针异常。\n* defaultValue：参数的默认值，如果请求中没有同名的参数时，该变量默认为此值。注意默认值可以使用SpEL表达式。\n## @PathVariable\n处理请求的URL，把占位符绑定到controller的方法参数上。\n该注解有两个属性：\n* value：设置匹配的占位符的名称，若不设置，默认使用参数名称匹配占位符。\n* required：设置该参数是否必填，默认值为true，表示URL中必须含有匹配的占位符，否则将抛出异常。\n\n\n使用方法例如：\n```java\n@GetMapping({\"/{page}/{pageSize}\",\"/delete/{page}/{pageSize}\"})\npublic String toEmpPage(HttpServletRequest request,\n                        @PathVariable(\"page\") Integer page,\n                        @PathVariable(\"pageSize\") Integer pageSize) {\n    //业务部分\n}\n ```\n上述代码即是把URL中的{page}和{pageSize}分别绑定到方法参数中的page和pageSize上。\n\n## @RequestHeader\n用于把请求头中的参数绑定到方法参数上。\n它有三个属性，和@RequestParam注解完全相同。\n## @CookieValue\n用于把请求中的cookie绑定到方法参数上。\n它的属性同上。\n## @ModelAttribute\n@ModelAttribute的作用是把数据添加进模型对象中，供前端页面渲染使用。它的用法有很多：\n1. 入参处使用\n    > 将@ModelAttribute注解标记在入参上，在渲染页面之前就会自动把标记的入参添加到模型对象中。\n\n示例代码：\n```java\n@Controller\npublic class TestController {\n\n    @RequestMapping(\"/\")\n    public String welcome(@ModelAttribute(\"msg2\")String msg2){\n        return \"index\";\n    }\n}\n```\n\n前端代码：\n```HTML\n<form th:action=\"@{/}\" method=\"post\">\n    <label>\n        msg2:\n        <input type=\"text\" name=\"msg2\"/>\n    </label>\n    <input type=\"submit\">\n    <p th:text=\"${msg2}\"></p><!--  前端提交表单后，后端再次返回该页面，并将上次输入的信息显示在此处   -->\n</form>\n```\n结果：\n发送之前：![页面效果](@ModelAttribute1.png)\n发送之后：![页面效果](@ModelAttribute2.png)\n\n\n2. 方法上使用\n   被@ModelAttribute注释的方法会在此controller的每个方法执行前被执行 ，如果有返回值，则自动将该返回值加入到ModelMap中。\n   * 若注解没有返回值的方法，一般在方法体内部用model对象手动加入：\n  \n\n```java\n@Controller\npublic class TestController {\n\n    @ModelAttribute\n    public void before(@RequestParam String msg2, Model model){\n        model.addAttribute(\"msg2\",msg2);\n    }\n\n    @RequestMapping(\"/\")\n    public String welcome(){\n        return \"index\";\n    }\n}\n```\n\n   * 若注解有返回值的方法，建议通过@ModelAttribute(value = \"\")指定名称，若不指定，默认使用返回类型小写作为名称。\n\n\n```java\n@Controller\npublic class TestController {\n\n    @ModelAttribute//不指定名称，属性名为返回类型小写，即string\n    public String before(@RequestParam String msg2){\n        System.out.println(msg2);\n        return msg2;\n    }\n\n    @RequestMapping(\"/\")\n    public String welcome(){\n        return \"index\";\n    }\n}\n  ```\n        \n\n## @SessionAttributes\n将ModelMap等方式传到前端的属性值共享到session中。\n> @SessionAttributes注解只能使用在类上，用于在多个请求之间传递参数，类似于Session的Attribute，但不完全一样，一般来说@SessionAttributes设置的参数只用于暂时的传递（存入sessionAttributeStore），而不是长期的保存，长期保存的数据还是要放到Session中。\n\n\n> 有两种方式将ModelMap中的属性值共享到session中：\n> + 使用注解的value属性：可以通过属性名指定需要放到会话中的属性；\n> + 使用注解的types属性：还可以通过模型属性的对象类型指定哪些模型属性需要放到会话中。\n\n## @CrossOrigin\n\n## @RestController\n## @ControllerAdvice\n@ControllerAdvice的作用也是声明一个控制层组件，通常用于全局异常处理、添加全局数据以及请求参数预处理。\n* 全局异常处理\n  > 搭配@ExceptionHandler注解使用。@ExceptionHandler注解只有一个属性value，是一个Throwable类型的数组，它的作用是设置匹配异常的种类，当Controller层出现value数组内的异常时，将调用被@ExceptionHandler标记的方法。\n\n  > 方法的参数可以包括异常实例、HttpServletRequest、HttpServletResponse、Model等；返回值可以是void、Json（需要用@ResponseBody标记）、ModelAndView（可以添加数据、设置视图名称）、甚至是逻辑视图名。\n\n示例代码：\n```java\n@ControllerAdvice\npublic class TestControllerAdvice {\n    @ExceptionHandler(ArithmeticException.class)\n    public ModelAndView exceptionHandler(){\n        System.out.println(\"出现异常\");\n        ModelAndView model = new ModelAndView();\n        model.addObject(\"msg2\",\"出现异常！\");\n        model.setViewName(\"index\");\n        return model;\n    }\n}\n```\n```java\n@Controller\npublic class TestController {\n\n    @RequestMapping(\"/\")\n    public String welcome(){\n        int a = 1/0;\n        return \"index\";\n    }\n}\n```\n浏览器访问该方法时触发ArithmeticException异常，返回页面如下：\n![页面](Spring-Boot常用注解/@ControllerAdvice1.png)\n* 添加全局数据\n  > 搭配@ModelAttribute注解使用。@ModelAttribute标记一个方法，该方法的返回值将作为全局数据，所有Controller层方法和页面都可以访问到。\n\n    示例代码如下：\n    controllerAdvice：\n```java\n    @ControllerAdvice\n    public class TestControllerAdvice {\n\n        @ModelAttribute(value = \"user\")//model中的key\n        public Map<String,String> GlobalConfig(){\n            HashMap<String,String> map = new HashMap<>();\n            map.put(\"username\", \"dfy\");\n            map.put(\"age\", \"18\");\n            return map;//model中的value\n        }\n    }\n```\ncontroller:\n```java\n    @Controller\n    public class TestController {\n\n        @RequestMapping(\"/\")\n        public String welcome(Model model){\n            Map<String, Object> map = model.asMap();\n            Set<String> keySet = map.keySet();\n            Iterator<String> iterator = keySet.iterator();\n            while(iterator.hasNext()){\n                String key = iterator.next();\n                Object value = map.get(key);\n                System.out.println(key + \"=\" + value);\n            }\n            return \"index\";\n        }\n    }\n```\n页面：\n```HTML\n    <p th:text=\"${user.username}\"></p>\n    <p th:text=\"${user.age}\"></p>\n```\n控制台输出为：\n```user={age=18, username=dfy}```\n页面输出为：\n![页面](@ControllerAdvice2.png)\n\n* 请求参数预处理\n  搭配@InitBinder注解使用。被@InitBinder标记的方法，参数中必须要含有WebDataBinder，具体用法如下：\n  ```java\n    @InitBinder\n    public void initBinder(WebDataBinder binder){\n        binder.registerCustomEditor(String.class, new StringTrimmerEditor(true));\n    }\n  ```\n  通过WebDataBinder类的registerCustomEditor方法来注册请求参数的预处理器，它的方法参数为：\n  ```registerCustomEditor(Class<?> requiredType, PropertyEditor propertyEditor)```\n  requiredType代表该预处理器处理的数据类型；propertyEditor代表预处理器，它的实现类有很多，这里不一一列举。\n  自定义属性编辑器可以通过继承```java.beans.PropertyEditorSupport```类并重写其```setAsText```方法实现，最后调用setValue(Object Value)方法完成转换后的值的设置。\n\n  还有其他花式用法，具体可参见博客<https://blog.csdn.net/wang0907/article/details/108357696>\n\n## 元注解包括  @Retention @Target @Document @Inherited四种\n## @RequestMapping\n## @GetMapping和@PostMapping\n","slug":"Spring-Boot常用注解","published":1,"updated":"2024-04-09T10:59:25.103Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clusa3woc002l2s7e24luaxb4","content":"<h1 id=\"配置类相关\"><a href=\"#配置类相关\" class=\"headerlink\" title=\"配置类相关\"></a>配置类相关</h1><h2 id=\"Configuration\"><a href=\"#Configuration\" class=\"headerlink\" title=\"@Configuration\"></a>@Configuration</h2><blockquote>\n<p>声明一个类为配置类，用于取代bean.xml配置文件注册bean对象。<br/><br>@Configuration注解中含有@Component注解，所以被@Configuration标记的配置类会作为一个bean对象被加载到ioc容器中。<br><br>它通常搭配@Bean注解和@Scope注解使用。</p>\n</blockquote>\n<blockquote>\n<p>@Configuration有一个属性proxyBeanMethods，用于指定是否为懒加载，默认值为true。<br>proxyBeanMethods &#x3D; true的情况下，保持单实例对象，在spring容器启动时就会创建bean对象。这种情况主要用在bean对象的依赖情况下，如果存在一个bean依赖另一个bean时，一般会采用Full模式。<br>proxyBeanMethods &#x3D; false的情况下，不检查IOC容器中是否存在，而是简单的调用方法进行创建对象，无法保持单实例。当不存在bean对象的依赖问题时，会才有轻量级的配置。</p>\n</blockquote>\n<p>测试代码如下：</p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@SpringBootApplication</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">TestSpringBootApp</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">//获取ioc容器</span>\n        <span class=\"token class-name\">ConfigurableApplicationContext</span> run <span class=\"token operator\">=</span> <span class=\"token class-name\">SpringApplication</span><span class=\"token punctuation\">.</span><span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">TestSpringBootApp</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token class-name\">Object</span> dogBean <span class=\"token operator\">=</span> run<span class=\"token punctuation\">.</span><span class=\"token function\">getBean</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Dog</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>dogBean<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">User</span> userBean <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">User</span><span class=\"token punctuation\">)</span>run<span class=\"token punctuation\">.</span><span class=\"token function\">getBean</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">User</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>userBean<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>userBean<span class=\"token punctuation\">.</span><span class=\"token function\">getDog</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">==</span>dogBean<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n<p>User类：</p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Data</span>\n<span class=\"token annotation punctuation\">@NoArgsConstructor</span>\n<span class=\"token annotation punctuation\">@AllArgsConstructor</span>\n<span class=\"token annotation punctuation\">@ToString</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">User</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Integer</span> id<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Integer</span> age<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> email<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Dog</span> dog<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n<p>Dog类：</p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Data</span>\n<span class=\"token annotation punctuation\">@NoArgsConstructor</span>\n<span class=\"token annotation punctuation\">@AllArgsConstructor</span>\n<span class=\"token annotation punctuation\">@ToString</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Dog</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Integer</span> id<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Integer</span> age<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n</code></pre>\n<p>testConfiguration类：</p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Configuration</span><span class=\"token punctuation\">(</span>proxyBeanMethods <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token comment\">//多例模式</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">TestConfiguration</span> <span class=\"token punctuation\">&#123;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> count <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token annotation punctuation\">@Bean</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">User</span> <span class=\"token function\">userBean</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"User对象创建\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">User</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"dfy\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">15</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token function\">dogBean</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token annotation punctuation\">@Bean</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Dog</span> <span class=\"token function\">dogBean</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Dog对象第\"</span><span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">++</span>count<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token string\">\"次创建\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Dog</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"六六\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n<p>输出结果如下：<br><img src=\"/2023/02/04/spring-boot-chang-yong-zhu-jie/@Configuration1.png\" alt=\"输出结果\"></p>\n<p>如果改成单例模式，即<code>proxyBeanMethods = true</code>，那么输出结果将变成：<br><img src=\"/2023/02/04/spring-boot-chang-yong-zhu-jie/@Configuration2.png\" alt=\"输出结果\"></p>\n<h2 id=\"Bean\"><a href=\"#Bean\" class=\"headerlink\" title=\"@Bean\"></a>@Bean</h2><p>@Bean注解通常标记一个Supplier方法，用于声明一个bean对象的注册，默认的加载模式为饿汉单例。<br/></p>\n<blockquote>\n<p>使用@Bean声明一个bean：</p>\n</blockquote>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Configuration</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">TestConfiguration</span> <span class=\"token punctuation\">&#123;</span>\n\n    <span class=\"token annotation punctuation\">@Bean</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">User</span> <span class=\"token function\">userBean</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"User对象正在创建\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">User</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"dfy\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">15</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@SpringBootApplication</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">TestSpringBootApp</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">//获取ioc容器</span>\n        <span class=\"token class-name\">ConfigurableApplicationContext</span> run <span class=\"token operator\">=</span> <span class=\"token class-name\">SpringApplication</span><span class=\"token punctuation\">.</span>runTestSpringBootApp<span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Object</span> user <span class=\"token operator\">=</span> run<span class=\"token punctuation\">.</span><span class=\"token function\">getBean</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">User</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n<p>输出结果为：<br> <img src=\"/2023/02/04/spring-boot-chang-yong-zhu-jie/@Bean1.png\" alt=\"输出结果\"></p>\n<p>@Bean注解含有如下属性：</p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token annotation punctuation\">@interface</span> <span class=\"token class-name\">Bean</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token annotation punctuation\">@AliasFor</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">value</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">default</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token annotation punctuation\">@AliasFor</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"value\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">name</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">default</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">/** @deprecated */</span>\n    <span class=\"token annotation punctuation\">@Deprecated</span>\n    <span class=\"token class-name\">Autowire</span> <span class=\"token function\">autowire</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">default</span> <span class=\"token class-name\">Autowire</span><span class=\"token punctuation\">.</span><span class=\"token constant\">NO</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">boolean</span> <span class=\"token function\">autowireCandidate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">default</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token class-name\">String</span> <span class=\"token function\">initMethod</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">default</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token class-name\">String</span> <span class=\"token function\">destroyMethod</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">default</span> <span class=\"token string\">\"(inferred)\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n<ul>\n<li>value和name<blockquote>\n<p>可以看到value和name两个属性是一个别名对，它们的作用是指定该bean的名称。<br>  如果在使用时未指定bean的名称，默认使用带注解方法的名称；如果指定了，方法本身的名称就会被忽略。</p>\n</blockquote>\n</li>\n</ul>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Configuration</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">TestConfiguration</span> <span class=\"token punctuation\">&#123;</span>\n\n    <span class=\"token annotation punctuation\">@Bean</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">User</span> <span class=\"token function\">userBean</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"未指定名称的User对象正在创建\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">User</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"dfy\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">15</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token annotation punctuation\">@Bean</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"User01\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">User</span> <span class=\"token function\">userBean01</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"指定名称的User对象正在创建\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">User</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"dfy\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">15</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n\n\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@SpringBootApplication</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">TestSpringBootApp</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">//获取ioc容器</span>\n        <span class=\"token class-name\">ConfigurableApplicationContext</span> run <span class=\"token operator\">=</span> <span class=\"token class-name\">SpringApplication</span><span class=\"token punctuation\">.</span><span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">TestSpringBootApp</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">//获取所有bean对象的名称</span>\n        <span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> beanDefinitionNames <span class=\"token operator\">=</span> run<span class=\"token punctuation\">.</span><span class=\"token function\">getBeanDefinitionNames</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> s <span class=\"token operator\">:</span> beanDefinitionNames<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n\n\n<p>输出结果如下：<br><img src=\"/2023/02/04/spring-boot-chang-yong-zhu-jie/@Bean2.png\" alt=\"输出结果\"></p>\n<ul>\n<li><p>autowire</p>\n<blockquote>\n<p>已弃用。<br>autowire确定自动装配状态，即该bean创建时是否使用它的setter方法对它的成员变量进行自动装配。<br>  Autowire是一个枚举类，有三个值：</p>\n<ul>\n<li>NO：不自动装配</li>\n<li>BY_NAME：根据名称自动装配</li>\n<li>BY_TYPE：根据类型自动装配<br>默认值是NO，即不自动装配。</li>\n</ul>\n</blockquote>\n</li>\n<li><p>autowireCandidate</p>\n<blockquote>\n<p>autowireCandidate和配置文件bean标签的autowireCandidate属性一样，就是让其他的bean在自动注入时，是否会装配当前的bean。 默认值true。</p>\n</blockquote>\n</li>\n</ul>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Configuration</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">TestConfiguration</span> <span class=\"token punctuation\">&#123;</span>\n\n    <span class=\"token annotation punctuation\">@Bean</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">User</span> <span class=\"token function\">userBean</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">User</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"dfy\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">15</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token annotation punctuation\">@Bean</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Dog</span> <span class=\"token function\">dog1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Dog</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"狗宝\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token annotation punctuation\">@Bean</span><span class=\"token punctuation\">(</span>autowireCandidate <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token comment\">//不作为自动注入的候选者</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Dog</span> <span class=\"token function\">dog2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Dog</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"六六\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Data</span>\n<span class=\"token annotation punctuation\">@NoArgsConstructor</span>\n<span class=\"token annotation punctuation\">@AllArgsConstructor</span>\n<span class=\"token annotation punctuation\">@ToString</span>\n<span class=\"token annotation punctuation\">@Component</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">User</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Integer</span> id<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Integer</span> age<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> email<span class=\"token punctuation\">;</span>\n    <span class=\"token annotation punctuation\">@Autowired</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Dog</span> dog<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@SpringBootApplication</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">TestSpringBootApp</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">//获取ioc容器</span>\n        <span class=\"token class-name\">ConfigurableApplicationContext</span> run <span class=\"token operator\">=</span> <span class=\"token class-name\">SpringApplication</span><span class=\"token punctuation\">.</span><span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">TestSpringBootApp</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token class-name\">Object</span> userBean <span class=\"token operator\">=</span> run<span class=\"token punctuation\">.</span><span class=\"token function\">getBean</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"userBean\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>userBean<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n<p>输出结果为：<br><code>User(id=1, name=dfy, age=15, email=null, dog=Dog(id=1, name=狗宝, age=5))</code><br>如果取消dog2的<code>autowireCandidate = false</code>，spring容器会报<code>NoUniqueBeanDefinitionException</code>异常。<br>有趣的是，虽然spring容器启动时可以正常装配第二个Dog对象，但是idea会编译报错：<br><img src=\"/2023/02/04/spring-boot-chang-yong-zhu-jie/@Bean3.png\" alt=\"自动装配报错\"></p>\n<ul>\n<li>initMethod和destroyMethod<blockquote>\n<p>用于指定bean的初始化和销毁方法。</p>\n</blockquote>\n</li>\n</ul>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Configuration</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">TestConfiguration</span> <span class=\"token punctuation\">&#123;</span>\n\n    <span class=\"token annotation punctuation\">@Bean</span><span class=\"token punctuation\">(</span>initMethod <span class=\"token operator\">=</span> <span class=\"token string\">\"userInit\"</span><span class=\"token punctuation\">,</span> destroyMethod <span class=\"token operator\">=</span> <span class=\"token string\">\"userDestroy\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">User</span> <span class=\"token function\">userBean</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">User</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"dfy\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">15</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n\n\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Data</span>\n<span class=\"token annotation punctuation\">@NoArgsConstructor</span>\n<span class=\"token annotation punctuation\">@AllArgsConstructor</span>\n<span class=\"token annotation punctuation\">@ToString</span>\n<span class=\"token annotation punctuation\">@Component</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">User</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Integer</span> id<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Integer</span> age<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> email<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">userInit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"User init...\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">userDestroy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"User destroy...\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n<p>输出结果：<br><img src=\"/2023/02/04/spring-boot-chang-yong-zhu-jie/@Bean4.png\" alt=\"输出结果\"></p>\n<h2 id=\"Value\"><a href=\"#Value\" class=\"headerlink\" title=\"@Value\"></a>@Value</h2><blockquote>\n<p>常用于标记成员变量，注入外部化属性<br>@Value的三种用法：</p>\n<ul>\n<li>注入普通属性<br>  语法为@Value(…)，直接使用字面量即可</li>\n<li>注入配置文件<br>  语法为@Value(“${…}”)，注入配置文件中写好的属性值</li>\n<li>注入表达式并运算<br>  语法为@Value(“#{…}”)，写入spring框架的SpEl表达式即可<br>  每个框架有自己的一套SpEl表达式，详情可以参考<a href=\"https://docs.spring.io/spring-framework/docs/current/reference/html/core.html#expressions\">官方文档</a></li>\n</ul>\n</blockquote>\n<p>代码示例如下：</p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Data</span>\n<span class=\"token annotation punctuation\">@NoArgsConstructor</span>\n<span class=\"token annotation punctuation\">@AllArgsConstructor</span>\n<span class=\"token annotation punctuation\">@ToString</span>\n<span class=\"token annotation punctuation\">@Component</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">User</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token annotation punctuation\">@Value</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"10\"</span><span class=\"token punctuation\">)</span><span class=\"token comment\">//注入普通属性</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Integer</span> id<span class=\"token punctuation\">;</span>\n    <span class=\"token annotation punctuation\">@Value</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"$&#123;user_name&#125;\"</span><span class=\"token punctuation\">)</span><span class=\"token comment\">//注入外部配置文件</span>\n    <span class=\"token comment\">//application.yml中写入属性： user_name: user01</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">;</span>\n    <span class=\"token annotation punctuation\">@Value</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"#&#123;2+1+3&#125;\"</span><span class=\"token punctuation\">)</span><span class=\"token comment\">//注入表达式</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Integer</span> age<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> email<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">userInit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"User init...\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">userDestroy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"User destroy...\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Configuration</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">TestConfiguration</span> <span class=\"token punctuation\">&#123;</span>\n\n    <span class=\"token annotation punctuation\">@Bean</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">User</span> <span class=\"token function\">userBean</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">User</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"dfy\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">15</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n<p>该bean的输出结果为：<br><code>User(id=10, name=user01, age=6, email=null)</code><br>可以看到属性值已经成功注入，并且在new User对象时指定的默认值没有起到作用，被@Value的值覆盖掉了。</p>\n<h2 id=\"Scope\"><a href=\"#Scope\" class=\"headerlink\" title=\"@Scope\"></a>@Scope</h2><blockquote>\n<p>@Scope通常和@Bean配合使用，用于指定该bean的作用域。它具有以下几种作用域：</p>\n<ul>\n<li>singleton 单例模式（默认值）</li>\n<li>prototype 多例模式</li>\n<li>request 每次http请求产生一个bean，该bean在本次HTTP request内有效</li>\n<li>session 每次http请求产生一个bean，该bean在本次HTTP session内有效</li>\n</ul>\n</blockquote>\n<h1 id=\"生命周期相关\"><a href=\"#生命周期相关\" class=\"headerlink\" title=\"生命周期相关\"></a>生命周期相关</h1><h2 id=\"Lazy-true\"><a href=\"#Lazy-true\" class=\"headerlink\" title=\"@Lazy(true)\"></a>@Lazy(true)</h2><blockquote>\n<p>@Lazy表明一个bean是否被延迟加载，当@Lazy的值设定为true（默认值即为true）时，表明该bean被延迟加载。</p>\n<ul>\n<li>标记在方法上，表示该方法被延迟加载</li>\n<li>标记在@Component的类上或是@Component作为元注解的类上（其实就是标记在一个bean上），表示该bean被延迟加载</li>\n</ul>\n</blockquote>\n<p>测试代码：</p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Data</span>\n<span class=\"token annotation punctuation\">@AllArgsConstructor</span>\n<span class=\"token annotation punctuation\">@ToString</span>\n<span class=\"token annotation punctuation\">@Component</span>\n<span class=\"token annotation punctuation\">@Lazy</span><span class=\"token comment\">//延迟加载</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">User</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Integer</span> id<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Integer</span> age<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> email<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Dog</span> dog<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">User</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"User 对象被创建\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n<p>在spring启动时未看到User对象的创建：<br><img src=\"/2023/02/04/spring-boot-chang-yong-zhu-jie/@Lazy1.png\" alt=\"输出结果\"></p>\n<h2 id=\"PostConstruct-和-PreDestory\"><a href=\"#PostConstruct-和-PreDestory\" class=\"headerlink\" title=\"@PostConstruct 和 @PreDestory\"></a>@PostConstruct 和 @PreDestory</h2><blockquote>\n<p>实现初始化和销毁bean之前进行的操作，只能有一个方法可以用此注释进行注释，方法不能有参数，返回值必需是void,方法需要是非静态的,不能抛出异常。</p>\n<ul>\n<li>@PostConstruct：在构造方法和init方法（如果有的话）之间得到调用，且只会执行一次。</li>\n<li>@PreDestory：注解的方法在destory()方法调用后得到执行。</li>\n</ul>\n</blockquote>\n<p>代码示例：</p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Configuration</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">TestConfiguration</span> <span class=\"token punctuation\">&#123;</span>\n\n    <span class=\"token annotation punctuation\">@Bean</span><span class=\"token punctuation\">(</span>initMethod <span class=\"token operator\">=</span> <span class=\"token string\">\"init\"</span><span class=\"token punctuation\">,</span>destroyMethod <span class=\"token operator\">=</span> <span class=\"token string\">\"destroy\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Dog</span> <span class=\"token function\">dogBean</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Dog对象配置类中创建...\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Dog</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"六六\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Data</span>\n<span class=\"token annotation punctuation\">@NoArgsConstructor</span>\n<span class=\"token annotation punctuation\">@AllArgsConstructor</span>\n<span class=\"token annotation punctuation\">@ToString</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Dog</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Integer</span> id<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Integer</span> age<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">init</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Dog对象初始化...\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">destroy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Dog对象销毁...\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token annotation punctuation\">@PostConstruct</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">postConstruct</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Dog对象初始化之前...\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token annotation punctuation\">@PreDestroy</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">preDestroy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Dog对象销毁之后...\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n<p>spring启动后结果为：<br><img src=\"/2023/02/04/spring-boot-chang-yong-zhu-jie/@PreDestroy1.png\" alt=\"输出结果\"></p>\n<h1 id=\"bean对象相关\"><a href=\"#bean对象相关\" class=\"headerlink\" title=\"bean对象相关\"></a>bean对象相关</h1><h2 id=\"Controller-Service-Repository-Compnent\"><a href=\"#Controller-Service-Repository-Compnent\" class=\"headerlink\" title=\"@Controller, @Service, @Repository, @Compnent\"></a>@Controller, @Service, @Repository, @Compnent</h2><p>这四个注解的作用没有区别，都是声明一个bean对象注册到ioc容器中。但是为了程序可读性和开发规范，在使用时依然要按照java类的实际作用去使用。</p>\n<p>在使用时只需要把它们标注在一个类上，spring容器启动时就会把对象创建好注入ioc：</p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Data</span>\n<span class=\"token annotation punctuation\">@NoArgsConstructor</span>\n<span class=\"token annotation punctuation\">@AllArgsConstructor</span>\n<span class=\"token annotation punctuation\">@ToString</span>\n<span class=\"token annotation punctuation\">@Component</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Dog</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Integer</span> id<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Integer</span> age<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n<p><img src=\"/2023/02/04/spring-boot-chang-yong-zhu-jie/@Component1.png\" alt=\"输出结果\"></p>\n<p>也可以给这些注解一个值，作为bean对象的名称：</p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Data</span>\n<span class=\"token annotation punctuation\">@NoArgsConstructor</span>\n<span class=\"token annotation punctuation\">@AllArgsConstructor</span>\n<span class=\"token annotation punctuation\">@ToString</span>\n<span class=\"token annotation punctuation\">@Component</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"firstDog\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Dog</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Integer</span> id<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Integer</span> age<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n<p><img src=\"/2023/02/04/spring-boot-chang-yong-zhu-jie/@Component2.png\" alt=\"输出结果\"></p>\n<h2 id=\"Named和-Inject\"><a href=\"#Named和-Inject\" class=\"headerlink\" title=\"@Named和@Inject\"></a>@Named和@Inject</h2><blockquote>\n<p>这两个注解是JSR-330的一部分。在Spring 3中，开始支持JSR-330的注解。这些注解在使用上和Spring的注解一样，所不同的只是需要额外的相关jar包。你可以使用下面的注解在spring 3应用中。<br>@Inject替代@Autowired来执行注入<br>@Named替代@Component来声明一个Bean</p>\n</blockquote>\n<blockquote>\n<p>在springboot项目中，使用这两个注解需要先引入依赖：</p>\n<pre class=\"language-markup\" data-language=\"markup\"><code class=\"language-markup\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>javax.inject<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>javax.inject<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>1<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></code></pre>\n</blockquote>\n<blockquote>\n<ul>\n<li>@Named功能和@Component注解相同，它的值用于指定bean的名称，如果没有值默认使用类名作为bean名称。</li>\n<li>@Inject注解在spring环境下，和@Autowired是相同的。</li>\n</ul>\n</blockquote>\n<h2 id=\"Autowired和-Resource\"><a href=\"#Autowired和-Resource\" class=\"headerlink\" title=\"@Autowired和@Resource\"></a>@Autowired和@Resource</h2><blockquote>\n<p>这两个注解的作用相同，用于bean对象的自动装配。</p>\n</blockquote>\n<p>使用示例：</p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">//@Autowired</span>\n<span class=\"token annotation punctuation\">@Resource</span>\n<span class=\"token keyword\">private</span> <span class=\"token class-name\">Dog</span> dog<span class=\"token punctuation\">;</span></code></pre>\n<p>下面详细说一下@Autowired的装配原理：</p>\n<blockquote>\n<ul>\n<li>@Autowired默认按照ByType类型进行装配。</li>\n<li>若ByType类型匹配到多个bean，那么按照ByName类型装配：<ul>\n<li>若没有和@Qualifier搭配使用，默认按照变量名作为bean名称去匹配（例如上面Dog的例子，默认使用变量名dog作为bean名称），这种情况下若没有匹配到bean，会报NoUniqueBeanDefinationException异常。</li>\n<li>若搭配@Qualifier使用，会按照@Qualifier注解指定的bean名称进行匹配，如果没有匹配到，会报NoSuchBeanDefinitionException异常。</li>\n</ul>\n</li>\n<li>@Autowired有一个required属性，默认值为true，表示不接受空值，若没有匹配到bean报错。如果设置为false，表示允许null。</li>\n</ul>\n</blockquote>\n<p>@Resource和@Autowired的区别：</p>\n<blockquote>\n<p>@Resource默认按照Byname方式匹配bean，匹配失败会回滚到@Autowired。<br>可以手动指定bean,它有2个属性分别是name和type，使用name属性，则使用byName的自动注入，而使用type属性时则使用byType自动注入。<br>@Resource(name&#x3D;”bean名字”)或@Resource(type&#x3D;”bean的class”)</p>\n</blockquote>\n<h2 id=\"Primary\"><a href=\"#Primary\" class=\"headerlink\" title=\"@Primary\"></a>@Primary</h2><blockquote>\n<p>自动装配时当出现多个Bean候选者时，被注解为@Primary的Bean将作为首选者，否则将抛出异常。</p>\n</blockquote>\n<h1 id=\"多线程\"><a href=\"#多线程\" class=\"headerlink\" title=\"多线程\"></a>多线程</h1><h2 id=\"Async\"><a href=\"#Async\" class=\"headerlink\" title=\"@Async\"></a>@Async</h2><ol>\n<li>在方法上使用该@Async注解，申明该方法是一个异步任务；</li>\n<li>在类上面使用该@Async注解，申明该类中的所有方法都是异步任务；</li>\n<li>使用此注解的方法的类对象，必须是spring管理下的bean对象； </li>\n<li>要想使用异步任务，需要在主类上开启异步配置，即，配置上@EnableAsync注解<br><a href=\"https://blog.csdn.net/qq_44750696/article/details/123960134\">https://blog.csdn.net/qq_44750696/article/details/123960134</a></li>\n</ol>\n<h1 id=\"参数校验\"><a href=\"#参数校验\" class=\"headerlink\" title=\"参数校验\"></a>参数校验</h1><h2 id=\"Valid-Valided\"><a href=\"#Valid-Valided\" class=\"headerlink\" title=\"@Valid,@Valided\"></a>@Valid,@Valided</h2><p><a href=\"https://blog.csdn.net/weixin_51439775/article/details/128386125\">https://blog.csdn.net/weixin_51439775/article/details/128386125</a></p>\n<h1 id=\"WEB相关\"><a href=\"#WEB相关\" class=\"headerlink\" title=\"WEB相关\"></a>WEB相关</h1><h2 id=\"RequestBody\"><a href=\"#RequestBody\" class=\"headerlink\" title=\"@RequestBody\"></a>@RequestBody</h2><blockquote>\n<p>获取request请求体中的内容，常用来处理content-type不是默认的application&#x2F;x-www-form-urlcoded编码（form表单格式）的内容，比如说：application&#x2F;json或者是application&#x2F;xml等。一般情况下来说常用其来处理application&#x2F;json类型。</p>\n</blockquote>\n<blockquote>\n<p>@RequestBody注解可以解析请求体中json格式的数据，并将其封装到javaBean中。</p>\n</blockquote>\n<p>测试：</p>\n<p>使用postman发送请求，请求体中使用json格式字符串。<br><img src=\"/2023/02/04/spring-boot-chang-yong-zhu-jie/@RequestBody1.png\" alt=\"发送请求\"><br>在后端代码可以用String来接收，接收结果是原json字符串：</p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Controller</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">TestController</span> <span class=\"token punctuation\">&#123;</span>\n\n    <span class=\"token annotation punctuation\">@RequestMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">welcome</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@RequestBody</span><span class=\"token punctuation\">(</span>required <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span> <span class=\"token class-name\">String</span> dog<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>dog<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token string\">\"index\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n<p>控制台输出：<code>&#123;&quot;id&quot;:&quot;1&quot;,&quot;name&quot;:&quot;六六&quot;,&quot;age&quot;:&quot;3&quot;&#125;</code></p>\n<p>也可以用对象来接收，接收结果是json字符串封装后的对象：</p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Controller</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">TestController</span> <span class=\"token punctuation\">&#123;</span>\n\n    <span class=\"token annotation punctuation\">@RequestMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">welcome</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@RequestBody</span><span class=\"token punctuation\">(</span>required <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span> <span class=\"token class-name\">Dog</span> dog<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>dog<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token string\">\"index\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n<p>控制台输出：<code>Dog(id=1, name=六六, age=3)</code></p>\n<p>如果使用@RequestBody注解来接收form表单的请求（即application&#x2F;x-www-form-urlcoded编码）会报415，并在控制台报出编码格式不支持的错误：<br><code>Resolved [org.springframework.web.HttpMediaTypeNotSupportedException: Content type &#39;application/x-www-form-urlencoded;charset=UTF-8&#39; not supported]</code></p>\n<h2 id=\"RequestParam\"><a href=\"#RequestParam\" class=\"headerlink\" title=\"@RequestParam\"></a>@RequestParam</h2><p>用于将请求参数映射到控制层方法的参数上。<br>@RequestParam含有以下三个属性：</p>\n<ul>\n<li>value：设置传入的参数的名称，若不设置默认使用变量值。</li>\n<li>required：设置该参数是否必填。表示请求中一定要传入对应的参数，否则会报404错误，如果设置为false时，当请求中没有此参数，将会默认为null,而对于基本数据类型的变量，则必须有值，这时会抛出空指针异常。</li>\n<li>defaultValue：参数的默认值，如果请求中没有同名的参数时，该变量默认为此值。注意默认值可以使用SpEL表达式。</li>\n</ul>\n<h2 id=\"PathVariable\"><a href=\"#PathVariable\" class=\"headerlink\" title=\"@PathVariable\"></a>@PathVariable</h2><p>处理请求的URL，把占位符绑定到controller的方法参数上。<br>该注解有两个属性：</p>\n<ul>\n<li>value：设置匹配的占位符的名称，若不设置，默认使用参数名称匹配占位符。</li>\n<li>required：设置该参数是否必填，默认值为true，表示URL中必须含有匹配的占位符，否则将抛出异常。</li>\n</ul>\n<p>使用方法例如：</p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@GetMapping</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"/&#123;page&#125;/&#123;pageSize&#125;\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"/delete/&#123;page&#125;/&#123;pageSize&#125;\"</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">toEmpPage</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">HttpServletRequest</span> request<span class=\"token punctuation\">,</span>\n                        <span class=\"token annotation punctuation\">@PathVariable</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"page\"</span><span class=\"token punctuation\">)</span> <span class=\"token class-name\">Integer</span> page<span class=\"token punctuation\">,</span>\n                        <span class=\"token annotation punctuation\">@PathVariable</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"pageSize\"</span><span class=\"token punctuation\">)</span> <span class=\"token class-name\">Integer</span> pageSize<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">//业务部分</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n<p>上述代码即是把URL中的{page}和{pageSize}分别绑定到方法参数中的page和pageSize上。</p>\n<h2 id=\"RequestHeader\"><a href=\"#RequestHeader\" class=\"headerlink\" title=\"@RequestHeader\"></a>@RequestHeader</h2><p>用于把请求头中的参数绑定到方法参数上。<br>它有三个属性，和@RequestParam注解完全相同。</p>\n<h2 id=\"CookieValue\"><a href=\"#CookieValue\" class=\"headerlink\" title=\"@CookieValue\"></a>@CookieValue</h2><p>用于把请求中的cookie绑定到方法参数上。<br>它的属性同上。</p>\n<h2 id=\"ModelAttribute\"><a href=\"#ModelAttribute\" class=\"headerlink\" title=\"@ModelAttribute\"></a>@ModelAttribute</h2><p>@ModelAttribute的作用是把数据添加进模型对象中，供前端页面渲染使用。它的用法有很多：</p>\n<ol>\n<li>入参处使用<blockquote>\n<p>将@ModelAttribute注解标记在入参上，在渲染页面之前就会自动把标记的入参添加到模型对象中。</p>\n</blockquote>\n</li>\n</ol>\n<p>示例代码：</p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Controller</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">TestController</span> <span class=\"token punctuation\">&#123;</span>\n\n    <span class=\"token annotation punctuation\">@RequestMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">welcome</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@ModelAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"msg2\"</span><span class=\"token punctuation\">)</span><span class=\"token class-name\">String</span> msg2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token string\">\"index\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n\n<p>前端代码：</p>\n<pre class=\"language-HTML\" data-language=\"HTML\"><code class=\"language-HTML\">&lt;form th:action&#x3D;&quot;@&#123;&#x2F;&#125;&quot; method&#x3D;&quot;post&quot;&gt;\n    &lt;label&gt;\n        msg2:\n        &lt;input type&#x3D;&quot;text&quot; name&#x3D;&quot;msg2&quot;&#x2F;&gt;\n    &lt;&#x2F;label&gt;\n    &lt;input type&#x3D;&quot;submit&quot;&gt;\n    &lt;p th:text&#x3D;&quot;$&#123;msg2&#125;&quot;&gt;&lt;&#x2F;p&gt;&lt;!--  前端提交表单后，后端再次返回该页面，并将上次输入的信息显示在此处   --&gt;\n&lt;&#x2F;form&gt;</code></pre>\n<p>结果：<br>发送之前：<img src=\"/2023/02/04/spring-boot-chang-yong-zhu-jie/@ModelAttribute1.png\" alt=\"页面效果\"><br>发送之后：<img src=\"/2023/02/04/spring-boot-chang-yong-zhu-jie/@ModelAttribute2.png\" alt=\"页面效果\"></p>\n<ol start=\"2\">\n<li>方法上使用<br>被@ModelAttribute注释的方法会在此controller的每个方法执行前被执行 ，如果有返回值，则自动将该返回值加入到ModelMap中。<ul>\n<li>若注解没有返回值的方法，一般在方法体内部用model对象手动加入：</li>\n</ul>\n</li>\n</ol>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Controller</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">TestController</span> <span class=\"token punctuation\">&#123;</span>\n\n    <span class=\"token annotation punctuation\">@ModelAttribute</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">before</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@RequestParam</span> <span class=\"token class-name\">String</span> msg2<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Model</span> model<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        model<span class=\"token punctuation\">.</span><span class=\"token function\">addAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"msg2\"</span><span class=\"token punctuation\">,</span>msg2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token annotation punctuation\">@RequestMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">welcome</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token string\">\"index\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n\n<ul>\n<li>若注解有返回值的方法，建议通过@ModelAttribute(value &#x3D; “”)指定名称，若不指定，默认使用返回类型小写作为名称。</li>\n</ul>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Controller</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">TestController</span> <span class=\"token punctuation\">&#123;</span>\n\n    <span class=\"token annotation punctuation\">@ModelAttribute</span><span class=\"token comment\">//不指定名称，属性名为返回类型小写，即string</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">before</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@RequestParam</span> <span class=\"token class-name\">String</span> msg2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>msg2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> msg2<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token annotation punctuation\">@RequestMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">welcome</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token string\">\"index\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n<h2 id=\"SessionAttributes\"><a href=\"#SessionAttributes\" class=\"headerlink\" title=\"@SessionAttributes\"></a>@SessionAttributes</h2><p>将ModelMap等方式传到前端的属性值共享到session中。</p>\n<blockquote>\n<p>@SessionAttributes注解只能使用在类上，用于在多个请求之间传递参数，类似于Session的Attribute，但不完全一样，一般来说@SessionAttributes设置的参数只用于暂时的传递（存入sessionAttributeStore），而不是长期的保存，长期保存的数据还是要放到Session中。</p>\n</blockquote>\n<blockquote>\n<p>有两种方式将ModelMap中的属性值共享到session中：</p>\n<ul>\n<li>使用注解的value属性：可以通过属性名指定需要放到会话中的属性；</li>\n<li>使用注解的types属性：还可以通过模型属性的对象类型指定哪些模型属性需要放到会话中。</li>\n</ul>\n</blockquote>\n<h2 id=\"CrossOrigin\"><a href=\"#CrossOrigin\" class=\"headerlink\" title=\"@CrossOrigin\"></a>@CrossOrigin</h2><h2 id=\"RestController\"><a href=\"#RestController\" class=\"headerlink\" title=\"@RestController\"></a>@RestController</h2><h2 id=\"ControllerAdvice\"><a href=\"#ControllerAdvice\" class=\"headerlink\" title=\"@ControllerAdvice\"></a>@ControllerAdvice</h2><p>@ControllerAdvice的作用也是声明一个控制层组件，通常用于全局异常处理、添加全局数据以及请求参数预处理。</p>\n<ul>\n<li>全局异常处理<blockquote>\n<p>搭配@ExceptionHandler注解使用。@ExceptionHandler注解只有一个属性value，是一个Throwable类型的数组，它的作用是设置匹配异常的种类，当Controller层出现value数组内的异常时，将调用被@ExceptionHandler标记的方法。</p>\n</blockquote>\n<blockquote>\n<p>方法的参数可以包括异常实例、HttpServletRequest、HttpServletResponse、Model等；返回值可以是void、Json（需要用@ResponseBody标记）、ModelAndView（可以添加数据、设置视图名称）、甚至是逻辑视图名。</p>\n</blockquote>\n</li>\n</ul>\n<p>示例代码：</p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@ControllerAdvice</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">TestControllerAdvice</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token annotation punctuation\">@ExceptionHandler</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ArithmeticException</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">ModelAndView</span> <span class=\"token function\">exceptionHandler</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"出现异常\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">ModelAndView</span> model <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ModelAndView</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        model<span class=\"token punctuation\">.</span><span class=\"token function\">addObject</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"msg2\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"出现异常！\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        model<span class=\"token punctuation\">.</span><span class=\"token function\">setViewName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"index\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> model<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Controller</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">TestController</span> <span class=\"token punctuation\">&#123;</span>\n\n    <span class=\"token annotation punctuation\">@RequestMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">welcome</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">int</span> a <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token operator\">/</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token string\">\"index\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n<p>浏览器访问该方法时触发ArithmeticException异常，返回页面如下：<br><img src=\"/Spring-Boot%E5%B8%B8%E7%94%A8%E6%B3%A8%E8%A7%A3/@ControllerAdvice1.png\" alt=\"页面\"></p>\n<ul>\n<li>添加全局数据<blockquote>\n<p>搭配@ModelAttribute注解使用。@ModelAttribute标记一个方法，该方法的返回值将作为全局数据，所有Controller层方法和页面都可以访问到。</p>\n</blockquote>\n  示例代码如下：<br>  controllerAdvice：</li>\n</ul>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@ControllerAdvice</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">TestControllerAdvice</span> <span class=\"token punctuation\">&#123;</span>\n\n    <span class=\"token annotation punctuation\">@ModelAttribute</span><span class=\"token punctuation\">(</span>value <span class=\"token operator\">=</span> <span class=\"token string\">\"user\"</span><span class=\"token punctuation\">)</span><span class=\"token comment\">//model中的key</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> <span class=\"token class-name\">GlobalConfig</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> map <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        map<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"username\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"dfy\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        map<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"age\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"18\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> map<span class=\"token punctuation\">;</span><span class=\"token comment\">//model中的value</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n<p>controller:</p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Controller</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">TestController</span> <span class=\"token punctuation\">&#123;</span>\n\n    <span class=\"token annotation punctuation\">@RequestMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">welcome</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Model</span> model<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">></span></span> map <span class=\"token operator\">=</span> model<span class=\"token punctuation\">.</span><span class=\"token function\">asMap</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Set</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> keySet <span class=\"token operator\">=</span> map<span class=\"token punctuation\">.</span><span class=\"token function\">keySet</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Iterator</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> iterator <span class=\"token operator\">=</span> keySet<span class=\"token punctuation\">.</span><span class=\"token function\">iterator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>iterator<span class=\"token punctuation\">.</span><span class=\"token function\">hasNext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token class-name\">String</span> key <span class=\"token operator\">=</span> iterator<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\">Object</span> value <span class=\"token operator\">=</span> map<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>key <span class=\"token operator\">+</span> <span class=\"token string\">\"=\"</span> <span class=\"token operator\">+</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token string\">\"index\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n<p>页面：</p>\n<pre class=\"language-HTML\" data-language=\"HTML\"><code class=\"language-HTML\">&lt;p th:text&#x3D;&quot;$&#123;user.username&#125;&quot;&gt;&lt;&#x2F;p&gt;\n&lt;p th:text&#x3D;&quot;$&#123;user.age&#125;&quot;&gt;&lt;&#x2F;p&gt;</code></pre>\n<p>控制台输出为：<br><code>user=&#123;age=18, username=dfy&#125;</code><br>页面输出为：<br><img src=\"/2023/02/04/spring-boot-chang-yong-zhu-jie/@ControllerAdvice2.png\" alt=\"页面\"></p>\n<ul>\n<li><p>请求参数预处理<br>搭配@InitBinder注解使用。被@InitBinder标记的方法，参数中必须要含有WebDataBinder，具体用法如下：</p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@InitBinder</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">initBinder</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">WebDataBinder</span> binder<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    binder<span class=\"token punctuation\">.</span><span class=\"token function\">registerCustomEditor</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">StringTrimmerEditor</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n<p>通过WebDataBinder类的registerCustomEditor方法来注册请求参数的预处理器，它的方法参数为：<br><code>registerCustomEditor(Class&lt;?&gt; requiredType, PropertyEditor propertyEditor)</code><br>requiredType代表该预处理器处理的数据类型；propertyEditor代表预处理器，它的实现类有很多，这里不一一列举。<br>自定义属性编辑器可以通过继承<code>java.beans.PropertyEditorSupport</code>类并重写其<code>setAsText</code>方法实现，最后调用setValue(Object Value)方法完成转换后的值的设置。</p>\n<p>还有其他花式用法，具体可参见博客<a href=\"https://blog.csdn.net/wang0907/article/details/108357696\">https://blog.csdn.net/wang0907/article/details/108357696</a></p>\n</li>\n</ul>\n<h2 id=\"元注解包括-Retention-Target-Document-Inherited四种\"><a href=\"#元注解包括-Retention-Target-Document-Inherited四种\" class=\"headerlink\" title=\"元注解包括  @Retention @Target @Document @Inherited四种\"></a>元注解包括  @Retention @Target @Document @Inherited四种</h2><h2 id=\"RequestMapping\"><a href=\"#RequestMapping\" class=\"headerlink\" title=\"@RequestMapping\"></a>@RequestMapping</h2><h2 id=\"GetMapping和-PostMapping\"><a href=\"#GetMapping和-PostMapping\" class=\"headerlink\" title=\"@GetMapping和@PostMapping\"></a>@GetMapping和@PostMapping</h2>","site":{"data":{}},"excerpt":"","more":"<h1 id=\"配置类相关\"><a href=\"#配置类相关\" class=\"headerlink\" title=\"配置类相关\"></a>配置类相关</h1><h2 id=\"Configuration\"><a href=\"#Configuration\" class=\"headerlink\" title=\"@Configuration\"></a>@Configuration</h2><blockquote>\n<p>声明一个类为配置类，用于取代bean.xml配置文件注册bean对象。<br/><br>@Configuration注解中含有@Component注解，所以被@Configuration标记的配置类会作为一个bean对象被加载到ioc容器中。<br><br>它通常搭配@Bean注解和@Scope注解使用。</p>\n</blockquote>\n<blockquote>\n<p>@Configuration有一个属性proxyBeanMethods，用于指定是否为懒加载，默认值为true。<br>proxyBeanMethods &#x3D; true的情况下，保持单实例对象，在spring容器启动时就会创建bean对象。这种情况主要用在bean对象的依赖情况下，如果存在一个bean依赖另一个bean时，一般会采用Full模式。<br>proxyBeanMethods &#x3D; false的情况下，不检查IOC容器中是否存在，而是简单的调用方法进行创建对象，无法保持单实例。当不存在bean对象的依赖问题时，会才有轻量级的配置。</p>\n</blockquote>\n<p>测试代码如下：</p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@SpringBootApplication</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">TestSpringBootApp</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">//获取ioc容器</span>\n        <span class=\"token class-name\">ConfigurableApplicationContext</span> run <span class=\"token operator\">=</span> <span class=\"token class-name\">SpringApplication</span><span class=\"token punctuation\">.</span><span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">TestSpringBootApp</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token class-name\">Object</span> dogBean <span class=\"token operator\">=</span> run<span class=\"token punctuation\">.</span><span class=\"token function\">getBean</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Dog</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>dogBean<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">User</span> userBean <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">User</span><span class=\"token punctuation\">)</span>run<span class=\"token punctuation\">.</span><span class=\"token function\">getBean</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">User</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>userBean<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>userBean<span class=\"token punctuation\">.</span><span class=\"token function\">getDog</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">==</span>dogBean<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n<p>User类：</p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Data</span>\n<span class=\"token annotation punctuation\">@NoArgsConstructor</span>\n<span class=\"token annotation punctuation\">@AllArgsConstructor</span>\n<span class=\"token annotation punctuation\">@ToString</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">User</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Integer</span> id<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Integer</span> age<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> email<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Dog</span> dog<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n<p>Dog类：</p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Data</span>\n<span class=\"token annotation punctuation\">@NoArgsConstructor</span>\n<span class=\"token annotation punctuation\">@AllArgsConstructor</span>\n<span class=\"token annotation punctuation\">@ToString</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Dog</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Integer</span> id<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Integer</span> age<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n</code></pre>\n<p>testConfiguration类：</p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Configuration</span><span class=\"token punctuation\">(</span>proxyBeanMethods <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token comment\">//多例模式</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">TestConfiguration</span> <span class=\"token punctuation\">&#123;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> count <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token annotation punctuation\">@Bean</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">User</span> <span class=\"token function\">userBean</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"User对象创建\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">User</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"dfy\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">15</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token function\">dogBean</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token annotation punctuation\">@Bean</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Dog</span> <span class=\"token function\">dogBean</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Dog对象第\"</span><span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">++</span>count<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token string\">\"次创建\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Dog</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"六六\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n<p>输出结果如下：<br><img src=\"/2023/02/04/spring-boot-chang-yong-zhu-jie/@Configuration1.png\" alt=\"输出结果\"></p>\n<p>如果改成单例模式，即<code>proxyBeanMethods = true</code>，那么输出结果将变成：<br><img src=\"/2023/02/04/spring-boot-chang-yong-zhu-jie/@Configuration2.png\" alt=\"输出结果\"></p>\n<h2 id=\"Bean\"><a href=\"#Bean\" class=\"headerlink\" title=\"@Bean\"></a>@Bean</h2><p>@Bean注解通常标记一个Supplier方法，用于声明一个bean对象的注册，默认的加载模式为饿汉单例。<br/></p>\n<blockquote>\n<p>使用@Bean声明一个bean：</p>\n</blockquote>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Configuration</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">TestConfiguration</span> <span class=\"token punctuation\">&#123;</span>\n\n    <span class=\"token annotation punctuation\">@Bean</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">User</span> <span class=\"token function\">userBean</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"User对象正在创建\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">User</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"dfy\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">15</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@SpringBootApplication</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">TestSpringBootApp</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">//获取ioc容器</span>\n        <span class=\"token class-name\">ConfigurableApplicationContext</span> run <span class=\"token operator\">=</span> <span class=\"token class-name\">SpringApplication</span><span class=\"token punctuation\">.</span>runTestSpringBootApp<span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Object</span> user <span class=\"token operator\">=</span> run<span class=\"token punctuation\">.</span><span class=\"token function\">getBean</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">User</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n<p>输出结果为：<br> <img src=\"/2023/02/04/spring-boot-chang-yong-zhu-jie/@Bean1.png\" alt=\"输出结果\"></p>\n<p>@Bean注解含有如下属性：</p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token annotation punctuation\">@interface</span> <span class=\"token class-name\">Bean</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token annotation punctuation\">@AliasFor</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">value</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">default</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token annotation punctuation\">@AliasFor</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"value\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">name</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">default</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">/** @deprecated */</span>\n    <span class=\"token annotation punctuation\">@Deprecated</span>\n    <span class=\"token class-name\">Autowire</span> <span class=\"token function\">autowire</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">default</span> <span class=\"token class-name\">Autowire</span><span class=\"token punctuation\">.</span><span class=\"token constant\">NO</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">boolean</span> <span class=\"token function\">autowireCandidate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">default</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token class-name\">String</span> <span class=\"token function\">initMethod</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">default</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token class-name\">String</span> <span class=\"token function\">destroyMethod</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">default</span> <span class=\"token string\">\"(inferred)\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n<ul>\n<li>value和name<blockquote>\n<p>可以看到value和name两个属性是一个别名对，它们的作用是指定该bean的名称。<br>  如果在使用时未指定bean的名称，默认使用带注解方法的名称；如果指定了，方法本身的名称就会被忽略。</p>\n</blockquote>\n</li>\n</ul>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Configuration</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">TestConfiguration</span> <span class=\"token punctuation\">&#123;</span>\n\n    <span class=\"token annotation punctuation\">@Bean</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">User</span> <span class=\"token function\">userBean</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"未指定名称的User对象正在创建\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">User</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"dfy\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">15</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token annotation punctuation\">@Bean</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"User01\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">User</span> <span class=\"token function\">userBean01</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"指定名称的User对象正在创建\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">User</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"dfy\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">15</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n\n\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@SpringBootApplication</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">TestSpringBootApp</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">//获取ioc容器</span>\n        <span class=\"token class-name\">ConfigurableApplicationContext</span> run <span class=\"token operator\">=</span> <span class=\"token class-name\">SpringApplication</span><span class=\"token punctuation\">.</span><span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">TestSpringBootApp</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">//获取所有bean对象的名称</span>\n        <span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> beanDefinitionNames <span class=\"token operator\">=</span> run<span class=\"token punctuation\">.</span><span class=\"token function\">getBeanDefinitionNames</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> s <span class=\"token operator\">:</span> beanDefinitionNames<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n\n\n<p>输出结果如下：<br><img src=\"/2023/02/04/spring-boot-chang-yong-zhu-jie/@Bean2.png\" alt=\"输出结果\"></p>\n<ul>\n<li><p>autowire</p>\n<blockquote>\n<p>已弃用。<br>autowire确定自动装配状态，即该bean创建时是否使用它的setter方法对它的成员变量进行自动装配。<br>  Autowire是一个枚举类，有三个值：</p>\n<ul>\n<li>NO：不自动装配</li>\n<li>BY_NAME：根据名称自动装配</li>\n<li>BY_TYPE：根据类型自动装配<br>默认值是NO，即不自动装配。</li>\n</ul>\n</blockquote>\n</li>\n<li><p>autowireCandidate</p>\n<blockquote>\n<p>autowireCandidate和配置文件bean标签的autowireCandidate属性一样，就是让其他的bean在自动注入时，是否会装配当前的bean。 默认值true。</p>\n</blockquote>\n</li>\n</ul>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Configuration</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">TestConfiguration</span> <span class=\"token punctuation\">&#123;</span>\n\n    <span class=\"token annotation punctuation\">@Bean</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">User</span> <span class=\"token function\">userBean</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">User</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"dfy\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">15</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token annotation punctuation\">@Bean</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Dog</span> <span class=\"token function\">dog1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Dog</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"狗宝\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token annotation punctuation\">@Bean</span><span class=\"token punctuation\">(</span>autowireCandidate <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token comment\">//不作为自动注入的候选者</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Dog</span> <span class=\"token function\">dog2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Dog</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"六六\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Data</span>\n<span class=\"token annotation punctuation\">@NoArgsConstructor</span>\n<span class=\"token annotation punctuation\">@AllArgsConstructor</span>\n<span class=\"token annotation punctuation\">@ToString</span>\n<span class=\"token annotation punctuation\">@Component</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">User</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Integer</span> id<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Integer</span> age<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> email<span class=\"token punctuation\">;</span>\n    <span class=\"token annotation punctuation\">@Autowired</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Dog</span> dog<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@SpringBootApplication</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">TestSpringBootApp</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">//获取ioc容器</span>\n        <span class=\"token class-name\">ConfigurableApplicationContext</span> run <span class=\"token operator\">=</span> <span class=\"token class-name\">SpringApplication</span><span class=\"token punctuation\">.</span><span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">TestSpringBootApp</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token class-name\">Object</span> userBean <span class=\"token operator\">=</span> run<span class=\"token punctuation\">.</span><span class=\"token function\">getBean</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"userBean\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>userBean<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n<p>输出结果为：<br><code>User(id=1, name=dfy, age=15, email=null, dog=Dog(id=1, name=狗宝, age=5))</code><br>如果取消dog2的<code>autowireCandidate = false</code>，spring容器会报<code>NoUniqueBeanDefinitionException</code>异常。<br>有趣的是，虽然spring容器启动时可以正常装配第二个Dog对象，但是idea会编译报错：<br><img src=\"/2023/02/04/spring-boot-chang-yong-zhu-jie/@Bean3.png\" alt=\"自动装配报错\"></p>\n<ul>\n<li>initMethod和destroyMethod<blockquote>\n<p>用于指定bean的初始化和销毁方法。</p>\n</blockquote>\n</li>\n</ul>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Configuration</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">TestConfiguration</span> <span class=\"token punctuation\">&#123;</span>\n\n    <span class=\"token annotation punctuation\">@Bean</span><span class=\"token punctuation\">(</span>initMethod <span class=\"token operator\">=</span> <span class=\"token string\">\"userInit\"</span><span class=\"token punctuation\">,</span> destroyMethod <span class=\"token operator\">=</span> <span class=\"token string\">\"userDestroy\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">User</span> <span class=\"token function\">userBean</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">User</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"dfy\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">15</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n\n\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Data</span>\n<span class=\"token annotation punctuation\">@NoArgsConstructor</span>\n<span class=\"token annotation punctuation\">@AllArgsConstructor</span>\n<span class=\"token annotation punctuation\">@ToString</span>\n<span class=\"token annotation punctuation\">@Component</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">User</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Integer</span> id<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Integer</span> age<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> email<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">userInit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"User init...\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">userDestroy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"User destroy...\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n<p>输出结果：<br><img src=\"/2023/02/04/spring-boot-chang-yong-zhu-jie/@Bean4.png\" alt=\"输出结果\"></p>\n<h2 id=\"Value\"><a href=\"#Value\" class=\"headerlink\" title=\"@Value\"></a>@Value</h2><blockquote>\n<p>常用于标记成员变量，注入外部化属性<br>@Value的三种用法：</p>\n<ul>\n<li>注入普通属性<br>  语法为@Value(…)，直接使用字面量即可</li>\n<li>注入配置文件<br>  语法为@Value(“${…}”)，注入配置文件中写好的属性值</li>\n<li>注入表达式并运算<br>  语法为@Value(“#{…}”)，写入spring框架的SpEl表达式即可<br>  每个框架有自己的一套SpEl表达式，详情可以参考<a href=\"https://docs.spring.io/spring-framework/docs/current/reference/html/core.html#expressions\">官方文档</a></li>\n</ul>\n</blockquote>\n<p>代码示例如下：</p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Data</span>\n<span class=\"token annotation punctuation\">@NoArgsConstructor</span>\n<span class=\"token annotation punctuation\">@AllArgsConstructor</span>\n<span class=\"token annotation punctuation\">@ToString</span>\n<span class=\"token annotation punctuation\">@Component</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">User</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token annotation punctuation\">@Value</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"10\"</span><span class=\"token punctuation\">)</span><span class=\"token comment\">//注入普通属性</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Integer</span> id<span class=\"token punctuation\">;</span>\n    <span class=\"token annotation punctuation\">@Value</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"$&#123;user_name&#125;\"</span><span class=\"token punctuation\">)</span><span class=\"token comment\">//注入外部配置文件</span>\n    <span class=\"token comment\">//application.yml中写入属性： user_name: user01</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">;</span>\n    <span class=\"token annotation punctuation\">@Value</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"#&#123;2+1+3&#125;\"</span><span class=\"token punctuation\">)</span><span class=\"token comment\">//注入表达式</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Integer</span> age<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> email<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">userInit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"User init...\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">userDestroy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"User destroy...\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Configuration</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">TestConfiguration</span> <span class=\"token punctuation\">&#123;</span>\n\n    <span class=\"token annotation punctuation\">@Bean</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">User</span> <span class=\"token function\">userBean</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">User</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"dfy\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">15</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n<p>该bean的输出结果为：<br><code>User(id=10, name=user01, age=6, email=null)</code><br>可以看到属性值已经成功注入，并且在new User对象时指定的默认值没有起到作用，被@Value的值覆盖掉了。</p>\n<h2 id=\"Scope\"><a href=\"#Scope\" class=\"headerlink\" title=\"@Scope\"></a>@Scope</h2><blockquote>\n<p>@Scope通常和@Bean配合使用，用于指定该bean的作用域。它具有以下几种作用域：</p>\n<ul>\n<li>singleton 单例模式（默认值）</li>\n<li>prototype 多例模式</li>\n<li>request 每次http请求产生一个bean，该bean在本次HTTP request内有效</li>\n<li>session 每次http请求产生一个bean，该bean在本次HTTP session内有效</li>\n</ul>\n</blockquote>\n<h1 id=\"生命周期相关\"><a href=\"#生命周期相关\" class=\"headerlink\" title=\"生命周期相关\"></a>生命周期相关</h1><h2 id=\"Lazy-true\"><a href=\"#Lazy-true\" class=\"headerlink\" title=\"@Lazy(true)\"></a>@Lazy(true)</h2><blockquote>\n<p>@Lazy表明一个bean是否被延迟加载，当@Lazy的值设定为true（默认值即为true）时，表明该bean被延迟加载。</p>\n<ul>\n<li>标记在方法上，表示该方法被延迟加载</li>\n<li>标记在@Component的类上或是@Component作为元注解的类上（其实就是标记在一个bean上），表示该bean被延迟加载</li>\n</ul>\n</blockquote>\n<p>测试代码：</p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Data</span>\n<span class=\"token annotation punctuation\">@AllArgsConstructor</span>\n<span class=\"token annotation punctuation\">@ToString</span>\n<span class=\"token annotation punctuation\">@Component</span>\n<span class=\"token annotation punctuation\">@Lazy</span><span class=\"token comment\">//延迟加载</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">User</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Integer</span> id<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Integer</span> age<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> email<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Dog</span> dog<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">User</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"User 对象被创建\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n<p>在spring启动时未看到User对象的创建：<br><img src=\"/2023/02/04/spring-boot-chang-yong-zhu-jie/@Lazy1.png\" alt=\"输出结果\"></p>\n<h2 id=\"PostConstruct-和-PreDestory\"><a href=\"#PostConstruct-和-PreDestory\" class=\"headerlink\" title=\"@PostConstruct 和 @PreDestory\"></a>@PostConstruct 和 @PreDestory</h2><blockquote>\n<p>实现初始化和销毁bean之前进行的操作，只能有一个方法可以用此注释进行注释，方法不能有参数，返回值必需是void,方法需要是非静态的,不能抛出异常。</p>\n<ul>\n<li>@PostConstruct：在构造方法和init方法（如果有的话）之间得到调用，且只会执行一次。</li>\n<li>@PreDestory：注解的方法在destory()方法调用后得到执行。</li>\n</ul>\n</blockquote>\n<p>代码示例：</p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Configuration</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">TestConfiguration</span> <span class=\"token punctuation\">&#123;</span>\n\n    <span class=\"token annotation punctuation\">@Bean</span><span class=\"token punctuation\">(</span>initMethod <span class=\"token operator\">=</span> <span class=\"token string\">\"init\"</span><span class=\"token punctuation\">,</span>destroyMethod <span class=\"token operator\">=</span> <span class=\"token string\">\"destroy\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Dog</span> <span class=\"token function\">dogBean</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Dog对象配置类中创建...\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Dog</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"六六\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Data</span>\n<span class=\"token annotation punctuation\">@NoArgsConstructor</span>\n<span class=\"token annotation punctuation\">@AllArgsConstructor</span>\n<span class=\"token annotation punctuation\">@ToString</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Dog</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Integer</span> id<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Integer</span> age<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">init</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Dog对象初始化...\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">destroy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Dog对象销毁...\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token annotation punctuation\">@PostConstruct</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">postConstruct</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Dog对象初始化之前...\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token annotation punctuation\">@PreDestroy</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">preDestroy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Dog对象销毁之后...\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n<p>spring启动后结果为：<br><img src=\"/2023/02/04/spring-boot-chang-yong-zhu-jie/@PreDestroy1.png\" alt=\"输出结果\"></p>\n<h1 id=\"bean对象相关\"><a href=\"#bean对象相关\" class=\"headerlink\" title=\"bean对象相关\"></a>bean对象相关</h1><h2 id=\"Controller-Service-Repository-Compnent\"><a href=\"#Controller-Service-Repository-Compnent\" class=\"headerlink\" title=\"@Controller, @Service, @Repository, @Compnent\"></a>@Controller, @Service, @Repository, @Compnent</h2><p>这四个注解的作用没有区别，都是声明一个bean对象注册到ioc容器中。但是为了程序可读性和开发规范，在使用时依然要按照java类的实际作用去使用。</p>\n<p>在使用时只需要把它们标注在一个类上，spring容器启动时就会把对象创建好注入ioc：</p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Data</span>\n<span class=\"token annotation punctuation\">@NoArgsConstructor</span>\n<span class=\"token annotation punctuation\">@AllArgsConstructor</span>\n<span class=\"token annotation punctuation\">@ToString</span>\n<span class=\"token annotation punctuation\">@Component</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Dog</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Integer</span> id<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Integer</span> age<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n<p><img src=\"/2023/02/04/spring-boot-chang-yong-zhu-jie/@Component1.png\" alt=\"输出结果\"></p>\n<p>也可以给这些注解一个值，作为bean对象的名称：</p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Data</span>\n<span class=\"token annotation punctuation\">@NoArgsConstructor</span>\n<span class=\"token annotation punctuation\">@AllArgsConstructor</span>\n<span class=\"token annotation punctuation\">@ToString</span>\n<span class=\"token annotation punctuation\">@Component</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"firstDog\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Dog</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Integer</span> id<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Integer</span> age<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n<p><img src=\"/2023/02/04/spring-boot-chang-yong-zhu-jie/@Component2.png\" alt=\"输出结果\"></p>\n<h2 id=\"Named和-Inject\"><a href=\"#Named和-Inject\" class=\"headerlink\" title=\"@Named和@Inject\"></a>@Named和@Inject</h2><blockquote>\n<p>这两个注解是JSR-330的一部分。在Spring 3中，开始支持JSR-330的注解。这些注解在使用上和Spring的注解一样，所不同的只是需要额外的相关jar包。你可以使用下面的注解在spring 3应用中。<br>@Inject替代@Autowired来执行注入<br>@Named替代@Component来声明一个Bean</p>\n</blockquote>\n<blockquote>\n<p>在springboot项目中，使用这两个注解需要先引入依赖：</p>\n<pre class=\"language-markup\" data-language=\"markup\"><code class=\"language-markup\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>javax.inject<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>javax.inject<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>1<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></code></pre>\n</blockquote>\n<blockquote>\n<ul>\n<li>@Named功能和@Component注解相同，它的值用于指定bean的名称，如果没有值默认使用类名作为bean名称。</li>\n<li>@Inject注解在spring环境下，和@Autowired是相同的。</li>\n</ul>\n</blockquote>\n<h2 id=\"Autowired和-Resource\"><a href=\"#Autowired和-Resource\" class=\"headerlink\" title=\"@Autowired和@Resource\"></a>@Autowired和@Resource</h2><blockquote>\n<p>这两个注解的作用相同，用于bean对象的自动装配。</p>\n</blockquote>\n<p>使用示例：</p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">//@Autowired</span>\n<span class=\"token annotation punctuation\">@Resource</span>\n<span class=\"token keyword\">private</span> <span class=\"token class-name\">Dog</span> dog<span class=\"token punctuation\">;</span></code></pre>\n<p>下面详细说一下@Autowired的装配原理：</p>\n<blockquote>\n<ul>\n<li>@Autowired默认按照ByType类型进行装配。</li>\n<li>若ByType类型匹配到多个bean，那么按照ByName类型装配：<ul>\n<li>若没有和@Qualifier搭配使用，默认按照变量名作为bean名称去匹配（例如上面Dog的例子，默认使用变量名dog作为bean名称），这种情况下若没有匹配到bean，会报NoUniqueBeanDefinationException异常。</li>\n<li>若搭配@Qualifier使用，会按照@Qualifier注解指定的bean名称进行匹配，如果没有匹配到，会报NoSuchBeanDefinitionException异常。</li>\n</ul>\n</li>\n<li>@Autowired有一个required属性，默认值为true，表示不接受空值，若没有匹配到bean报错。如果设置为false，表示允许null。</li>\n</ul>\n</blockquote>\n<p>@Resource和@Autowired的区别：</p>\n<blockquote>\n<p>@Resource默认按照Byname方式匹配bean，匹配失败会回滚到@Autowired。<br>可以手动指定bean,它有2个属性分别是name和type，使用name属性，则使用byName的自动注入，而使用type属性时则使用byType自动注入。<br>@Resource(name&#x3D;”bean名字”)或@Resource(type&#x3D;”bean的class”)</p>\n</blockquote>\n<h2 id=\"Primary\"><a href=\"#Primary\" class=\"headerlink\" title=\"@Primary\"></a>@Primary</h2><blockquote>\n<p>自动装配时当出现多个Bean候选者时，被注解为@Primary的Bean将作为首选者，否则将抛出异常。</p>\n</blockquote>\n<h1 id=\"多线程\"><a href=\"#多线程\" class=\"headerlink\" title=\"多线程\"></a>多线程</h1><h2 id=\"Async\"><a href=\"#Async\" class=\"headerlink\" title=\"@Async\"></a>@Async</h2><ol>\n<li>在方法上使用该@Async注解，申明该方法是一个异步任务；</li>\n<li>在类上面使用该@Async注解，申明该类中的所有方法都是异步任务；</li>\n<li>使用此注解的方法的类对象，必须是spring管理下的bean对象； </li>\n<li>要想使用异步任务，需要在主类上开启异步配置，即，配置上@EnableAsync注解<br><a href=\"https://blog.csdn.net/qq_44750696/article/details/123960134\">https://blog.csdn.net/qq_44750696/article/details/123960134</a></li>\n</ol>\n<h1 id=\"参数校验\"><a href=\"#参数校验\" class=\"headerlink\" title=\"参数校验\"></a>参数校验</h1><h2 id=\"Valid-Valided\"><a href=\"#Valid-Valided\" class=\"headerlink\" title=\"@Valid,@Valided\"></a>@Valid,@Valided</h2><p><a href=\"https://blog.csdn.net/weixin_51439775/article/details/128386125\">https://blog.csdn.net/weixin_51439775/article/details/128386125</a></p>\n<h1 id=\"WEB相关\"><a href=\"#WEB相关\" class=\"headerlink\" title=\"WEB相关\"></a>WEB相关</h1><h2 id=\"RequestBody\"><a href=\"#RequestBody\" class=\"headerlink\" title=\"@RequestBody\"></a>@RequestBody</h2><blockquote>\n<p>获取request请求体中的内容，常用来处理content-type不是默认的application&#x2F;x-www-form-urlcoded编码（form表单格式）的内容，比如说：application&#x2F;json或者是application&#x2F;xml等。一般情况下来说常用其来处理application&#x2F;json类型。</p>\n</blockquote>\n<blockquote>\n<p>@RequestBody注解可以解析请求体中json格式的数据，并将其封装到javaBean中。</p>\n</blockquote>\n<p>测试：</p>\n<p>使用postman发送请求，请求体中使用json格式字符串。<br><img src=\"/2023/02/04/spring-boot-chang-yong-zhu-jie/@RequestBody1.png\" alt=\"发送请求\"><br>在后端代码可以用String来接收，接收结果是原json字符串：</p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Controller</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">TestController</span> <span class=\"token punctuation\">&#123;</span>\n\n    <span class=\"token annotation punctuation\">@RequestMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">welcome</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@RequestBody</span><span class=\"token punctuation\">(</span>required <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span> <span class=\"token class-name\">String</span> dog<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>dog<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token string\">\"index\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n<p>控制台输出：<code>&#123;&quot;id&quot;:&quot;1&quot;,&quot;name&quot;:&quot;六六&quot;,&quot;age&quot;:&quot;3&quot;&#125;</code></p>\n<p>也可以用对象来接收，接收结果是json字符串封装后的对象：</p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Controller</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">TestController</span> <span class=\"token punctuation\">&#123;</span>\n\n    <span class=\"token annotation punctuation\">@RequestMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">welcome</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@RequestBody</span><span class=\"token punctuation\">(</span>required <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span> <span class=\"token class-name\">Dog</span> dog<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>dog<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token string\">\"index\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n<p>控制台输出：<code>Dog(id=1, name=六六, age=3)</code></p>\n<p>如果使用@RequestBody注解来接收form表单的请求（即application&#x2F;x-www-form-urlcoded编码）会报415，并在控制台报出编码格式不支持的错误：<br><code>Resolved [org.springframework.web.HttpMediaTypeNotSupportedException: Content type &#39;application/x-www-form-urlencoded;charset=UTF-8&#39; not supported]</code></p>\n<h2 id=\"RequestParam\"><a href=\"#RequestParam\" class=\"headerlink\" title=\"@RequestParam\"></a>@RequestParam</h2><p>用于将请求参数映射到控制层方法的参数上。<br>@RequestParam含有以下三个属性：</p>\n<ul>\n<li>value：设置传入的参数的名称，若不设置默认使用变量值。</li>\n<li>required：设置该参数是否必填。表示请求中一定要传入对应的参数，否则会报404错误，如果设置为false时，当请求中没有此参数，将会默认为null,而对于基本数据类型的变量，则必须有值，这时会抛出空指针异常。</li>\n<li>defaultValue：参数的默认值，如果请求中没有同名的参数时，该变量默认为此值。注意默认值可以使用SpEL表达式。</li>\n</ul>\n<h2 id=\"PathVariable\"><a href=\"#PathVariable\" class=\"headerlink\" title=\"@PathVariable\"></a>@PathVariable</h2><p>处理请求的URL，把占位符绑定到controller的方法参数上。<br>该注解有两个属性：</p>\n<ul>\n<li>value：设置匹配的占位符的名称，若不设置，默认使用参数名称匹配占位符。</li>\n<li>required：设置该参数是否必填，默认值为true，表示URL中必须含有匹配的占位符，否则将抛出异常。</li>\n</ul>\n<p>使用方法例如：</p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@GetMapping</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"/&#123;page&#125;/&#123;pageSize&#125;\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"/delete/&#123;page&#125;/&#123;pageSize&#125;\"</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">toEmpPage</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">HttpServletRequest</span> request<span class=\"token punctuation\">,</span>\n                        <span class=\"token annotation punctuation\">@PathVariable</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"page\"</span><span class=\"token punctuation\">)</span> <span class=\"token class-name\">Integer</span> page<span class=\"token punctuation\">,</span>\n                        <span class=\"token annotation punctuation\">@PathVariable</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"pageSize\"</span><span class=\"token punctuation\">)</span> <span class=\"token class-name\">Integer</span> pageSize<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">//业务部分</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n<p>上述代码即是把URL中的{page}和{pageSize}分别绑定到方法参数中的page和pageSize上。</p>\n<h2 id=\"RequestHeader\"><a href=\"#RequestHeader\" class=\"headerlink\" title=\"@RequestHeader\"></a>@RequestHeader</h2><p>用于把请求头中的参数绑定到方法参数上。<br>它有三个属性，和@RequestParam注解完全相同。</p>\n<h2 id=\"CookieValue\"><a href=\"#CookieValue\" class=\"headerlink\" title=\"@CookieValue\"></a>@CookieValue</h2><p>用于把请求中的cookie绑定到方法参数上。<br>它的属性同上。</p>\n<h2 id=\"ModelAttribute\"><a href=\"#ModelAttribute\" class=\"headerlink\" title=\"@ModelAttribute\"></a>@ModelAttribute</h2><p>@ModelAttribute的作用是把数据添加进模型对象中，供前端页面渲染使用。它的用法有很多：</p>\n<ol>\n<li>入参处使用<blockquote>\n<p>将@ModelAttribute注解标记在入参上，在渲染页面之前就会自动把标记的入参添加到模型对象中。</p>\n</blockquote>\n</li>\n</ol>\n<p>示例代码：</p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Controller</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">TestController</span> <span class=\"token punctuation\">&#123;</span>\n\n    <span class=\"token annotation punctuation\">@RequestMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">welcome</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@ModelAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"msg2\"</span><span class=\"token punctuation\">)</span><span class=\"token class-name\">String</span> msg2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token string\">\"index\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n\n<p>前端代码：</p>\n<pre class=\"language-HTML\" data-language=\"HTML\"><code class=\"language-HTML\">&lt;form th:action&#x3D;&quot;@&#123;&#x2F;&#125;&quot; method&#x3D;&quot;post&quot;&gt;\n    &lt;label&gt;\n        msg2:\n        &lt;input type&#x3D;&quot;text&quot; name&#x3D;&quot;msg2&quot;&#x2F;&gt;\n    &lt;&#x2F;label&gt;\n    &lt;input type&#x3D;&quot;submit&quot;&gt;\n    &lt;p th:text&#x3D;&quot;$&#123;msg2&#125;&quot;&gt;&lt;&#x2F;p&gt;&lt;!--  前端提交表单后，后端再次返回该页面，并将上次输入的信息显示在此处   --&gt;\n&lt;&#x2F;form&gt;</code></pre>\n<p>结果：<br>发送之前：<img src=\"/2023/02/04/spring-boot-chang-yong-zhu-jie/@ModelAttribute1.png\" alt=\"页面效果\"><br>发送之后：<img src=\"/2023/02/04/spring-boot-chang-yong-zhu-jie/@ModelAttribute2.png\" alt=\"页面效果\"></p>\n<ol start=\"2\">\n<li>方法上使用<br>被@ModelAttribute注释的方法会在此controller的每个方法执行前被执行 ，如果有返回值，则自动将该返回值加入到ModelMap中。<ul>\n<li>若注解没有返回值的方法，一般在方法体内部用model对象手动加入：</li>\n</ul>\n</li>\n</ol>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Controller</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">TestController</span> <span class=\"token punctuation\">&#123;</span>\n\n    <span class=\"token annotation punctuation\">@ModelAttribute</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">before</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@RequestParam</span> <span class=\"token class-name\">String</span> msg2<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Model</span> model<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        model<span class=\"token punctuation\">.</span><span class=\"token function\">addAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"msg2\"</span><span class=\"token punctuation\">,</span>msg2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token annotation punctuation\">@RequestMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">welcome</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token string\">\"index\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n\n<ul>\n<li>若注解有返回值的方法，建议通过@ModelAttribute(value &#x3D; “”)指定名称，若不指定，默认使用返回类型小写作为名称。</li>\n</ul>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Controller</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">TestController</span> <span class=\"token punctuation\">&#123;</span>\n\n    <span class=\"token annotation punctuation\">@ModelAttribute</span><span class=\"token comment\">//不指定名称，属性名为返回类型小写，即string</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">before</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@RequestParam</span> <span class=\"token class-name\">String</span> msg2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>msg2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> msg2<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token annotation punctuation\">@RequestMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">welcome</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token string\">\"index\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n<h2 id=\"SessionAttributes\"><a href=\"#SessionAttributes\" class=\"headerlink\" title=\"@SessionAttributes\"></a>@SessionAttributes</h2><p>将ModelMap等方式传到前端的属性值共享到session中。</p>\n<blockquote>\n<p>@SessionAttributes注解只能使用在类上，用于在多个请求之间传递参数，类似于Session的Attribute，但不完全一样，一般来说@SessionAttributes设置的参数只用于暂时的传递（存入sessionAttributeStore），而不是长期的保存，长期保存的数据还是要放到Session中。</p>\n</blockquote>\n<blockquote>\n<p>有两种方式将ModelMap中的属性值共享到session中：</p>\n<ul>\n<li>使用注解的value属性：可以通过属性名指定需要放到会话中的属性；</li>\n<li>使用注解的types属性：还可以通过模型属性的对象类型指定哪些模型属性需要放到会话中。</li>\n</ul>\n</blockquote>\n<h2 id=\"CrossOrigin\"><a href=\"#CrossOrigin\" class=\"headerlink\" title=\"@CrossOrigin\"></a>@CrossOrigin</h2><h2 id=\"RestController\"><a href=\"#RestController\" class=\"headerlink\" title=\"@RestController\"></a>@RestController</h2><h2 id=\"ControllerAdvice\"><a href=\"#ControllerAdvice\" class=\"headerlink\" title=\"@ControllerAdvice\"></a>@ControllerAdvice</h2><p>@ControllerAdvice的作用也是声明一个控制层组件，通常用于全局异常处理、添加全局数据以及请求参数预处理。</p>\n<ul>\n<li>全局异常处理<blockquote>\n<p>搭配@ExceptionHandler注解使用。@ExceptionHandler注解只有一个属性value，是一个Throwable类型的数组，它的作用是设置匹配异常的种类，当Controller层出现value数组内的异常时，将调用被@ExceptionHandler标记的方法。</p>\n</blockquote>\n<blockquote>\n<p>方法的参数可以包括异常实例、HttpServletRequest、HttpServletResponse、Model等；返回值可以是void、Json（需要用@ResponseBody标记）、ModelAndView（可以添加数据、设置视图名称）、甚至是逻辑视图名。</p>\n</blockquote>\n</li>\n</ul>\n<p>示例代码：</p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@ControllerAdvice</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">TestControllerAdvice</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token annotation punctuation\">@ExceptionHandler</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ArithmeticException</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">ModelAndView</span> <span class=\"token function\">exceptionHandler</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"出现异常\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">ModelAndView</span> model <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ModelAndView</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        model<span class=\"token punctuation\">.</span><span class=\"token function\">addObject</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"msg2\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"出现异常！\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        model<span class=\"token punctuation\">.</span><span class=\"token function\">setViewName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"index\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> model<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Controller</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">TestController</span> <span class=\"token punctuation\">&#123;</span>\n\n    <span class=\"token annotation punctuation\">@RequestMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">welcome</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">int</span> a <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token operator\">/</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token string\">\"index\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n<p>浏览器访问该方法时触发ArithmeticException异常，返回页面如下：<br><img src=\"/Spring-Boot%E5%B8%B8%E7%94%A8%E6%B3%A8%E8%A7%A3/@ControllerAdvice1.png\" alt=\"页面\"></p>\n<ul>\n<li>添加全局数据<blockquote>\n<p>搭配@ModelAttribute注解使用。@ModelAttribute标记一个方法，该方法的返回值将作为全局数据，所有Controller层方法和页面都可以访问到。</p>\n</blockquote>\n  示例代码如下：<br>  controllerAdvice：</li>\n</ul>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@ControllerAdvice</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">TestControllerAdvice</span> <span class=\"token punctuation\">&#123;</span>\n\n    <span class=\"token annotation punctuation\">@ModelAttribute</span><span class=\"token punctuation\">(</span>value <span class=\"token operator\">=</span> <span class=\"token string\">\"user\"</span><span class=\"token punctuation\">)</span><span class=\"token comment\">//model中的key</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> <span class=\"token class-name\">GlobalConfig</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> map <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        map<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"username\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"dfy\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        map<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"age\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"18\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> map<span class=\"token punctuation\">;</span><span class=\"token comment\">//model中的value</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n<p>controller:</p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Controller</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">TestController</span> <span class=\"token punctuation\">&#123;</span>\n\n    <span class=\"token annotation punctuation\">@RequestMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">welcome</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Model</span> model<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">></span></span> map <span class=\"token operator\">=</span> model<span class=\"token punctuation\">.</span><span class=\"token function\">asMap</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Set</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> keySet <span class=\"token operator\">=</span> map<span class=\"token punctuation\">.</span><span class=\"token function\">keySet</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Iterator</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> iterator <span class=\"token operator\">=</span> keySet<span class=\"token punctuation\">.</span><span class=\"token function\">iterator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>iterator<span class=\"token punctuation\">.</span><span class=\"token function\">hasNext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token class-name\">String</span> key <span class=\"token operator\">=</span> iterator<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\">Object</span> value <span class=\"token operator\">=</span> map<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>key <span class=\"token operator\">+</span> <span class=\"token string\">\"=\"</span> <span class=\"token operator\">+</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token string\">\"index\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n<p>页面：</p>\n<pre class=\"language-HTML\" data-language=\"HTML\"><code class=\"language-HTML\">&lt;p th:text&#x3D;&quot;$&#123;user.username&#125;&quot;&gt;&lt;&#x2F;p&gt;\n&lt;p th:text&#x3D;&quot;$&#123;user.age&#125;&quot;&gt;&lt;&#x2F;p&gt;</code></pre>\n<p>控制台输出为：<br><code>user=&#123;age=18, username=dfy&#125;</code><br>页面输出为：<br><img src=\"/2023/02/04/spring-boot-chang-yong-zhu-jie/@ControllerAdvice2.png\" alt=\"页面\"></p>\n<ul>\n<li><p>请求参数预处理<br>搭配@InitBinder注解使用。被@InitBinder标记的方法，参数中必须要含有WebDataBinder，具体用法如下：</p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@InitBinder</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">initBinder</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">WebDataBinder</span> binder<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    binder<span class=\"token punctuation\">.</span><span class=\"token function\">registerCustomEditor</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">StringTrimmerEditor</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n<p>通过WebDataBinder类的registerCustomEditor方法来注册请求参数的预处理器，它的方法参数为：<br><code>registerCustomEditor(Class&lt;?&gt; requiredType, PropertyEditor propertyEditor)</code><br>requiredType代表该预处理器处理的数据类型；propertyEditor代表预处理器，它的实现类有很多，这里不一一列举。<br>自定义属性编辑器可以通过继承<code>java.beans.PropertyEditorSupport</code>类并重写其<code>setAsText</code>方法实现，最后调用setValue(Object Value)方法完成转换后的值的设置。</p>\n<p>还有其他花式用法，具体可参见博客<a href=\"https://blog.csdn.net/wang0907/article/details/108357696\">https://blog.csdn.net/wang0907/article/details/108357696</a></p>\n</li>\n</ul>\n<h2 id=\"元注解包括-Retention-Target-Document-Inherited四种\"><a href=\"#元注解包括-Retention-Target-Document-Inherited四种\" class=\"headerlink\" title=\"元注解包括  @Retention @Target @Document @Inherited四种\"></a>元注解包括  @Retention @Target @Document @Inherited四种</h2><h2 id=\"RequestMapping\"><a href=\"#RequestMapping\" class=\"headerlink\" title=\"@RequestMapping\"></a>@RequestMapping</h2><h2 id=\"GetMapping和-PostMapping\"><a href=\"#GetMapping和-PostMapping\" class=\"headerlink\" title=\"@GetMapping和@PostMapping\"></a>@GetMapping和@PostMapping</h2>"},{"title":"支持cuda的opencv编译流程","date":"2023-04-21T09:12:52.000Z","_content":"\n# 支持cuda的opencv编译流程\n本文中所需文件已上传百度网盘，包括opencv压缩包和编译所需文件，链接如下：\n<https://pan.baidu.com/s/1ldnmpgnLIU63MDLOajUp6w>\n提取码：bjb6\n## 操作环境\n1. 显卡：**NVIDIA GeForce RTX 3060**\n2. CUDA版本：**CUDA 11.1**\n3. 操作系统： **centos7**\n\n## cuda和cudnn安装请看我的另一篇博客\n### 温馨提示，在编译支持cuda的opencv之前，要先安装好cuda和cudnn，不然会报错的呢~\n\n## 一、下载源文件\nopencv源文件官网链接如下，选择Sources版本下载即可，网盘中附带4.4.0版本：\n[Opencv官方下载地址](https://opencv.org/releases/)\n下载Contrib对应版本：\n[Opencv_Contrib下载地址](https://github.com/opencv/opencv_contrib/releases)\n## 二、解压\n下载到的是zip格式的压缩包，使用unzip命令解压即可，解压到你想的位置，本文中一用户主目录(/home/dfy)为例：\n```bash\nunzip opencv-4.4.0.zip\nunzip opencv_contrib-4.4.0.zip\n```\n\n## 三、安装需要的依赖\n\n### centos系统\n组内的服务器使用的是centos7系统，需要安装的依赖如下：\n```bash\nsudo yum -y install epel-release\nsudo yum -y install git gcc gcc-c++ cmake3 # 看到这里的gcc了吗，没错，这里隐藏着一个陨石坑，在后续安装记录章节细说\nsudo yum -y install qt5-qtbase-devel\nsudo yum install -y python34 python34-devel python34-pip\nsudo yum install -y python python-devel python-pip\n\nsudo yum -y install python-devel numpy python34-numpy\nsudo yum -y install gtk2-devel\n\nsudo yum install -y libpng-devel\nsudo yum install -y jasper-devel\nsudo yum install -y openexr-devel\nsudo yum install -y libwebp-devel\nsudo yum -y install libjpeg-turbo-devel \nsudo yum install -y freeglut-devel mesa-libGL mesa-libGL-devel\nsudo yum -y install libtiff-devel \nsudo yum -y install libdc1394-devel\nsudo yum -y install tbb-devel eigen3-devel\nsudo yum -y install boost boost-thread boost-devel\nsudo yum -y install libv4l-devel\nsudo yum -y install gstreamer-plugins-base-devel\n```\n安装编译所需要的cmake3(centos7系统有点老了，默认的cmake版本不够，需要指定cmake3)\n```bash\nsudo yum install epel-release\nsudo yum install cmake3\n```\n\n安装tesseract\n```bash\n# 搜索「tesseract」\nyum search tesseract\n\n#安装「tesseract.x86_64」\nyum install tesseract.x86_64 tesseract-devel.x86_64 \n\n#安装「tesseract-langpack-chi_sim.noarch」中文字库\nyum install tesseract-langpack-chi_sim.noarch\n\n#检查「tesseract」支持的语言\ntesseract --list-langs\n```\n\n### ubuntu系统\n```\n$ sudo apt-get update\n$ sudo apt-get upgrade\n$ sudo apt-get install build-essential cmake unzip pkg-config\n$ sudo apt-get install libjpeg-dev libpng-dev libtiff-dev\n$ sudo apt-get install libavcodec-dev libavformat-dev libswscale-dev\n$ sudo apt-get install libv4l-dev libxvidcore-dev libx264-dev\n$ sudo apt-get install libgtk-3-dev\n$ sudo apt-get install libatlas-base-dev gfortran\n$ sudo apt-get install python3-dev\n```\n\n### 安装numpy\n```\n# 执行这一步之前，激活你要使用的python虚拟环境\npip install numpy\n```\n\n## 四、执行cmake\n```bash\n# 进入opencv的解压目录\ncd ~/opencv-4.4.0\n\n# 创建构建目录build（这里build目录名称随意）\nmkdir build\ncd build\n\n# 执行cmake\n# 这里一些参数的配置一定要仔细再仔细\n# 我的参数配置如下\n# centos系统如果提示cmake版本不够，这里输入cmake3\ncmake -D CMAKE_BUILD_TYPE=RELEASE \\\n        -D CMAKE_INSTALL_PREFIX=/usr/local \\\n        -D INSTALL_PYTHON_EXAMPLES=ON \\\n        -D INSTALL_C_EXAMPLES=OFF \\\n        -D OPENCV_ENABLE_NONFREE=ON \\\n        -D WITH_CUDA=ON \\\n        -D WITH_CUDNN=ON \\\n        -D OPENCV_DNN_CUDA=ON \\\n        -D ENABLE_FAST_MATH=1 \\\n        -D CUDA_FAST_MATH=1 \\\n        -D CUDA_ARCH_BIN=8.6 \\\n        -D WITH_CUBLAS=1 \\\n        -D OPENCV_EXTRA_MODULES_PATH=~/opencv_contrib-4.4.0/modules \\\n        -D HAVE_opencv_python3=ON \\\n        -D PYTHON_EXECUTABLE=/usr/local/bin/python3 \\\n        -D BUILD_EXAMPLES=ON ..\n       ..\n```\n详细解释一下命令中各个参数选取的注意事项：\n> 1. OPENCV_EXTRA_MODULES_PATH，翻译过来就是opencv额外模块路径，这个模块就是我们下载的Contrib模块。所以这项参数填写你的opencv_contrib目录下modules文件夹的路径。如果你是按照上面的教程走的，那么它现在应该在你的用户主目录下：~/opencv_contrib-4.4.0/modules。\n> 3. PYTHON_EXECUTABLE，python虚拟环境路径，它需要指向你的环境中python的可执行文件。若是anaconda的虚拟环境，它一般在虚拟环境目录下的bin目录下：~/anaconda3/envs/mouse/bin/python3.9,或者是系统的python3：/usr/local/bin/python3(不建议，我虽然是这么做的，但是我是在docker镜像内操作，系统本身的python关系到系统的运行，比较危险，如果实在要用，可以安装一下其他版本的python，用其他版本来操作)\n>    python版本可能很多，指定你所需版本的python可执行文件。\n> 4. CUDA_ARCH_BIN，这里指的是你的cuda版本对应的算力级别。去[cuda官网](https://developer.nvidia.com/cuda-gpus#collapseOne)查看一下。组内服务器的显卡是3090，cuda版本我装的是11.1，官网上写着对应的算力级别为8.6，所以这里填8.6。\n> 5. 命令最后两个点不能落下，这两个点代表相对路径。\n\n以上是实际应用中需要自己确定的问题，其他的按照我写的命令复制即可。\n我在执行cmake的时候报了一些错误，很多个failed，但是实际使用并没什么问题。\n如果你执行命令之后，发现你的cmake参数配置有错误，那么你需要删除build目录重新执行这一步骤。\n\n**在执行下一步之前，你需要检查cmake的输出，有个至关重要的点：**\n检查cmake输出中有没有这个模块：\n```\n--   Python 3:\n--     Interpreter:                 /usr/local/bin/python3 (ver 3.9.16)\n--     Libraries:                   /usr/local/lib/libpython3.9.so (ver 3.9.16)\n--     numpy:                       /usr/local/lib/python3.9/site-packages/numpy/core/include (ver 1.24.2)\n--     install path:                lib/python3.9/site-packages/cv2/python-3.9\n```\n如果没有这一块，没必要往下走了，因为安装完也没有用。你需要检查你的python环境是否具有python3的条件。\n这里输出的```install path```后面要用到，先记下来。\n\n其他的信息你可以检查一下你配置是否正确，例如下面：\n```\n     NVIDIA CUDA:                   YES (ver 11.1, CUFFT CUBLAS FAST_MATH)\n       NVIDIA GPU arch:             86\n       NVIDIA PTX archs:\n  \n     cuDNN:                         YES (ver 8.7.0)\n```\n\n## 五、安装\n```bash\nmake -j$(nproc)\n```\n安装过程中也会踩很多很多很多很多很多的陨石坑，在这里记录一下（本人被折磨的不轻）\n\n### 1.Unsupported gpu architecture 'compute_30'\n翻译过来就是gpu算力不支持，说明你在cmake的CUDA_ARCH_BIN设置和你的显卡和cuda不匹配，去[cuda官网](https://developer.nvidia.com/cuda-gpus#collapseOne)找你的显卡对应的算力。\n\n### 2.# error \"OpenCV 4.x+ requires enabled C++11 support\"\n这句话意思是opencv4以上的版本需要c++11才可以编译。\n所以这里我去看一下gcc的版本，看看支不支持c++11.\ngcc的版本是4.8.5，按理说应该是支持c++11的，但是这里编译就是过不了。\n网络上的解决办法是在编译的时候加上```-std=c++11```这个选项。\n但是编译语句都是cmake自动生成的，那么多语句，要找到猴年马月。\n一度怀疑人生。\n\n后来我仔细看了下报错信息，发现在之前还有这样一句话：\n```nvcc warning : The -std=c++14 flag is not supported with the configured host compiler. Flag will be ignored. ```\n这句话后面几行才打出```# error \"OpenCV 4.x+ requires enabled C++11 support\"```这句话，那么说明根源在上面那句。\n\n这句话的意思是，编译选项```-std=c++14```不支持，所以该选项被忽略。\n说明编译语句中写的是```-std=c++14```，而不是```-std=c++11```，说明尽管gcc4.8.5支持c++11，它还是没有办法去调用，因为编译语句没有指定。\n那么从根源解决问题，升高gcc版本，让它支持c++14，该问题才能得到解决。\n\n所以我把gcc版本升级到了9.3.0，该错误消失了。\n\n真好啊，ctmd，浪费老子半天。\n\ngcc安装教程参考博客<https://blog.csdn.net/zblock0/article/details/107032359>\n### 3. fatal error: boostdesc_bgm.i:no such file or directory\n说明缺少一些依赖文件。文件在文章开始的百度网盘提供了。把所有的.i文件复制到opencv_contrib/modules/xfeatures2d/src/目录下即可。\n### 4. fatal error: features2d/test/test_detectors_regression.impl.hpp:no such file or directory\n依旧是缺少文件，这个文件在opencv的modules目录下其实已经提供了，是路径的问题。所以复制一下：\n```cp -r ../modules/features2d ./```\n\n所有这种缺少文件的报错，都可以去找一下这个文件的名字，如果在opencv或者contrib中提供了，复制过去就好。\n\n### 5.CMakeFiles/example_gpu_surf_keypoint_matcher.dir/surf_keypoint_matcher.cpp.o: In function `main’\n\n完整报错信息如下：\n```\nCMakeFiles/example_gpu_surf_keypoint_matcher.dir/surf_keypoint_matcher.cpp.o: In function `main':\nsurf_keypoint_matcher.cpp:(.text.startup.main+0x352): undefined reference to `cv::cuda::SURF_CUDA::SURF_CUDA()'\nsurf_keypoint_matcher.cpp:(.text.startup.main+0x579): undefined reference to `cv::cuda::SURF_CUDA::operator()(cv::cuda::GpuMat const&, cv::cuda::GpuMat const&, cv::cuda::GpuMat&, cv::cuda::GpuMat&, bool)'\nsurf_keypoint_matcher.cpp:(.text.startup.main+0x60d): undefined reference to `cv::cuda::SURF_CUDA::operator()(cv::cuda::GpuMat const&, cv::cuda::GpuMat const&, cv::cuda::GpuMat&, cv::cuda::GpuMat&, bool)'\nsurf_keypoint_matcher.cpp:(.text.startup.main+0x6af): undefined reference to `cv::cuda::SURF_CUDA::defaultNorm() const'\nsurf_keypoint_matcher.cpp:(.text.startup.main+0x7ca): undefined reference to `cv::cuda::SURF_CUDA::downloadKeypoints(cv::cuda::GpuMat const&, std::vector<cv::KeyPoint, std::allocator<cv::KeyPoint> >&)'\nsurf_keypoint_matcher.cpp:(.text.startup.main+0x7ea): undefined reference to `cv::cuda::SURF_CUDA::downloadKeypoints(cv::cuda::GpuMat const&, std::vector<cv::KeyPoint, std::allocator<cv::KeyPoint> >&)'\nsurf_keypoint_matcher.cpp:(.text.startup.main+0x800): undefined reference to `cv::cuda::SURF_CUDA::downloadDescriptors(cv::cuda::GpuMat const&, std::vector<float, std::allocator<float> >&)'\nsurf_keypoint_matcher.cpp:(.text.startup.main+0x812): undefined reference to `cv::cuda::SURF_CUDA::downloadDescriptors(cv::cuda::GpuMat const&, std::vector<float, std::allocator<float> >&)'\ncollect2: error: ld returned 1 exit status\nsamples/gpu/CMakeFiles/example_gpu_surf_keypoint_matcher.dir/build.make:132: recipe for target 'bin/example_gpu_surf_keypoint_matcher' failed\nmake[2]: *** [bin/example_gpu_surf_keypoint_matcher] Error 1\n```\n解决方法：\n先去你的build目录下找到这个文件:\n```<build_dir>/samples/gpu/CMakeFiles/example_gpu_surf_keypoint_matcher.dir/link.txt```\n在这个文件里，搜索到```--as-needed CMakeFiles/example_gpu_surf_keypoint_matcher.dir/surf_keypoint_matcher.cpp.o```这一句之后加上```<build_dir>/modules/xfeatures2d/CMakeFiles/opencv_xfeatures2d.dir/src/surf.cuda.cpp.o <build_dir>/modules/xfeatures2d/CMakeFiles/cuda_compile_1.dir/src/cuda/cuda_compile_1_generated_surf.cu.o```\n其中，<build_dir>是你的构建路径，也就是第四步中创建的build文件夹。\n\n### 6.libopencv_imgcodecs.so.4.2.0: undefined reference to `TIFFReadRGBAStrip@LIBTIFF_4.0\n完整报错信息：\n ```\n/usr/local/lib/libopencv_imgcodecs.so.4.2.0: undefined reference to `TIFFReadRGBAStrip@LIBTIFF_4.0'\n/usr/local/lib/libopencv_imgcodecs.so.4.2.0: undefined reference to `TIFFReadDirectory@LIBTIFF_4.0'\n/usr/local/lib/libopencv_imgcodecs.so.4.2.0: undefined reference to `TIFFWriteEncodedStrip@LIBTIFF_4.0'\n/usr/local/lib/libopencv_imgcodecs.so.4.2.0: undefined reference to `TIFFIsTiled@LIBTIFF_4.0'\n/usr/local/lib/libopencv_imgcodecs.so.4.2.0: undefined reference to `TIFFWriteScanline@LIBTIFF_4.0'\n/usr/local/lib/libopencv_imgcodecs.so.4.2.0: undefined reference to `TIFFGetField@LIBTIFF_4.0'\n/usr/local/lib/libopencv_imgcodecs.so.4.2.0: undefined reference to `TIFFScanlineSize@LIBTIFF_4.0'\n/usr/local/lib/libopencv_imgcodecs.so.4.2.0: undefined reference to `TIFFWriteDirectory@LIBTIFF_4.0'\n/usr/local/lib/libopencv_imgcodecs.so.4.2.0: undefined reference to `TIFFReadEncodedTile@LIBTIFF_4.0'\n/usr/local/lib/libopencv_imgcodecs.so.4.2.0: undefined reference to `TIFFReadRGBATile@LIBTIFF_4.0'\n/usr/local/lib/libopencv_imgcodecs.so.4.2.0: undefined reference to `TIFFClose@LIBTIFF_4.0'\n/usr/local/lib/libopencv_imgcodecs.so.4.2.0: undefined reference to `TIFFClientOpen@LIBTIFF_4.0'\n/usr/local/lib/libopencv_imgcodecs.so.4.2.0: undefined reference to `TIFFRGBAImageOK@LIBTIFF_4.0'\n/usr/local/lib/libopencv_imgcodecs.so.4.2.0: undefined reference to `TIFFOpen@LIBTIFF_4.0'\n/usr/local/lib/libopencv_imgcodecs.so.4.2.0: undefined reference to `TIFFReadEncodedStrip@LIBTIFF_4.0'\n/usr/local/lib/libopencv_imgcodecs.so.4.2.0: undefined reference to `TIFFSetField@LIBTIFF_4.0'\n/usr/local/lib/libopencv_imgcodecs.so.4.2.0: undefined reference to `TIFFSetWarningHandler@LIBTIFF_4.0'\n/usr/local/lib/libopencv_imgcodecs.so.4.2.0: undefined reference to `TIFFSetErrorHandler@LIBTIFF_4.0\n ```\n\n 库引用的问题，从报错信息中可以看到是```libopencv_imgcodecs.so.4.2.0```这个库引用不到一个名字含有```TIFF```的库。\n 首先你要检查依赖：```libtiff-dev```是否正确安装。\n 如果正确安装后还是出现这个问题，那么可能是你的python环境下没有这个库，你需要复制一份到你的python环境下。\n 具体操作如下：\n```\n  # 先查看报错信息，发现是```/usr/local/lib/libopencv_imgcodecs.so.4.2.0```库引用不到其他库\n  # 查看这个库的依赖\n  ldd /usr/local/lib/libopencv_imgcodecs.so.4.2.0\n\n  # 输出如下\n  linux-vdso.so.1 =>  (0x00007ffdc29f5000)\n        libopencv_imgproc.so.4.2 => /usr/local/lib/libopencv_imgproc.so.4.2 (0x00007fc9c680c000)\n        libjpeg.so.8 => /usr/lib/x86_64-linux-gnu/libjpeg.so.8 (0x00007fc9c65b3000)\n        libpng12.so.0 => /lib/x86_64-linux-gnu/libpng12.so.0 (0x00007fc9c638e000)\n        libtiff.so.5 => /usr/lib/x86_64-linux-gnu/libtiff.so.5 (0x00007fc9c6119000)\n        libjasper.so.1 => /usr/lib/x86_64-linux-gnu/libjasper.so.1 (0x00007fc9c5ec4000)\n        libIlmImf-2_2.so.22 => /usr/lib/x86_64-linux-gnu/libIlmImf-2_2.so.22 (0x00007fc9c59f5000)\n        libopencv_core.so.4.2 => /usr/local/lib/libopencv_core.so.4.2 (0x00007fc9c5318000)\n        libstdc++.so.6 => /usr/lib/x86_64-linux-gnu/libstdc++.so.6 (0x00007fc9c4f96000)\n        libm.so.6 => /lib/x86_64-linux-gnu/libm.so.6 (0x00007fc9c4c8d000)\n        libgcc_s.so.1 => /lib/x86_64-linux-gnu/libgcc_s.so.1 (0x00007fc9c4a77000)\n        libpthread.so.0 => /lib/x86_64-linux-gnu/libpthread.so.0 (0x00007fc9c485a000)\n        libc.so.6 => /lib/x86_64-linux-gnu/libc.so.6 (0x00007fc9c4490000)\n        libz.so.1 => /usr/local/lib/libz.so.1 (0x00007fc9c4272000)\n        liblzma.so.5 => /lib/x86_64-linux-gnu/liblzma.so.5 (0x00007fc9c4050000)\n        libjbig.so.0 => /usr/lib/x86_64-linux-gnu/libjbig.so.0 (0x00007fc9c3e42000)\n        libHalf.so.12 => /usr/lib/x86_64-linux-gnu/libHalf.so.12 (0x00007fc9c3bff000)\n        libIex-2_2.so.12 => /usr/lib/x86_64-linux-gnu/libIex-2_2.so.12 (0x00007fc9c39e1000)\n        libIlmThread-2_2.so.12 => /usr/lib/x86_64-linux-gnu/libIlmThread-2_2.so.12 (0x00007fc9c37da000)\n        libdl.so.2 => /lib/x86_64-linux-gnu/libdl.so.2 (0x00007fc9c35d6000)\n        librt.so.1 => /lib/x86_64-linux-gnu/librt.so.1 (0x00007fc9c33ce000)\n        libGL.so.1 => /usr/lib/x86_64-linux-gnu/mesa/libGL.so.1 (0x00007fc9c315a000)\n        /lib64/ld-linux-x86-64.so.2 (0x00007fc9c73b1000)\n        libexpat.so.1 => /lib/x86_64-linux-gnu/libexpat.so.1 (0x00007fc9c2f31000)\n        libxcb-dri3.so.0 => /usr/lib/x86_64-linux-gnu/libxcb-dri3.so.0 (0x00007fc9c2d2e000)\n        libxcb-present.so.0 => /usr/lib/x86_64-linux-gnu/libxcb-present.so.0 (0x00007fc9c2b2b000)\n        libxcb-sync.so.1 => /usr/lib/x86_64-linux-gnu/libxcb-sync.so.1 (0x00007fc9c2924000)\n        libxshmfence.so.1 => /usr/lib/x86_64-linux-gnu/libxshmfence.so.1 (0x00007fc9c2721000)\n        libglapi.so.0 => /usr/lib/x86_64-linux-gnu/libglapi.so.0 (0x00007fc9c24f0000)\n        libXext.so.6 => /usr/lib/x86_64-linux-gnu/libXext.so.6 (0x00007fc9c22de000)\n        libXdamage.so.1 => /usr/lib/x86_64-linux-gnu/libXdamage.so.1 (0x00007fc9c20db000)\n        libXfixes.so.3 => /usr/lib/x86_64-linux-gnu/libXfixes.so.3 (0x00007fc9c1ed5000)\n        libX11-xcb.so.1 => /usr/lib/x86_64-linux-gnu/libX11-xcb.so.1 (0x00007fc9c1cd3000)\n        libX11.so.6 => /usr/lib/x86_64-linux-gnu/libX11.so.6 (0x00007fc9c1999000)\n        libxcb-glx.so.0 => /usr/lib/x86_64-linux-gnu/libxcb-glx.so.0 (0x00007fc9c1780000)\n        libxcb-dri2.so.0 => /usr/lib/x86_64-linux-gnu/libxcb-dri2.so.0 (0x00007fc9c157b000)\n        libxcb.so.1 => /usr/lib/x86_64-linux-gnu/libxcb.so.1 (0x00007fc9c1359000)\n        libXxf86vm.so.1 => /usr/lib/x86_64-linux-gnu/libXxf86vm.so.1 (0x00007fc9c1153000)\n        libdrm.so.2 => /usr/lib/x86_64-linux-gnu/libdrm.so.2 (0x00007fc9c0f41000)\n        libXau.so.6 => /usr/lib/x86_64-linux-gnu/libXau.so.6 (0x00007fc9c0d3d000)\n        libXdmcp.so.6 => /usr/lib/x86_64-linux-gnu/libXdmcp.so.6 (0x00007fc9c0b37000)\n  \n  # 你需要在这些依赖中找到报错信息中找不到的那个库。\n  # 这个库在这里：\n  libtiff.so.5 => /usr/lib/x86_64-linux-gnu/libtiff.so.5 (0x00007fc9c6119000)\n\n  # 把这个库复制到你的python环境下：\n  sudo cp /usr/lib/x86_64-linux-gnu/libtiff.so.5 /usr/local/lib/libtiff.so.5\n```\n\n不出意外的话应该是没什么其他的问题了。\n\nmake完成后，执行：\n```bash\nsudo make install\n ```\n\n## 六、链接动态库\n安装完成后，在之前cmake输出的python3 ```install path```路径下，会出现一个库：\n我之前这里输出的```install path = lib/python3.9/site-packages/cv2/python-3.9```，在这个路径前加上安装前缀```CMAKE_INSTALL_PREFIX=/usr/local```\n```\nls -l /usr/local/lib/python3.9/site-packages/cv2/python-3.9\n\n\n总计 9540\n-rw-r--r-- 1 root root 9768648  5月  4 17:51 cv2.cpython-39-x86_64-linux-gnu.so\n\n```\n把这个库连接到你的python环境下：\n```\ncd /usr/local/lib/python3.9/site-packages #这里要看你自己的python环境路径，我是使用的系统的python，所以库直接生成在了我需要的python环境下，这一步对我其实可以省略\nln -s /usr/local/lib/python3.9/site-packages/cv2/python3.9/cv2.cpython-39-x86_64-linux-gnu.so cv2.so\n```\n\n\n## 测试\n```bash\n#激活你安装了opencv的虚拟环境，如果你用的系统python，这一步不需要\nconda activate mouse\n\n#打开python\npython\n\n#测试\nimport cv2\ncv2.__version__\n# 输出：'4.4.0'\n```","source":"_posts/支持cuda的opencv编译流程.md","raw":"---\ntitle: 支持cuda的opencv编译流程\ntags:\n  - cuda\n  - opencv\ncategories: opencv\ndate: 2023-04-21 17:12:52\n---\n\n# 支持cuda的opencv编译流程\n本文中所需文件已上传百度网盘，包括opencv压缩包和编译所需文件，链接如下：\n<https://pan.baidu.com/s/1ldnmpgnLIU63MDLOajUp6w>\n提取码：bjb6\n## 操作环境\n1. 显卡：**NVIDIA GeForce RTX 3060**\n2. CUDA版本：**CUDA 11.1**\n3. 操作系统： **centos7**\n\n## cuda和cudnn安装请看我的另一篇博客\n### 温馨提示，在编译支持cuda的opencv之前，要先安装好cuda和cudnn，不然会报错的呢~\n\n## 一、下载源文件\nopencv源文件官网链接如下，选择Sources版本下载即可，网盘中附带4.4.0版本：\n[Opencv官方下载地址](https://opencv.org/releases/)\n下载Contrib对应版本：\n[Opencv_Contrib下载地址](https://github.com/opencv/opencv_contrib/releases)\n## 二、解压\n下载到的是zip格式的压缩包，使用unzip命令解压即可，解压到你想的位置，本文中一用户主目录(/home/dfy)为例：\n```bash\nunzip opencv-4.4.0.zip\nunzip opencv_contrib-4.4.0.zip\n```\n\n## 三、安装需要的依赖\n\n### centos系统\n组内的服务器使用的是centos7系统，需要安装的依赖如下：\n```bash\nsudo yum -y install epel-release\nsudo yum -y install git gcc gcc-c++ cmake3 # 看到这里的gcc了吗，没错，这里隐藏着一个陨石坑，在后续安装记录章节细说\nsudo yum -y install qt5-qtbase-devel\nsudo yum install -y python34 python34-devel python34-pip\nsudo yum install -y python python-devel python-pip\n\nsudo yum -y install python-devel numpy python34-numpy\nsudo yum -y install gtk2-devel\n\nsudo yum install -y libpng-devel\nsudo yum install -y jasper-devel\nsudo yum install -y openexr-devel\nsudo yum install -y libwebp-devel\nsudo yum -y install libjpeg-turbo-devel \nsudo yum install -y freeglut-devel mesa-libGL mesa-libGL-devel\nsudo yum -y install libtiff-devel \nsudo yum -y install libdc1394-devel\nsudo yum -y install tbb-devel eigen3-devel\nsudo yum -y install boost boost-thread boost-devel\nsudo yum -y install libv4l-devel\nsudo yum -y install gstreamer-plugins-base-devel\n```\n安装编译所需要的cmake3(centos7系统有点老了，默认的cmake版本不够，需要指定cmake3)\n```bash\nsudo yum install epel-release\nsudo yum install cmake3\n```\n\n安装tesseract\n```bash\n# 搜索「tesseract」\nyum search tesseract\n\n#安装「tesseract.x86_64」\nyum install tesseract.x86_64 tesseract-devel.x86_64 \n\n#安装「tesseract-langpack-chi_sim.noarch」中文字库\nyum install tesseract-langpack-chi_sim.noarch\n\n#检查「tesseract」支持的语言\ntesseract --list-langs\n```\n\n### ubuntu系统\n```\n$ sudo apt-get update\n$ sudo apt-get upgrade\n$ sudo apt-get install build-essential cmake unzip pkg-config\n$ sudo apt-get install libjpeg-dev libpng-dev libtiff-dev\n$ sudo apt-get install libavcodec-dev libavformat-dev libswscale-dev\n$ sudo apt-get install libv4l-dev libxvidcore-dev libx264-dev\n$ sudo apt-get install libgtk-3-dev\n$ sudo apt-get install libatlas-base-dev gfortran\n$ sudo apt-get install python3-dev\n```\n\n### 安装numpy\n```\n# 执行这一步之前，激活你要使用的python虚拟环境\npip install numpy\n```\n\n## 四、执行cmake\n```bash\n# 进入opencv的解压目录\ncd ~/opencv-4.4.0\n\n# 创建构建目录build（这里build目录名称随意）\nmkdir build\ncd build\n\n# 执行cmake\n# 这里一些参数的配置一定要仔细再仔细\n# 我的参数配置如下\n# centos系统如果提示cmake版本不够，这里输入cmake3\ncmake -D CMAKE_BUILD_TYPE=RELEASE \\\n        -D CMAKE_INSTALL_PREFIX=/usr/local \\\n        -D INSTALL_PYTHON_EXAMPLES=ON \\\n        -D INSTALL_C_EXAMPLES=OFF \\\n        -D OPENCV_ENABLE_NONFREE=ON \\\n        -D WITH_CUDA=ON \\\n        -D WITH_CUDNN=ON \\\n        -D OPENCV_DNN_CUDA=ON \\\n        -D ENABLE_FAST_MATH=1 \\\n        -D CUDA_FAST_MATH=1 \\\n        -D CUDA_ARCH_BIN=8.6 \\\n        -D WITH_CUBLAS=1 \\\n        -D OPENCV_EXTRA_MODULES_PATH=~/opencv_contrib-4.4.0/modules \\\n        -D HAVE_opencv_python3=ON \\\n        -D PYTHON_EXECUTABLE=/usr/local/bin/python3 \\\n        -D BUILD_EXAMPLES=ON ..\n       ..\n```\n详细解释一下命令中各个参数选取的注意事项：\n> 1. OPENCV_EXTRA_MODULES_PATH，翻译过来就是opencv额外模块路径，这个模块就是我们下载的Contrib模块。所以这项参数填写你的opencv_contrib目录下modules文件夹的路径。如果你是按照上面的教程走的，那么它现在应该在你的用户主目录下：~/opencv_contrib-4.4.0/modules。\n> 3. PYTHON_EXECUTABLE，python虚拟环境路径，它需要指向你的环境中python的可执行文件。若是anaconda的虚拟环境，它一般在虚拟环境目录下的bin目录下：~/anaconda3/envs/mouse/bin/python3.9,或者是系统的python3：/usr/local/bin/python3(不建议，我虽然是这么做的，但是我是在docker镜像内操作，系统本身的python关系到系统的运行，比较危险，如果实在要用，可以安装一下其他版本的python，用其他版本来操作)\n>    python版本可能很多，指定你所需版本的python可执行文件。\n> 4. CUDA_ARCH_BIN，这里指的是你的cuda版本对应的算力级别。去[cuda官网](https://developer.nvidia.com/cuda-gpus#collapseOne)查看一下。组内服务器的显卡是3090，cuda版本我装的是11.1，官网上写着对应的算力级别为8.6，所以这里填8.6。\n> 5. 命令最后两个点不能落下，这两个点代表相对路径。\n\n以上是实际应用中需要自己确定的问题，其他的按照我写的命令复制即可。\n我在执行cmake的时候报了一些错误，很多个failed，但是实际使用并没什么问题。\n如果你执行命令之后，发现你的cmake参数配置有错误，那么你需要删除build目录重新执行这一步骤。\n\n**在执行下一步之前，你需要检查cmake的输出，有个至关重要的点：**\n检查cmake输出中有没有这个模块：\n```\n--   Python 3:\n--     Interpreter:                 /usr/local/bin/python3 (ver 3.9.16)\n--     Libraries:                   /usr/local/lib/libpython3.9.so (ver 3.9.16)\n--     numpy:                       /usr/local/lib/python3.9/site-packages/numpy/core/include (ver 1.24.2)\n--     install path:                lib/python3.9/site-packages/cv2/python-3.9\n```\n如果没有这一块，没必要往下走了，因为安装完也没有用。你需要检查你的python环境是否具有python3的条件。\n这里输出的```install path```后面要用到，先记下来。\n\n其他的信息你可以检查一下你配置是否正确，例如下面：\n```\n     NVIDIA CUDA:                   YES (ver 11.1, CUFFT CUBLAS FAST_MATH)\n       NVIDIA GPU arch:             86\n       NVIDIA PTX archs:\n  \n     cuDNN:                         YES (ver 8.7.0)\n```\n\n## 五、安装\n```bash\nmake -j$(nproc)\n```\n安装过程中也会踩很多很多很多很多很多的陨石坑，在这里记录一下（本人被折磨的不轻）\n\n### 1.Unsupported gpu architecture 'compute_30'\n翻译过来就是gpu算力不支持，说明你在cmake的CUDA_ARCH_BIN设置和你的显卡和cuda不匹配，去[cuda官网](https://developer.nvidia.com/cuda-gpus#collapseOne)找你的显卡对应的算力。\n\n### 2.# error \"OpenCV 4.x+ requires enabled C++11 support\"\n这句话意思是opencv4以上的版本需要c++11才可以编译。\n所以这里我去看一下gcc的版本，看看支不支持c++11.\ngcc的版本是4.8.5，按理说应该是支持c++11的，但是这里编译就是过不了。\n网络上的解决办法是在编译的时候加上```-std=c++11```这个选项。\n但是编译语句都是cmake自动生成的，那么多语句，要找到猴年马月。\n一度怀疑人生。\n\n后来我仔细看了下报错信息，发现在之前还有这样一句话：\n```nvcc warning : The -std=c++14 flag is not supported with the configured host compiler. Flag will be ignored. ```\n这句话后面几行才打出```# error \"OpenCV 4.x+ requires enabled C++11 support\"```这句话，那么说明根源在上面那句。\n\n这句话的意思是，编译选项```-std=c++14```不支持，所以该选项被忽略。\n说明编译语句中写的是```-std=c++14```，而不是```-std=c++11```，说明尽管gcc4.8.5支持c++11，它还是没有办法去调用，因为编译语句没有指定。\n那么从根源解决问题，升高gcc版本，让它支持c++14，该问题才能得到解决。\n\n所以我把gcc版本升级到了9.3.0，该错误消失了。\n\n真好啊，ctmd，浪费老子半天。\n\ngcc安装教程参考博客<https://blog.csdn.net/zblock0/article/details/107032359>\n### 3. fatal error: boostdesc_bgm.i:no such file or directory\n说明缺少一些依赖文件。文件在文章开始的百度网盘提供了。把所有的.i文件复制到opencv_contrib/modules/xfeatures2d/src/目录下即可。\n### 4. fatal error: features2d/test/test_detectors_regression.impl.hpp:no such file or directory\n依旧是缺少文件，这个文件在opencv的modules目录下其实已经提供了，是路径的问题。所以复制一下：\n```cp -r ../modules/features2d ./```\n\n所有这种缺少文件的报错，都可以去找一下这个文件的名字，如果在opencv或者contrib中提供了，复制过去就好。\n\n### 5.CMakeFiles/example_gpu_surf_keypoint_matcher.dir/surf_keypoint_matcher.cpp.o: In function `main’\n\n完整报错信息如下：\n```\nCMakeFiles/example_gpu_surf_keypoint_matcher.dir/surf_keypoint_matcher.cpp.o: In function `main':\nsurf_keypoint_matcher.cpp:(.text.startup.main+0x352): undefined reference to `cv::cuda::SURF_CUDA::SURF_CUDA()'\nsurf_keypoint_matcher.cpp:(.text.startup.main+0x579): undefined reference to `cv::cuda::SURF_CUDA::operator()(cv::cuda::GpuMat const&, cv::cuda::GpuMat const&, cv::cuda::GpuMat&, cv::cuda::GpuMat&, bool)'\nsurf_keypoint_matcher.cpp:(.text.startup.main+0x60d): undefined reference to `cv::cuda::SURF_CUDA::operator()(cv::cuda::GpuMat const&, cv::cuda::GpuMat const&, cv::cuda::GpuMat&, cv::cuda::GpuMat&, bool)'\nsurf_keypoint_matcher.cpp:(.text.startup.main+0x6af): undefined reference to `cv::cuda::SURF_CUDA::defaultNorm() const'\nsurf_keypoint_matcher.cpp:(.text.startup.main+0x7ca): undefined reference to `cv::cuda::SURF_CUDA::downloadKeypoints(cv::cuda::GpuMat const&, std::vector<cv::KeyPoint, std::allocator<cv::KeyPoint> >&)'\nsurf_keypoint_matcher.cpp:(.text.startup.main+0x7ea): undefined reference to `cv::cuda::SURF_CUDA::downloadKeypoints(cv::cuda::GpuMat const&, std::vector<cv::KeyPoint, std::allocator<cv::KeyPoint> >&)'\nsurf_keypoint_matcher.cpp:(.text.startup.main+0x800): undefined reference to `cv::cuda::SURF_CUDA::downloadDescriptors(cv::cuda::GpuMat const&, std::vector<float, std::allocator<float> >&)'\nsurf_keypoint_matcher.cpp:(.text.startup.main+0x812): undefined reference to `cv::cuda::SURF_CUDA::downloadDescriptors(cv::cuda::GpuMat const&, std::vector<float, std::allocator<float> >&)'\ncollect2: error: ld returned 1 exit status\nsamples/gpu/CMakeFiles/example_gpu_surf_keypoint_matcher.dir/build.make:132: recipe for target 'bin/example_gpu_surf_keypoint_matcher' failed\nmake[2]: *** [bin/example_gpu_surf_keypoint_matcher] Error 1\n```\n解决方法：\n先去你的build目录下找到这个文件:\n```<build_dir>/samples/gpu/CMakeFiles/example_gpu_surf_keypoint_matcher.dir/link.txt```\n在这个文件里，搜索到```--as-needed CMakeFiles/example_gpu_surf_keypoint_matcher.dir/surf_keypoint_matcher.cpp.o```这一句之后加上```<build_dir>/modules/xfeatures2d/CMakeFiles/opencv_xfeatures2d.dir/src/surf.cuda.cpp.o <build_dir>/modules/xfeatures2d/CMakeFiles/cuda_compile_1.dir/src/cuda/cuda_compile_1_generated_surf.cu.o```\n其中，<build_dir>是你的构建路径，也就是第四步中创建的build文件夹。\n\n### 6.libopencv_imgcodecs.so.4.2.0: undefined reference to `TIFFReadRGBAStrip@LIBTIFF_4.0\n完整报错信息：\n ```\n/usr/local/lib/libopencv_imgcodecs.so.4.2.0: undefined reference to `TIFFReadRGBAStrip@LIBTIFF_4.0'\n/usr/local/lib/libopencv_imgcodecs.so.4.2.0: undefined reference to `TIFFReadDirectory@LIBTIFF_4.0'\n/usr/local/lib/libopencv_imgcodecs.so.4.2.0: undefined reference to `TIFFWriteEncodedStrip@LIBTIFF_4.0'\n/usr/local/lib/libopencv_imgcodecs.so.4.2.0: undefined reference to `TIFFIsTiled@LIBTIFF_4.0'\n/usr/local/lib/libopencv_imgcodecs.so.4.2.0: undefined reference to `TIFFWriteScanline@LIBTIFF_4.0'\n/usr/local/lib/libopencv_imgcodecs.so.4.2.0: undefined reference to `TIFFGetField@LIBTIFF_4.0'\n/usr/local/lib/libopencv_imgcodecs.so.4.2.0: undefined reference to `TIFFScanlineSize@LIBTIFF_4.0'\n/usr/local/lib/libopencv_imgcodecs.so.4.2.0: undefined reference to `TIFFWriteDirectory@LIBTIFF_4.0'\n/usr/local/lib/libopencv_imgcodecs.so.4.2.0: undefined reference to `TIFFReadEncodedTile@LIBTIFF_4.0'\n/usr/local/lib/libopencv_imgcodecs.so.4.2.0: undefined reference to `TIFFReadRGBATile@LIBTIFF_4.0'\n/usr/local/lib/libopencv_imgcodecs.so.4.2.0: undefined reference to `TIFFClose@LIBTIFF_4.0'\n/usr/local/lib/libopencv_imgcodecs.so.4.2.0: undefined reference to `TIFFClientOpen@LIBTIFF_4.0'\n/usr/local/lib/libopencv_imgcodecs.so.4.2.0: undefined reference to `TIFFRGBAImageOK@LIBTIFF_4.0'\n/usr/local/lib/libopencv_imgcodecs.so.4.2.0: undefined reference to `TIFFOpen@LIBTIFF_4.0'\n/usr/local/lib/libopencv_imgcodecs.so.4.2.0: undefined reference to `TIFFReadEncodedStrip@LIBTIFF_4.0'\n/usr/local/lib/libopencv_imgcodecs.so.4.2.0: undefined reference to `TIFFSetField@LIBTIFF_4.0'\n/usr/local/lib/libopencv_imgcodecs.so.4.2.0: undefined reference to `TIFFSetWarningHandler@LIBTIFF_4.0'\n/usr/local/lib/libopencv_imgcodecs.so.4.2.0: undefined reference to `TIFFSetErrorHandler@LIBTIFF_4.0\n ```\n\n 库引用的问题，从报错信息中可以看到是```libopencv_imgcodecs.so.4.2.0```这个库引用不到一个名字含有```TIFF```的库。\n 首先你要检查依赖：```libtiff-dev```是否正确安装。\n 如果正确安装后还是出现这个问题，那么可能是你的python环境下没有这个库，你需要复制一份到你的python环境下。\n 具体操作如下：\n```\n  # 先查看报错信息，发现是```/usr/local/lib/libopencv_imgcodecs.so.4.2.0```库引用不到其他库\n  # 查看这个库的依赖\n  ldd /usr/local/lib/libopencv_imgcodecs.so.4.2.0\n\n  # 输出如下\n  linux-vdso.so.1 =>  (0x00007ffdc29f5000)\n        libopencv_imgproc.so.4.2 => /usr/local/lib/libopencv_imgproc.so.4.2 (0x00007fc9c680c000)\n        libjpeg.so.8 => /usr/lib/x86_64-linux-gnu/libjpeg.so.8 (0x00007fc9c65b3000)\n        libpng12.so.0 => /lib/x86_64-linux-gnu/libpng12.so.0 (0x00007fc9c638e000)\n        libtiff.so.5 => /usr/lib/x86_64-linux-gnu/libtiff.so.5 (0x00007fc9c6119000)\n        libjasper.so.1 => /usr/lib/x86_64-linux-gnu/libjasper.so.1 (0x00007fc9c5ec4000)\n        libIlmImf-2_2.so.22 => /usr/lib/x86_64-linux-gnu/libIlmImf-2_2.so.22 (0x00007fc9c59f5000)\n        libopencv_core.so.4.2 => /usr/local/lib/libopencv_core.so.4.2 (0x00007fc9c5318000)\n        libstdc++.so.6 => /usr/lib/x86_64-linux-gnu/libstdc++.so.6 (0x00007fc9c4f96000)\n        libm.so.6 => /lib/x86_64-linux-gnu/libm.so.6 (0x00007fc9c4c8d000)\n        libgcc_s.so.1 => /lib/x86_64-linux-gnu/libgcc_s.so.1 (0x00007fc9c4a77000)\n        libpthread.so.0 => /lib/x86_64-linux-gnu/libpthread.so.0 (0x00007fc9c485a000)\n        libc.so.6 => /lib/x86_64-linux-gnu/libc.so.6 (0x00007fc9c4490000)\n        libz.so.1 => /usr/local/lib/libz.so.1 (0x00007fc9c4272000)\n        liblzma.so.5 => /lib/x86_64-linux-gnu/liblzma.so.5 (0x00007fc9c4050000)\n        libjbig.so.0 => /usr/lib/x86_64-linux-gnu/libjbig.so.0 (0x00007fc9c3e42000)\n        libHalf.so.12 => /usr/lib/x86_64-linux-gnu/libHalf.so.12 (0x00007fc9c3bff000)\n        libIex-2_2.so.12 => /usr/lib/x86_64-linux-gnu/libIex-2_2.so.12 (0x00007fc9c39e1000)\n        libIlmThread-2_2.so.12 => /usr/lib/x86_64-linux-gnu/libIlmThread-2_2.so.12 (0x00007fc9c37da000)\n        libdl.so.2 => /lib/x86_64-linux-gnu/libdl.so.2 (0x00007fc9c35d6000)\n        librt.so.1 => /lib/x86_64-linux-gnu/librt.so.1 (0x00007fc9c33ce000)\n        libGL.so.1 => /usr/lib/x86_64-linux-gnu/mesa/libGL.so.1 (0x00007fc9c315a000)\n        /lib64/ld-linux-x86-64.so.2 (0x00007fc9c73b1000)\n        libexpat.so.1 => /lib/x86_64-linux-gnu/libexpat.so.1 (0x00007fc9c2f31000)\n        libxcb-dri3.so.0 => /usr/lib/x86_64-linux-gnu/libxcb-dri3.so.0 (0x00007fc9c2d2e000)\n        libxcb-present.so.0 => /usr/lib/x86_64-linux-gnu/libxcb-present.so.0 (0x00007fc9c2b2b000)\n        libxcb-sync.so.1 => /usr/lib/x86_64-linux-gnu/libxcb-sync.so.1 (0x00007fc9c2924000)\n        libxshmfence.so.1 => /usr/lib/x86_64-linux-gnu/libxshmfence.so.1 (0x00007fc9c2721000)\n        libglapi.so.0 => /usr/lib/x86_64-linux-gnu/libglapi.so.0 (0x00007fc9c24f0000)\n        libXext.so.6 => /usr/lib/x86_64-linux-gnu/libXext.so.6 (0x00007fc9c22de000)\n        libXdamage.so.1 => /usr/lib/x86_64-linux-gnu/libXdamage.so.1 (0x00007fc9c20db000)\n        libXfixes.so.3 => /usr/lib/x86_64-linux-gnu/libXfixes.so.3 (0x00007fc9c1ed5000)\n        libX11-xcb.so.1 => /usr/lib/x86_64-linux-gnu/libX11-xcb.so.1 (0x00007fc9c1cd3000)\n        libX11.so.6 => /usr/lib/x86_64-linux-gnu/libX11.so.6 (0x00007fc9c1999000)\n        libxcb-glx.so.0 => /usr/lib/x86_64-linux-gnu/libxcb-glx.so.0 (0x00007fc9c1780000)\n        libxcb-dri2.so.0 => /usr/lib/x86_64-linux-gnu/libxcb-dri2.so.0 (0x00007fc9c157b000)\n        libxcb.so.1 => /usr/lib/x86_64-linux-gnu/libxcb.so.1 (0x00007fc9c1359000)\n        libXxf86vm.so.1 => /usr/lib/x86_64-linux-gnu/libXxf86vm.so.1 (0x00007fc9c1153000)\n        libdrm.so.2 => /usr/lib/x86_64-linux-gnu/libdrm.so.2 (0x00007fc9c0f41000)\n        libXau.so.6 => /usr/lib/x86_64-linux-gnu/libXau.so.6 (0x00007fc9c0d3d000)\n        libXdmcp.so.6 => /usr/lib/x86_64-linux-gnu/libXdmcp.so.6 (0x00007fc9c0b37000)\n  \n  # 你需要在这些依赖中找到报错信息中找不到的那个库。\n  # 这个库在这里：\n  libtiff.so.5 => /usr/lib/x86_64-linux-gnu/libtiff.so.5 (0x00007fc9c6119000)\n\n  # 把这个库复制到你的python环境下：\n  sudo cp /usr/lib/x86_64-linux-gnu/libtiff.so.5 /usr/local/lib/libtiff.so.5\n```\n\n不出意外的话应该是没什么其他的问题了。\n\nmake完成后，执行：\n```bash\nsudo make install\n ```\n\n## 六、链接动态库\n安装完成后，在之前cmake输出的python3 ```install path```路径下，会出现一个库：\n我之前这里输出的```install path = lib/python3.9/site-packages/cv2/python-3.9```，在这个路径前加上安装前缀```CMAKE_INSTALL_PREFIX=/usr/local```\n```\nls -l /usr/local/lib/python3.9/site-packages/cv2/python-3.9\n\n\n总计 9540\n-rw-r--r-- 1 root root 9768648  5月  4 17:51 cv2.cpython-39-x86_64-linux-gnu.so\n\n```\n把这个库连接到你的python环境下：\n```\ncd /usr/local/lib/python3.9/site-packages #这里要看你自己的python环境路径，我是使用的系统的python，所以库直接生成在了我需要的python环境下，这一步对我其实可以省略\nln -s /usr/local/lib/python3.9/site-packages/cv2/python3.9/cv2.cpython-39-x86_64-linux-gnu.so cv2.so\n```\n\n\n## 测试\n```bash\n#激活你安装了opencv的虚拟环境，如果你用的系统python，这一步不需要\nconda activate mouse\n\n#打开python\npython\n\n#测试\nimport cv2\ncv2.__version__\n# 输出：'4.4.0'\n```","slug":"支持cuda的opencv编译流程","published":1,"updated":"2024-04-09T10:59:25.135Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clusa3wod002n2s7ebdiadxyu","content":"<h1 id=\"支持cuda的opencv编译流程\"><a href=\"#支持cuda的opencv编译流程\" class=\"headerlink\" title=\"支持cuda的opencv编译流程\"></a>支持cuda的opencv编译流程</h1><p>本文中所需文件已上传百度网盘，包括opencv压缩包和编译所需文件，链接如下：<br><a href=\"https://pan.baidu.com/s/1ldnmpgnLIU63MDLOajUp6w\">https://pan.baidu.com/s/1ldnmpgnLIU63MDLOajUp6w</a><br>提取码：bjb6</p>\n<h2 id=\"操作环境\"><a href=\"#操作环境\" class=\"headerlink\" title=\"操作环境\"></a>操作环境</h2><ol>\n<li>显卡：<strong>NVIDIA GeForce RTX 3060</strong></li>\n<li>CUDA版本：<strong>CUDA 11.1</strong></li>\n<li>操作系统： <strong>centos7</strong></li>\n</ol>\n<h2 id=\"cuda和cudnn安装请看我的另一篇博客\"><a href=\"#cuda和cudnn安装请看我的另一篇博客\" class=\"headerlink\" title=\"cuda和cudnn安装请看我的另一篇博客\"></a>cuda和cudnn安装请看我的另一篇博客</h2><h3 id=\"温馨提示，在编译支持cuda的opencv之前，要先安装好cuda和cudnn，不然会报错的呢\"><a href=\"#温馨提示，在编译支持cuda的opencv之前，要先安装好cuda和cudnn，不然会报错的呢\" class=\"headerlink\" title=\"温馨提示，在编译支持cuda的opencv之前，要先安装好cuda和cudnn，不然会报错的呢~\"></a>温馨提示，在编译支持cuda的opencv之前，要先安装好cuda和cudnn，不然会报错的呢~</h3><h2 id=\"一、下载源文件\"><a href=\"#一、下载源文件\" class=\"headerlink\" title=\"一、下载源文件\"></a>一、下载源文件</h2><p>opencv源文件官网链接如下，选择Sources版本下载即可，网盘中附带4.4.0版本：<br><a href=\"https://opencv.org/releases/\">Opencv官方下载地址</a><br>下载Contrib对应版本：<br><a href=\"https://github.com/opencv/opencv_contrib/releases\">Opencv_Contrib下载地址</a></p>\n<h2 id=\"二、解压\"><a href=\"#二、解压\" class=\"headerlink\" title=\"二、解压\"></a>二、解压</h2><p>下载到的是zip格式的压缩包，使用unzip命令解压即可，解压到你想的位置，本文中一用户主目录(&#x2F;home&#x2F;dfy)为例：</p>\n<pre class=\"language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">unzip</span> opencv-4.4.0.zip\n<span class=\"token function\">unzip</span> opencv_contrib-4.4.0.zip</code></pre>\n\n<h2 id=\"三、安装需要的依赖\"><a href=\"#三、安装需要的依赖\" class=\"headerlink\" title=\"三、安装需要的依赖\"></a>三、安装需要的依赖</h2><h3 id=\"centos系统\"><a href=\"#centos系统\" class=\"headerlink\" title=\"centos系统\"></a>centos系统</h3><p>组内的服务器使用的是centos7系统，需要安装的依赖如下：</p>\n<pre class=\"language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> yum <span class=\"token parameter variable\">-y</span> <span class=\"token function\">install</span> epel-release\n<span class=\"token function\">sudo</span> yum <span class=\"token parameter variable\">-y</span> <span class=\"token function\">install</span> <span class=\"token function\">git</span> gcc gcc-c++ cmake3 <span class=\"token comment\"># 看到这里的gcc了吗，没错，这里隐藏着一个陨石坑，在后续安装记录章节细说</span>\n<span class=\"token function\">sudo</span> yum <span class=\"token parameter variable\">-y</span> <span class=\"token function\">install</span> qt5-qtbase-devel\n<span class=\"token function\">sudo</span> yum <span class=\"token function\">install</span> <span class=\"token parameter variable\">-y</span> python34 python34-devel python34-pip\n<span class=\"token function\">sudo</span> yum <span class=\"token function\">install</span> <span class=\"token parameter variable\">-y</span> python python-devel python-pip\n\n<span class=\"token function\">sudo</span> yum <span class=\"token parameter variable\">-y</span> <span class=\"token function\">install</span> python-devel numpy python34-numpy\n<span class=\"token function\">sudo</span> yum <span class=\"token parameter variable\">-y</span> <span class=\"token function\">install</span> gtk2-devel\n\n<span class=\"token function\">sudo</span> yum <span class=\"token function\">install</span> <span class=\"token parameter variable\">-y</span> libpng-devel\n<span class=\"token function\">sudo</span> yum <span class=\"token function\">install</span> <span class=\"token parameter variable\">-y</span> jasper-devel\n<span class=\"token function\">sudo</span> yum <span class=\"token function\">install</span> <span class=\"token parameter variable\">-y</span> openexr-devel\n<span class=\"token function\">sudo</span> yum <span class=\"token function\">install</span> <span class=\"token parameter variable\">-y</span> libwebp-devel\n<span class=\"token function\">sudo</span> yum <span class=\"token parameter variable\">-y</span> <span class=\"token function\">install</span> libjpeg-turbo-devel \n<span class=\"token function\">sudo</span> yum <span class=\"token function\">install</span> <span class=\"token parameter variable\">-y</span> freeglut-devel mesa-libGL mesa-libGL-devel\n<span class=\"token function\">sudo</span> yum <span class=\"token parameter variable\">-y</span> <span class=\"token function\">install</span> libtiff-devel \n<span class=\"token function\">sudo</span> yum <span class=\"token parameter variable\">-y</span> <span class=\"token function\">install</span> libdc1394-devel\n<span class=\"token function\">sudo</span> yum <span class=\"token parameter variable\">-y</span> <span class=\"token function\">install</span> tbb-devel eigen3-devel\n<span class=\"token function\">sudo</span> yum <span class=\"token parameter variable\">-y</span> <span class=\"token function\">install</span> boost boost-thread boost-devel\n<span class=\"token function\">sudo</span> yum <span class=\"token parameter variable\">-y</span> <span class=\"token function\">install</span> libv4l-devel\n<span class=\"token function\">sudo</span> yum <span class=\"token parameter variable\">-y</span> <span class=\"token function\">install</span> gstreamer-plugins-base-devel</code></pre>\n<p>安装编译所需要的cmake3(centos7系统有点老了，默认的cmake版本不够，需要指定cmake3)</p>\n<pre class=\"language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> yum <span class=\"token function\">install</span> epel-release\n<span class=\"token function\">sudo</span> yum <span class=\"token function\">install</span> cmake3</code></pre>\n\n<p>安装tesseract</p>\n<pre class=\"language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\"># 搜索「tesseract」</span>\nyum search tesseract\n\n<span class=\"token comment\">#安装「tesseract.x86_64」</span>\nyum <span class=\"token function\">install</span> tesseract.x86_64 tesseract-devel.x86_64 \n\n<span class=\"token comment\">#安装「tesseract-langpack-chi_sim.noarch」中文字库</span>\nyum <span class=\"token function\">install</span> tesseract-langpack-chi_sim.noarch\n\n<span class=\"token comment\">#检查「tesseract」支持的语言</span>\ntesseract --list-langs</code></pre>\n\n<h3 id=\"ubuntu系统\"><a href=\"#ubuntu系统\" class=\"headerlink\" title=\"ubuntu系统\"></a>ubuntu系统</h3><pre class=\"language-none\"><code class=\"language-none\">$ sudo apt-get update\n$ sudo apt-get upgrade\n$ sudo apt-get install build-essential cmake unzip pkg-config\n$ sudo apt-get install libjpeg-dev libpng-dev libtiff-dev\n$ sudo apt-get install libavcodec-dev libavformat-dev libswscale-dev\n$ sudo apt-get install libv4l-dev libxvidcore-dev libx264-dev\n$ sudo apt-get install libgtk-3-dev\n$ sudo apt-get install libatlas-base-dev gfortran\n$ sudo apt-get install python3-dev</code></pre>\n\n<h3 id=\"安装numpy\"><a href=\"#安装numpy\" class=\"headerlink\" title=\"安装numpy\"></a>安装numpy</h3><pre class=\"language-none\"><code class=\"language-none\"># 执行这一步之前，激活你要使用的python虚拟环境\npip install numpy</code></pre>\n\n<h2 id=\"四、执行cmake\"><a href=\"#四、执行cmake\" class=\"headerlink\" title=\"四、执行cmake\"></a>四、执行cmake</h2><pre class=\"language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\"># 进入opencv的解压目录</span>\n<span class=\"token builtin class-name\">cd</span> ~/opencv-4.4.0\n\n<span class=\"token comment\"># 创建构建目录build（这里build目录名称随意）</span>\n<span class=\"token function\">mkdir</span> build\n<span class=\"token builtin class-name\">cd</span> build\n\n<span class=\"token comment\"># 执行cmake</span>\n<span class=\"token comment\"># 这里一些参数的配置一定要仔细再仔细</span>\n<span class=\"token comment\"># 我的参数配置如下</span>\n<span class=\"token comment\"># centos系统如果提示cmake版本不够，这里输入cmake3</span>\ncmake <span class=\"token parameter variable\">-D</span> <span class=\"token assign-left variable\">CMAKE_BUILD_TYPE</span><span class=\"token operator\">=</span>RELEASE <span class=\"token punctuation\">\\</span>\n        <span class=\"token parameter variable\">-D</span> <span class=\"token assign-left variable\">CMAKE_INSTALL_PREFIX</span><span class=\"token operator\">=</span>/usr/local <span class=\"token punctuation\">\\</span>\n        <span class=\"token parameter variable\">-D</span> <span class=\"token assign-left variable\">INSTALL_PYTHON_EXAMPLES</span><span class=\"token operator\">=</span>ON <span class=\"token punctuation\">\\</span>\n        <span class=\"token parameter variable\">-D</span> <span class=\"token assign-left variable\">INSTALL_C_EXAMPLES</span><span class=\"token operator\">=</span>OFF <span class=\"token punctuation\">\\</span>\n        <span class=\"token parameter variable\">-D</span> <span class=\"token assign-left variable\">OPENCV_ENABLE_NONFREE</span><span class=\"token operator\">=</span>ON <span class=\"token punctuation\">\\</span>\n        <span class=\"token parameter variable\">-D</span> <span class=\"token assign-left variable\">WITH_CUDA</span><span class=\"token operator\">=</span>ON <span class=\"token punctuation\">\\</span>\n        <span class=\"token parameter variable\">-D</span> <span class=\"token assign-left variable\">WITH_CUDNN</span><span class=\"token operator\">=</span>ON <span class=\"token punctuation\">\\</span>\n        <span class=\"token parameter variable\">-D</span> <span class=\"token assign-left variable\">OPENCV_DNN_CUDA</span><span class=\"token operator\">=</span>ON <span class=\"token punctuation\">\\</span>\n        <span class=\"token parameter variable\">-D</span> <span class=\"token assign-left variable\">ENABLE_FAST_MATH</span><span class=\"token operator\">=</span><span class=\"token number\">1</span> <span class=\"token punctuation\">\\</span>\n        <span class=\"token parameter variable\">-D</span> <span class=\"token assign-left variable\">CUDA_FAST_MATH</span><span class=\"token operator\">=</span><span class=\"token number\">1</span> <span class=\"token punctuation\">\\</span>\n        <span class=\"token parameter variable\">-D</span> <span class=\"token assign-left variable\">CUDA_ARCH_BIN</span><span class=\"token operator\">=</span><span class=\"token number\">8.6</span> <span class=\"token punctuation\">\\</span>\n        <span class=\"token parameter variable\">-D</span> <span class=\"token assign-left variable\">WITH_CUBLAS</span><span class=\"token operator\">=</span><span class=\"token number\">1</span> <span class=\"token punctuation\">\\</span>\n        <span class=\"token parameter variable\">-D</span> <span class=\"token assign-left variable\">OPENCV_EXTRA_MODULES_PATH</span><span class=\"token operator\">=~</span>/opencv_contrib-4.4.0/modules <span class=\"token punctuation\">\\</span>\n        <span class=\"token parameter variable\">-D</span> <span class=\"token assign-left variable\">HAVE_opencv_python3</span><span class=\"token operator\">=</span>ON <span class=\"token punctuation\">\\</span>\n        <span class=\"token parameter variable\">-D</span> <span class=\"token assign-left variable\">PYTHON_EXECUTABLE</span><span class=\"token operator\">=</span>/usr/local/bin/python3 <span class=\"token punctuation\">\\</span>\n        <span class=\"token parameter variable\">-D</span> <span class=\"token assign-left variable\">BUILD_EXAMPLES</span><span class=\"token operator\">=</span>ON <span class=\"token punctuation\">..</span>\n       <span class=\"token punctuation\">..</span></code></pre>\n<p>详细解释一下命令中各个参数选取的注意事项：</p>\n<blockquote>\n<ol>\n<li>OPENCV_EXTRA_MODULES_PATH，翻译过来就是opencv额外模块路径，这个模块就是我们下载的Contrib模块。所以这项参数填写你的opencv_contrib目录下modules文件夹的路径。如果你是按照上面的教程走的，那么它现在应该在你的用户主目录下：~&#x2F;opencv_contrib-4.4.0&#x2F;modules。</li>\n<li>PYTHON_EXECUTABLE，python虚拟环境路径，它需要指向你的环境中python的可执行文件。若是anaconda的虚拟环境，它一般在虚拟环境目录下的bin目录下：~&#x2F;anaconda3&#x2F;envs&#x2F;mouse&#x2F;bin&#x2F;python3.9,或者是系统的python3：&#x2F;usr&#x2F;local&#x2F;bin&#x2F;python3(不建议，我虽然是这么做的，但是我是在docker镜像内操作，系统本身的python关系到系统的运行，比较危险，如果实在要用，可以安装一下其他版本的python，用其他版本来操作)<br>python版本可能很多，指定你所需版本的python可执行文件。</li>\n<li>CUDA_ARCH_BIN，这里指的是你的cuda版本对应的算力级别。去<a href=\"https://developer.nvidia.com/cuda-gpus#collapseOne\">cuda官网</a>查看一下。组内服务器的显卡是3090，cuda版本我装的是11.1，官网上写着对应的算力级别为8.6，所以这里填8.6。</li>\n<li>命令最后两个点不能落下，这两个点代表相对路径。</li>\n</ol>\n</blockquote>\n<p>以上是实际应用中需要自己确定的问题，其他的按照我写的命令复制即可。<br>我在执行cmake的时候报了一些错误，很多个failed，但是实际使用并没什么问题。<br>如果你执行命令之后，发现你的cmake参数配置有错误，那么你需要删除build目录重新执行这一步骤。</p>\n<p><strong>在执行下一步之前，你需要检查cmake的输出，有个至关重要的点：</strong><br>检查cmake输出中有没有这个模块：</p>\n<pre class=\"language-none\"><code class=\"language-none\">--   Python 3:\n--     Interpreter:                 &#x2F;usr&#x2F;local&#x2F;bin&#x2F;python3 (ver 3.9.16)\n--     Libraries:                   &#x2F;usr&#x2F;local&#x2F;lib&#x2F;libpython3.9.so (ver 3.9.16)\n--     numpy:                       &#x2F;usr&#x2F;local&#x2F;lib&#x2F;python3.9&#x2F;site-packages&#x2F;numpy&#x2F;core&#x2F;include (ver 1.24.2)\n--     install path:                lib&#x2F;python3.9&#x2F;site-packages&#x2F;cv2&#x2F;python-3.9</code></pre>\n<p>如果没有这一块，没必要往下走了，因为安装完也没有用。你需要检查你的python环境是否具有python3的条件。<br>这里输出的<code>install path</code>后面要用到，先记下来。</p>\n<p>其他的信息你可以检查一下你配置是否正确，例如下面：</p>\n<pre class=\"language-none\"><code class=\"language-none\">NVIDIA CUDA:                   YES (ver 11.1, CUFFT CUBLAS FAST_MATH)\n  NVIDIA GPU arch:             86\n  NVIDIA PTX archs:\n  \ncuDNN:                         YES (ver 8.7.0)</code></pre>\n\n<h2 id=\"五、安装\"><a href=\"#五、安装\" class=\"headerlink\" title=\"五、安装\"></a>五、安装</h2><pre class=\"language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">make</span> -j<span class=\"token variable\"><span class=\"token variable\">$(</span>nproc<span class=\"token variable\">)</span></span></code></pre>\n<p>安装过程中也会踩很多很多很多很多很多的陨石坑，在这里记录一下（本人被折磨的不轻）</p>\n<h3 id=\"1-Unsupported-gpu-architecture-‘compute-30’\"><a href=\"#1-Unsupported-gpu-architecture-‘compute-30’\" class=\"headerlink\" title=\"1.Unsupported gpu architecture ‘compute_30’\"></a>1.Unsupported gpu architecture ‘compute_30’</h3><p>翻译过来就是gpu算力不支持，说明你在cmake的CUDA_ARCH_BIN设置和你的显卡和cuda不匹配，去<a href=\"https://developer.nvidia.com/cuda-gpus#collapseOne\">cuda官网</a>找你的显卡对应的算力。</p>\n<h3 id=\"2-error-“OpenCV-4-x-requires-enabled-C-11-support”\"><a href=\"#2-error-“OpenCV-4-x-requires-enabled-C-11-support”\" class=\"headerlink\" title=\"2.# error “OpenCV 4.x+ requires enabled C++11 support”\"></a>2.# error “OpenCV 4.x+ requires enabled C++11 support”</h3><p>这句话意思是opencv4以上的版本需要c++11才可以编译。<br>所以这里我去看一下gcc的版本，看看支不支持c++11.<br>gcc的版本是4.8.5，按理说应该是支持c++11的，但是这里编译就是过不了。<br>网络上的解决办法是在编译的时候加上<code>-std=c++11</code>这个选项。<br>但是编译语句都是cmake自动生成的，那么多语句，要找到猴年马月。<br>一度怀疑人生。</p>\n<p>后来我仔细看了下报错信息，发现在之前还有这样一句话：<br><code>nvcc warning : The -std=c++14 flag is not supported with the configured host compiler. Flag will be ignored. </code><br>这句话后面几行才打出<code># error &quot;OpenCV 4.x+ requires enabled C++11 support&quot;</code>这句话，那么说明根源在上面那句。</p>\n<p>这句话的意思是，编译选项<code>-std=c++14</code>不支持，所以该选项被忽略。<br>说明编译语句中写的是<code>-std=c++14</code>，而不是<code>-std=c++11</code>，说明尽管gcc4.8.5支持c++11，它还是没有办法去调用，因为编译语句没有指定。<br>那么从根源解决问题，升高gcc版本，让它支持c++14，该问题才能得到解决。</p>\n<p>所以我把gcc版本升级到了9.3.0，该错误消失了。</p>\n<p>真好啊，ctmd，浪费老子半天。</p>\n<p>gcc安装教程参考博客<a href=\"https://blog.csdn.net/zblock0/article/details/107032359\">https://blog.csdn.net/zblock0/article/details/107032359</a></p>\n<h3 id=\"3-fatal-error-boostdesc-bgm-i-no-such-file-or-directory\"><a href=\"#3-fatal-error-boostdesc-bgm-i-no-such-file-or-directory\" class=\"headerlink\" title=\"3. fatal error: boostdesc_bgm.i:no such file or directory\"></a>3. fatal error: boostdesc_bgm.i:no such file or directory</h3><p>说明缺少一些依赖文件。文件在文章开始的百度网盘提供了。把所有的.i文件复制到opencv_contrib&#x2F;modules&#x2F;xfeatures2d&#x2F;src&#x2F;目录下即可。</p>\n<h3 id=\"4-fatal-error-features2d-x2F-test-x2F-test-detectors-regression-impl-hpp-no-such-file-or-directory\"><a href=\"#4-fatal-error-features2d-x2F-test-x2F-test-detectors-regression-impl-hpp-no-such-file-or-directory\" class=\"headerlink\" title=\"4. fatal error: features2d&#x2F;test&#x2F;test_detectors_regression.impl.hpp:no such file or directory\"></a>4. fatal error: features2d&#x2F;test&#x2F;test_detectors_regression.impl.hpp:no such file or directory</h3><p>依旧是缺少文件，这个文件在opencv的modules目录下其实已经提供了，是路径的问题。所以复制一下：<br><code>cp -r ../modules/features2d ./</code></p>\n<p>所有这种缺少文件的报错，都可以去找一下这个文件的名字，如果在opencv或者contrib中提供了，复制过去就好。</p>\n<h3 id=\"5-CMakeFiles-x2F-example-gpu-surf-keypoint-matcher-dir-x2F-surf-keypoint-matcher-cpp-o-In-function-96-main’\"><a href=\"#5-CMakeFiles-x2F-example-gpu-surf-keypoint-matcher-dir-x2F-surf-keypoint-matcher-cpp-o-In-function-96-main’\" class=\"headerlink\" title=\"5.CMakeFiles&#x2F;example_gpu_surf_keypoint_matcher.dir&#x2F;surf_keypoint_matcher.cpp.o: In function &#96;main’\"></a>5.CMakeFiles&#x2F;example_gpu_surf_keypoint_matcher.dir&#x2F;surf_keypoint_matcher.cpp.o: In function &#96;main’</h3><p>完整报错信息如下：</p>\n<pre class=\"language-none\"><code class=\"language-none\">CMakeFiles&#x2F;example_gpu_surf_keypoint_matcher.dir&#x2F;surf_keypoint_matcher.cpp.o: In function &#96;main&#39;:\nsurf_keypoint_matcher.cpp:(.text.startup.main+0x352): undefined reference to &#96;cv::cuda::SURF_CUDA::SURF_CUDA()&#39;\nsurf_keypoint_matcher.cpp:(.text.startup.main+0x579): undefined reference to &#96;cv::cuda::SURF_CUDA::operator()(cv::cuda::GpuMat const&amp;, cv::cuda::GpuMat const&amp;, cv::cuda::GpuMat&amp;, cv::cuda::GpuMat&amp;, bool)&#39;\nsurf_keypoint_matcher.cpp:(.text.startup.main+0x60d): undefined reference to &#96;cv::cuda::SURF_CUDA::operator()(cv::cuda::GpuMat const&amp;, cv::cuda::GpuMat const&amp;, cv::cuda::GpuMat&amp;, cv::cuda::GpuMat&amp;, bool)&#39;\nsurf_keypoint_matcher.cpp:(.text.startup.main+0x6af): undefined reference to &#96;cv::cuda::SURF_CUDA::defaultNorm() const&#39;\nsurf_keypoint_matcher.cpp:(.text.startup.main+0x7ca): undefined reference to &#96;cv::cuda::SURF_CUDA::downloadKeypoints(cv::cuda::GpuMat const&amp;, std::vector&lt;cv::KeyPoint, std::allocator&lt;cv::KeyPoint&gt; &gt;&amp;)&#39;\nsurf_keypoint_matcher.cpp:(.text.startup.main+0x7ea): undefined reference to &#96;cv::cuda::SURF_CUDA::downloadKeypoints(cv::cuda::GpuMat const&amp;, std::vector&lt;cv::KeyPoint, std::allocator&lt;cv::KeyPoint&gt; &gt;&amp;)&#39;\nsurf_keypoint_matcher.cpp:(.text.startup.main+0x800): undefined reference to &#96;cv::cuda::SURF_CUDA::downloadDescriptors(cv::cuda::GpuMat const&amp;, std::vector&lt;float, std::allocator&lt;float&gt; &gt;&amp;)&#39;\nsurf_keypoint_matcher.cpp:(.text.startup.main+0x812): undefined reference to &#96;cv::cuda::SURF_CUDA::downloadDescriptors(cv::cuda::GpuMat const&amp;, std::vector&lt;float, std::allocator&lt;float&gt; &gt;&amp;)&#39;\ncollect2: error: ld returned 1 exit status\nsamples&#x2F;gpu&#x2F;CMakeFiles&#x2F;example_gpu_surf_keypoint_matcher.dir&#x2F;build.make:132: recipe for target &#39;bin&#x2F;example_gpu_surf_keypoint_matcher&#39; failed\nmake[2]: *** [bin&#x2F;example_gpu_surf_keypoint_matcher] Error 1</code></pre>\n<p>解决方法：<br>先去你的build目录下找到这个文件:<br><code>&lt;build_dir&gt;/samples/gpu/CMakeFiles/example_gpu_surf_keypoint_matcher.dir/link.txt</code><br>在这个文件里，搜索到<code>--as-needed CMakeFiles/example_gpu_surf_keypoint_matcher.dir/surf_keypoint_matcher.cpp.o</code>这一句之后加上<code>&lt;build_dir&gt;/modules/xfeatures2d/CMakeFiles/opencv_xfeatures2d.dir/src/surf.cuda.cpp.o &lt;build_dir&gt;/modules/xfeatures2d/CMakeFiles/cuda_compile_1.dir/src/cuda/cuda_compile_1_generated_surf.cu.o</code><br>其中，<build_dir>是你的构建路径，也就是第四步中创建的build文件夹。</p>\n<h3 id=\"6-libopencv-imgcodecs-so-4-2-0-undefined-reference-to-96-x54-x49-70-70-x52-101-97-x64-82-71-66-65-x53-x74-114-x69-x70-x40-x4c-73-66-x54-x49-x46-x46-95-x34-46-48\"><a href=\"#6-libopencv-imgcodecs-so-4-2-0-undefined-reference-to-96-x54-x49-70-70-x52-101-97-x64-82-71-66-65-x53-x74-114-x69-x70-x40-x4c-73-66-x54-x49-x46-x46-95-x34-46-48\" class=\"headerlink\" title=\"6.libopencv_imgcodecs.so.4.2.0: undefined reference to &#96;&#x54;&#x49;&#70;&#70;&#x52;&#101;&#97;&#x64;&#82;&#71;&#66;&#65;&#x53;&#x74;&#114;&#x69;&#x70;&#x40;&#x4c;&#73;&#66;&#x54;&#x49;&#x46;&#x46;&#95;&#x34;&#46;&#48;\"></a>6.libopencv_imgcodecs.so.4.2.0: undefined reference to &#96;<a href=\"mailto:&#x54;&#x49;&#70;&#70;&#x52;&#101;&#97;&#x64;&#82;&#71;&#66;&#65;&#x53;&#x74;&#114;&#x69;&#x70;&#x40;&#x4c;&#73;&#66;&#x54;&#x49;&#x46;&#x46;&#95;&#x34;&#46;&#48;\">&#x54;&#x49;&#70;&#70;&#x52;&#101;&#97;&#x64;&#82;&#71;&#66;&#65;&#x53;&#x74;&#114;&#x69;&#x70;&#x40;&#x4c;&#73;&#66;&#x54;&#x49;&#x46;&#x46;&#95;&#x34;&#46;&#48;</a></h3><p>完整报错信息：<br> <pre class=\"language-none\"><code class=\"language-none\">&#x2F;usr&#x2F;local&#x2F;lib&#x2F;libopencv_imgcodecs.so.4.2.0: undefined reference to &#96;TIFFReadRGBAStrip@LIBTIFF_4.0&#39;\n&#x2F;usr&#x2F;local&#x2F;lib&#x2F;libopencv_imgcodecs.so.4.2.0: undefined reference to &#96;TIFFReadDirectory@LIBTIFF_4.0&#39;\n&#x2F;usr&#x2F;local&#x2F;lib&#x2F;libopencv_imgcodecs.so.4.2.0: undefined reference to &#96;TIFFWriteEncodedStrip@LIBTIFF_4.0&#39;\n&#x2F;usr&#x2F;local&#x2F;lib&#x2F;libopencv_imgcodecs.so.4.2.0: undefined reference to &#96;TIFFIsTiled@LIBTIFF_4.0&#39;\n&#x2F;usr&#x2F;local&#x2F;lib&#x2F;libopencv_imgcodecs.so.4.2.0: undefined reference to &#96;TIFFWriteScanline@LIBTIFF_4.0&#39;\n&#x2F;usr&#x2F;local&#x2F;lib&#x2F;libopencv_imgcodecs.so.4.2.0: undefined reference to &#96;TIFFGetField@LIBTIFF_4.0&#39;\n&#x2F;usr&#x2F;local&#x2F;lib&#x2F;libopencv_imgcodecs.so.4.2.0: undefined reference to &#96;TIFFScanlineSize@LIBTIFF_4.0&#39;\n&#x2F;usr&#x2F;local&#x2F;lib&#x2F;libopencv_imgcodecs.so.4.2.0: undefined reference to &#96;TIFFWriteDirectory@LIBTIFF_4.0&#39;\n&#x2F;usr&#x2F;local&#x2F;lib&#x2F;libopencv_imgcodecs.so.4.2.0: undefined reference to &#96;TIFFReadEncodedTile@LIBTIFF_4.0&#39;\n&#x2F;usr&#x2F;local&#x2F;lib&#x2F;libopencv_imgcodecs.so.4.2.0: undefined reference to &#96;TIFFReadRGBATile@LIBTIFF_4.0&#39;\n&#x2F;usr&#x2F;local&#x2F;lib&#x2F;libopencv_imgcodecs.so.4.2.0: undefined reference to &#96;TIFFClose@LIBTIFF_4.0&#39;\n&#x2F;usr&#x2F;local&#x2F;lib&#x2F;libopencv_imgcodecs.so.4.2.0: undefined reference to &#96;TIFFClientOpen@LIBTIFF_4.0&#39;\n&#x2F;usr&#x2F;local&#x2F;lib&#x2F;libopencv_imgcodecs.so.4.2.0: undefined reference to &#96;TIFFRGBAImageOK@LIBTIFF_4.0&#39;\n&#x2F;usr&#x2F;local&#x2F;lib&#x2F;libopencv_imgcodecs.so.4.2.0: undefined reference to &#96;TIFFOpen@LIBTIFF_4.0&#39;\n&#x2F;usr&#x2F;local&#x2F;lib&#x2F;libopencv_imgcodecs.so.4.2.0: undefined reference to &#96;TIFFReadEncodedStrip@LIBTIFF_4.0&#39;\n&#x2F;usr&#x2F;local&#x2F;lib&#x2F;libopencv_imgcodecs.so.4.2.0: undefined reference to &#96;TIFFSetField@LIBTIFF_4.0&#39;\n&#x2F;usr&#x2F;local&#x2F;lib&#x2F;libopencv_imgcodecs.so.4.2.0: undefined reference to &#96;TIFFSetWarningHandler@LIBTIFF_4.0&#39;\n&#x2F;usr&#x2F;local&#x2F;lib&#x2F;libopencv_imgcodecs.so.4.2.0: undefined reference to &#96;TIFFSetErrorHandler@LIBTIFF_4.0</code></pre></p>\n<p> 库引用的问题，从报错信息中可以看到是<code>libopencv_imgcodecs.so.4.2.0</code>这个库引用不到一个名字含有<code>TIFF</code>的库。<br> 首先你要检查依赖：<code>libtiff-dev</code>是否正确安装。<br> 如果正确安装后还是出现这个问题，那么可能是你的python环境下没有这个库，你需要复制一份到你的python环境下。<br> 具体操作如下：</p>\n<pre class=\"language-none\"><code class=\"language-none\"># 先查看报错信息，发现是&#96;&#96;&#96;&#x2F;usr&#x2F;local&#x2F;lib&#x2F;libopencv_imgcodecs.so.4.2.0&#96;&#96;&#96;库引用不到其他库\n# 查看这个库的依赖\nldd &#x2F;usr&#x2F;local&#x2F;lib&#x2F;libopencv_imgcodecs.so.4.2.0\n\n# 输出如下\nlinux-vdso.so.1 &#x3D;&gt;  (0x00007ffdc29f5000)\n      libopencv_imgproc.so.4.2 &#x3D;&gt; &#x2F;usr&#x2F;local&#x2F;lib&#x2F;libopencv_imgproc.so.4.2 (0x00007fc9c680c000)\n      libjpeg.so.8 &#x3D;&gt; &#x2F;usr&#x2F;lib&#x2F;x86_64-linux-gnu&#x2F;libjpeg.so.8 (0x00007fc9c65b3000)\n      libpng12.so.0 &#x3D;&gt; &#x2F;lib&#x2F;x86_64-linux-gnu&#x2F;libpng12.so.0 (0x00007fc9c638e000)\n      libtiff.so.5 &#x3D;&gt; &#x2F;usr&#x2F;lib&#x2F;x86_64-linux-gnu&#x2F;libtiff.so.5 (0x00007fc9c6119000)\n      libjasper.so.1 &#x3D;&gt; &#x2F;usr&#x2F;lib&#x2F;x86_64-linux-gnu&#x2F;libjasper.so.1 (0x00007fc9c5ec4000)\n      libIlmImf-2_2.so.22 &#x3D;&gt; &#x2F;usr&#x2F;lib&#x2F;x86_64-linux-gnu&#x2F;libIlmImf-2_2.so.22 (0x00007fc9c59f5000)\n      libopencv_core.so.4.2 &#x3D;&gt; &#x2F;usr&#x2F;local&#x2F;lib&#x2F;libopencv_core.so.4.2 (0x00007fc9c5318000)\n      libstdc++.so.6 &#x3D;&gt; &#x2F;usr&#x2F;lib&#x2F;x86_64-linux-gnu&#x2F;libstdc++.so.6 (0x00007fc9c4f96000)\n      libm.so.6 &#x3D;&gt; &#x2F;lib&#x2F;x86_64-linux-gnu&#x2F;libm.so.6 (0x00007fc9c4c8d000)\n      libgcc_s.so.1 &#x3D;&gt; &#x2F;lib&#x2F;x86_64-linux-gnu&#x2F;libgcc_s.so.1 (0x00007fc9c4a77000)\n      libpthread.so.0 &#x3D;&gt; &#x2F;lib&#x2F;x86_64-linux-gnu&#x2F;libpthread.so.0 (0x00007fc9c485a000)\n      libc.so.6 &#x3D;&gt; &#x2F;lib&#x2F;x86_64-linux-gnu&#x2F;libc.so.6 (0x00007fc9c4490000)\n      libz.so.1 &#x3D;&gt; &#x2F;usr&#x2F;local&#x2F;lib&#x2F;libz.so.1 (0x00007fc9c4272000)\n      liblzma.so.5 &#x3D;&gt; &#x2F;lib&#x2F;x86_64-linux-gnu&#x2F;liblzma.so.5 (0x00007fc9c4050000)\n      libjbig.so.0 &#x3D;&gt; &#x2F;usr&#x2F;lib&#x2F;x86_64-linux-gnu&#x2F;libjbig.so.0 (0x00007fc9c3e42000)\n      libHalf.so.12 &#x3D;&gt; &#x2F;usr&#x2F;lib&#x2F;x86_64-linux-gnu&#x2F;libHalf.so.12 (0x00007fc9c3bff000)\n      libIex-2_2.so.12 &#x3D;&gt; &#x2F;usr&#x2F;lib&#x2F;x86_64-linux-gnu&#x2F;libIex-2_2.so.12 (0x00007fc9c39e1000)\n      libIlmThread-2_2.so.12 &#x3D;&gt; &#x2F;usr&#x2F;lib&#x2F;x86_64-linux-gnu&#x2F;libIlmThread-2_2.so.12 (0x00007fc9c37da000)\n      libdl.so.2 &#x3D;&gt; &#x2F;lib&#x2F;x86_64-linux-gnu&#x2F;libdl.so.2 (0x00007fc9c35d6000)\n      librt.so.1 &#x3D;&gt; &#x2F;lib&#x2F;x86_64-linux-gnu&#x2F;librt.so.1 (0x00007fc9c33ce000)\n      libGL.so.1 &#x3D;&gt; &#x2F;usr&#x2F;lib&#x2F;x86_64-linux-gnu&#x2F;mesa&#x2F;libGL.so.1 (0x00007fc9c315a000)\n      &#x2F;lib64&#x2F;ld-linux-x86-64.so.2 (0x00007fc9c73b1000)\n      libexpat.so.1 &#x3D;&gt; &#x2F;lib&#x2F;x86_64-linux-gnu&#x2F;libexpat.so.1 (0x00007fc9c2f31000)\n      libxcb-dri3.so.0 &#x3D;&gt; &#x2F;usr&#x2F;lib&#x2F;x86_64-linux-gnu&#x2F;libxcb-dri3.so.0 (0x00007fc9c2d2e000)\n      libxcb-present.so.0 &#x3D;&gt; &#x2F;usr&#x2F;lib&#x2F;x86_64-linux-gnu&#x2F;libxcb-present.so.0 (0x00007fc9c2b2b000)\n      libxcb-sync.so.1 &#x3D;&gt; &#x2F;usr&#x2F;lib&#x2F;x86_64-linux-gnu&#x2F;libxcb-sync.so.1 (0x00007fc9c2924000)\n      libxshmfence.so.1 &#x3D;&gt; &#x2F;usr&#x2F;lib&#x2F;x86_64-linux-gnu&#x2F;libxshmfence.so.1 (0x00007fc9c2721000)\n      libglapi.so.0 &#x3D;&gt; &#x2F;usr&#x2F;lib&#x2F;x86_64-linux-gnu&#x2F;libglapi.so.0 (0x00007fc9c24f0000)\n      libXext.so.6 &#x3D;&gt; &#x2F;usr&#x2F;lib&#x2F;x86_64-linux-gnu&#x2F;libXext.so.6 (0x00007fc9c22de000)\n      libXdamage.so.1 &#x3D;&gt; &#x2F;usr&#x2F;lib&#x2F;x86_64-linux-gnu&#x2F;libXdamage.so.1 (0x00007fc9c20db000)\n      libXfixes.so.3 &#x3D;&gt; &#x2F;usr&#x2F;lib&#x2F;x86_64-linux-gnu&#x2F;libXfixes.so.3 (0x00007fc9c1ed5000)\n      libX11-xcb.so.1 &#x3D;&gt; &#x2F;usr&#x2F;lib&#x2F;x86_64-linux-gnu&#x2F;libX11-xcb.so.1 (0x00007fc9c1cd3000)\n      libX11.so.6 &#x3D;&gt; &#x2F;usr&#x2F;lib&#x2F;x86_64-linux-gnu&#x2F;libX11.so.6 (0x00007fc9c1999000)\n      libxcb-glx.so.0 &#x3D;&gt; &#x2F;usr&#x2F;lib&#x2F;x86_64-linux-gnu&#x2F;libxcb-glx.so.0 (0x00007fc9c1780000)\n      libxcb-dri2.so.0 &#x3D;&gt; &#x2F;usr&#x2F;lib&#x2F;x86_64-linux-gnu&#x2F;libxcb-dri2.so.0 (0x00007fc9c157b000)\n      libxcb.so.1 &#x3D;&gt; &#x2F;usr&#x2F;lib&#x2F;x86_64-linux-gnu&#x2F;libxcb.so.1 (0x00007fc9c1359000)\n      libXxf86vm.so.1 &#x3D;&gt; &#x2F;usr&#x2F;lib&#x2F;x86_64-linux-gnu&#x2F;libXxf86vm.so.1 (0x00007fc9c1153000)\n      libdrm.so.2 &#x3D;&gt; &#x2F;usr&#x2F;lib&#x2F;x86_64-linux-gnu&#x2F;libdrm.so.2 (0x00007fc9c0f41000)\n      libXau.so.6 &#x3D;&gt; &#x2F;usr&#x2F;lib&#x2F;x86_64-linux-gnu&#x2F;libXau.so.6 (0x00007fc9c0d3d000)\n      libXdmcp.so.6 &#x3D;&gt; &#x2F;usr&#x2F;lib&#x2F;x86_64-linux-gnu&#x2F;libXdmcp.so.6 (0x00007fc9c0b37000)\n\n# 你需要在这些依赖中找到报错信息中找不到的那个库。\n# 这个库在这里：\nlibtiff.so.5 &#x3D;&gt; &#x2F;usr&#x2F;lib&#x2F;x86_64-linux-gnu&#x2F;libtiff.so.5 (0x00007fc9c6119000)\n\n# 把这个库复制到你的python环境下：\nsudo cp &#x2F;usr&#x2F;lib&#x2F;x86_64-linux-gnu&#x2F;libtiff.so.5 &#x2F;usr&#x2F;local&#x2F;lib&#x2F;libtiff.so.5</code></pre>\n\n<p>不出意外的话应该是没什么其他的问题了。</p>\n<p>make完成后，执行：</p>\n<pre class=\"language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> <span class=\"token function\">make</span> <span class=\"token function\">install</span></code></pre>\n\n<h2 id=\"六、链接动态库\"><a href=\"#六、链接动态库\" class=\"headerlink\" title=\"六、链接动态库\"></a>六、链接动态库</h2><p>安装完成后，在之前cmake输出的python3 <code>install path</code>路径下，会出现一个库：<br>我之前这里输出的<code>install path = lib/python3.9/site-packages/cv2/python-3.9</code>，在这个路径前加上安装前缀<code>CMAKE_INSTALL_PREFIX=/usr/local</code></p>\n<pre class=\"language-none\"><code class=\"language-none\">ls -l &#x2F;usr&#x2F;local&#x2F;lib&#x2F;python3.9&#x2F;site-packages&#x2F;cv2&#x2F;python-3.9\n\n\n总计 9540\n-rw-r--r-- 1 root root 9768648  5月  4 17:51 cv2.cpython-39-x86_64-linux-gnu.so\n</code></pre>\n<p>把这个库连接到你的python环境下：</p>\n<pre class=\"language-none\"><code class=\"language-none\">cd &#x2F;usr&#x2F;local&#x2F;lib&#x2F;python3.9&#x2F;site-packages #这里要看你自己的python环境路径，我是使用的系统的python，所以库直接生成在了我需要的python环境下，这一步对我其实可以省略\nln -s &#x2F;usr&#x2F;local&#x2F;lib&#x2F;python3.9&#x2F;site-packages&#x2F;cv2&#x2F;python3.9&#x2F;cv2.cpython-39-x86_64-linux-gnu.so cv2.so</code></pre>\n\n\n<h2 id=\"测试\"><a href=\"#测试\" class=\"headerlink\" title=\"测试\"></a>测试</h2><pre class=\"language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\">#激活你安装了opencv的虚拟环境，如果你用的系统python，这一步不需要</span>\nconda activate mouse\n\n<span class=\"token comment\">#打开python</span>\npython\n\n<span class=\"token comment\">#测试</span>\n<span class=\"token function\">import</span> cv2\ncv2.__version__\n<span class=\"token comment\"># 输出：'4.4.0'</span></code></pre>","site":{"data":{}},"excerpt":"","more":"<h1 id=\"支持cuda的opencv编译流程\"><a href=\"#支持cuda的opencv编译流程\" class=\"headerlink\" title=\"支持cuda的opencv编译流程\"></a>支持cuda的opencv编译流程</h1><p>本文中所需文件已上传百度网盘，包括opencv压缩包和编译所需文件，链接如下：<br><a href=\"https://pan.baidu.com/s/1ldnmpgnLIU63MDLOajUp6w\">https://pan.baidu.com/s/1ldnmpgnLIU63MDLOajUp6w</a><br>提取码：bjb6</p>\n<h2 id=\"操作环境\"><a href=\"#操作环境\" class=\"headerlink\" title=\"操作环境\"></a>操作环境</h2><ol>\n<li>显卡：<strong>NVIDIA GeForce RTX 3060</strong></li>\n<li>CUDA版本：<strong>CUDA 11.1</strong></li>\n<li>操作系统： <strong>centos7</strong></li>\n</ol>\n<h2 id=\"cuda和cudnn安装请看我的另一篇博客\"><a href=\"#cuda和cudnn安装请看我的另一篇博客\" class=\"headerlink\" title=\"cuda和cudnn安装请看我的另一篇博客\"></a>cuda和cudnn安装请看我的另一篇博客</h2><h3 id=\"温馨提示，在编译支持cuda的opencv之前，要先安装好cuda和cudnn，不然会报错的呢\"><a href=\"#温馨提示，在编译支持cuda的opencv之前，要先安装好cuda和cudnn，不然会报错的呢\" class=\"headerlink\" title=\"温馨提示，在编译支持cuda的opencv之前，要先安装好cuda和cudnn，不然会报错的呢~\"></a>温馨提示，在编译支持cuda的opencv之前，要先安装好cuda和cudnn，不然会报错的呢~</h3><h2 id=\"一、下载源文件\"><a href=\"#一、下载源文件\" class=\"headerlink\" title=\"一、下载源文件\"></a>一、下载源文件</h2><p>opencv源文件官网链接如下，选择Sources版本下载即可，网盘中附带4.4.0版本：<br><a href=\"https://opencv.org/releases/\">Opencv官方下载地址</a><br>下载Contrib对应版本：<br><a href=\"https://github.com/opencv/opencv_contrib/releases\">Opencv_Contrib下载地址</a></p>\n<h2 id=\"二、解压\"><a href=\"#二、解压\" class=\"headerlink\" title=\"二、解压\"></a>二、解压</h2><p>下载到的是zip格式的压缩包，使用unzip命令解压即可，解压到你想的位置，本文中一用户主目录(&#x2F;home&#x2F;dfy)为例：</p>\n<pre class=\"language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">unzip</span> opencv-4.4.0.zip\n<span class=\"token function\">unzip</span> opencv_contrib-4.4.0.zip</code></pre>\n\n<h2 id=\"三、安装需要的依赖\"><a href=\"#三、安装需要的依赖\" class=\"headerlink\" title=\"三、安装需要的依赖\"></a>三、安装需要的依赖</h2><h3 id=\"centos系统\"><a href=\"#centos系统\" class=\"headerlink\" title=\"centos系统\"></a>centos系统</h3><p>组内的服务器使用的是centos7系统，需要安装的依赖如下：</p>\n<pre class=\"language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> yum <span class=\"token parameter variable\">-y</span> <span class=\"token function\">install</span> epel-release\n<span class=\"token function\">sudo</span> yum <span class=\"token parameter variable\">-y</span> <span class=\"token function\">install</span> <span class=\"token function\">git</span> gcc gcc-c++ cmake3 <span class=\"token comment\"># 看到这里的gcc了吗，没错，这里隐藏着一个陨石坑，在后续安装记录章节细说</span>\n<span class=\"token function\">sudo</span> yum <span class=\"token parameter variable\">-y</span> <span class=\"token function\">install</span> qt5-qtbase-devel\n<span class=\"token function\">sudo</span> yum <span class=\"token function\">install</span> <span class=\"token parameter variable\">-y</span> python34 python34-devel python34-pip\n<span class=\"token function\">sudo</span> yum <span class=\"token function\">install</span> <span class=\"token parameter variable\">-y</span> python python-devel python-pip\n\n<span class=\"token function\">sudo</span> yum <span class=\"token parameter variable\">-y</span> <span class=\"token function\">install</span> python-devel numpy python34-numpy\n<span class=\"token function\">sudo</span> yum <span class=\"token parameter variable\">-y</span> <span class=\"token function\">install</span> gtk2-devel\n\n<span class=\"token function\">sudo</span> yum <span class=\"token function\">install</span> <span class=\"token parameter variable\">-y</span> libpng-devel\n<span class=\"token function\">sudo</span> yum <span class=\"token function\">install</span> <span class=\"token parameter variable\">-y</span> jasper-devel\n<span class=\"token function\">sudo</span> yum <span class=\"token function\">install</span> <span class=\"token parameter variable\">-y</span> openexr-devel\n<span class=\"token function\">sudo</span> yum <span class=\"token function\">install</span> <span class=\"token parameter variable\">-y</span> libwebp-devel\n<span class=\"token function\">sudo</span> yum <span class=\"token parameter variable\">-y</span> <span class=\"token function\">install</span> libjpeg-turbo-devel \n<span class=\"token function\">sudo</span> yum <span class=\"token function\">install</span> <span class=\"token parameter variable\">-y</span> freeglut-devel mesa-libGL mesa-libGL-devel\n<span class=\"token function\">sudo</span> yum <span class=\"token parameter variable\">-y</span> <span class=\"token function\">install</span> libtiff-devel \n<span class=\"token function\">sudo</span> yum <span class=\"token parameter variable\">-y</span> <span class=\"token function\">install</span> libdc1394-devel\n<span class=\"token function\">sudo</span> yum <span class=\"token parameter variable\">-y</span> <span class=\"token function\">install</span> tbb-devel eigen3-devel\n<span class=\"token function\">sudo</span> yum <span class=\"token parameter variable\">-y</span> <span class=\"token function\">install</span> boost boost-thread boost-devel\n<span class=\"token function\">sudo</span> yum <span class=\"token parameter variable\">-y</span> <span class=\"token function\">install</span> libv4l-devel\n<span class=\"token function\">sudo</span> yum <span class=\"token parameter variable\">-y</span> <span class=\"token function\">install</span> gstreamer-plugins-base-devel</code></pre>\n<p>安装编译所需要的cmake3(centos7系统有点老了，默认的cmake版本不够，需要指定cmake3)</p>\n<pre class=\"language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> yum <span class=\"token function\">install</span> epel-release\n<span class=\"token function\">sudo</span> yum <span class=\"token function\">install</span> cmake3</code></pre>\n\n<p>安装tesseract</p>\n<pre class=\"language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\"># 搜索「tesseract」</span>\nyum search tesseract\n\n<span class=\"token comment\">#安装「tesseract.x86_64」</span>\nyum <span class=\"token function\">install</span> tesseract.x86_64 tesseract-devel.x86_64 \n\n<span class=\"token comment\">#安装「tesseract-langpack-chi_sim.noarch」中文字库</span>\nyum <span class=\"token function\">install</span> tesseract-langpack-chi_sim.noarch\n\n<span class=\"token comment\">#检查「tesseract」支持的语言</span>\ntesseract --list-langs</code></pre>\n\n<h3 id=\"ubuntu系统\"><a href=\"#ubuntu系统\" class=\"headerlink\" title=\"ubuntu系统\"></a>ubuntu系统</h3><pre class=\"language-none\"><code class=\"language-none\">$ sudo apt-get update\n$ sudo apt-get upgrade\n$ sudo apt-get install build-essential cmake unzip pkg-config\n$ sudo apt-get install libjpeg-dev libpng-dev libtiff-dev\n$ sudo apt-get install libavcodec-dev libavformat-dev libswscale-dev\n$ sudo apt-get install libv4l-dev libxvidcore-dev libx264-dev\n$ sudo apt-get install libgtk-3-dev\n$ sudo apt-get install libatlas-base-dev gfortran\n$ sudo apt-get install python3-dev</code></pre>\n\n<h3 id=\"安装numpy\"><a href=\"#安装numpy\" class=\"headerlink\" title=\"安装numpy\"></a>安装numpy</h3><pre class=\"language-none\"><code class=\"language-none\"># 执行这一步之前，激活你要使用的python虚拟环境\npip install numpy</code></pre>\n\n<h2 id=\"四、执行cmake\"><a href=\"#四、执行cmake\" class=\"headerlink\" title=\"四、执行cmake\"></a>四、执行cmake</h2><pre class=\"language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\"># 进入opencv的解压目录</span>\n<span class=\"token builtin class-name\">cd</span> ~/opencv-4.4.0\n\n<span class=\"token comment\"># 创建构建目录build（这里build目录名称随意）</span>\n<span class=\"token function\">mkdir</span> build\n<span class=\"token builtin class-name\">cd</span> build\n\n<span class=\"token comment\"># 执行cmake</span>\n<span class=\"token comment\"># 这里一些参数的配置一定要仔细再仔细</span>\n<span class=\"token comment\"># 我的参数配置如下</span>\n<span class=\"token comment\"># centos系统如果提示cmake版本不够，这里输入cmake3</span>\ncmake <span class=\"token parameter variable\">-D</span> <span class=\"token assign-left variable\">CMAKE_BUILD_TYPE</span><span class=\"token operator\">=</span>RELEASE <span class=\"token punctuation\">\\</span>\n        <span class=\"token parameter variable\">-D</span> <span class=\"token assign-left variable\">CMAKE_INSTALL_PREFIX</span><span class=\"token operator\">=</span>/usr/local <span class=\"token punctuation\">\\</span>\n        <span class=\"token parameter variable\">-D</span> <span class=\"token assign-left variable\">INSTALL_PYTHON_EXAMPLES</span><span class=\"token operator\">=</span>ON <span class=\"token punctuation\">\\</span>\n        <span class=\"token parameter variable\">-D</span> <span class=\"token assign-left variable\">INSTALL_C_EXAMPLES</span><span class=\"token operator\">=</span>OFF <span class=\"token punctuation\">\\</span>\n        <span class=\"token parameter variable\">-D</span> <span class=\"token assign-left variable\">OPENCV_ENABLE_NONFREE</span><span class=\"token operator\">=</span>ON <span class=\"token punctuation\">\\</span>\n        <span class=\"token parameter variable\">-D</span> <span class=\"token assign-left variable\">WITH_CUDA</span><span class=\"token operator\">=</span>ON <span class=\"token punctuation\">\\</span>\n        <span class=\"token parameter variable\">-D</span> <span class=\"token assign-left variable\">WITH_CUDNN</span><span class=\"token operator\">=</span>ON <span class=\"token punctuation\">\\</span>\n        <span class=\"token parameter variable\">-D</span> <span class=\"token assign-left variable\">OPENCV_DNN_CUDA</span><span class=\"token operator\">=</span>ON <span class=\"token punctuation\">\\</span>\n        <span class=\"token parameter variable\">-D</span> <span class=\"token assign-left variable\">ENABLE_FAST_MATH</span><span class=\"token operator\">=</span><span class=\"token number\">1</span> <span class=\"token punctuation\">\\</span>\n        <span class=\"token parameter variable\">-D</span> <span class=\"token assign-left variable\">CUDA_FAST_MATH</span><span class=\"token operator\">=</span><span class=\"token number\">1</span> <span class=\"token punctuation\">\\</span>\n        <span class=\"token parameter variable\">-D</span> <span class=\"token assign-left variable\">CUDA_ARCH_BIN</span><span class=\"token operator\">=</span><span class=\"token number\">8.6</span> <span class=\"token punctuation\">\\</span>\n        <span class=\"token parameter variable\">-D</span> <span class=\"token assign-left variable\">WITH_CUBLAS</span><span class=\"token operator\">=</span><span class=\"token number\">1</span> <span class=\"token punctuation\">\\</span>\n        <span class=\"token parameter variable\">-D</span> <span class=\"token assign-left variable\">OPENCV_EXTRA_MODULES_PATH</span><span class=\"token operator\">=~</span>/opencv_contrib-4.4.0/modules <span class=\"token punctuation\">\\</span>\n        <span class=\"token parameter variable\">-D</span> <span class=\"token assign-left variable\">HAVE_opencv_python3</span><span class=\"token operator\">=</span>ON <span class=\"token punctuation\">\\</span>\n        <span class=\"token parameter variable\">-D</span> <span class=\"token assign-left variable\">PYTHON_EXECUTABLE</span><span class=\"token operator\">=</span>/usr/local/bin/python3 <span class=\"token punctuation\">\\</span>\n        <span class=\"token parameter variable\">-D</span> <span class=\"token assign-left variable\">BUILD_EXAMPLES</span><span class=\"token operator\">=</span>ON <span class=\"token punctuation\">..</span>\n       <span class=\"token punctuation\">..</span></code></pre>\n<p>详细解释一下命令中各个参数选取的注意事项：</p>\n<blockquote>\n<ol>\n<li>OPENCV_EXTRA_MODULES_PATH，翻译过来就是opencv额外模块路径，这个模块就是我们下载的Contrib模块。所以这项参数填写你的opencv_contrib目录下modules文件夹的路径。如果你是按照上面的教程走的，那么它现在应该在你的用户主目录下：~&#x2F;opencv_contrib-4.4.0&#x2F;modules。</li>\n<li>PYTHON_EXECUTABLE，python虚拟环境路径，它需要指向你的环境中python的可执行文件。若是anaconda的虚拟环境，它一般在虚拟环境目录下的bin目录下：~&#x2F;anaconda3&#x2F;envs&#x2F;mouse&#x2F;bin&#x2F;python3.9,或者是系统的python3：&#x2F;usr&#x2F;local&#x2F;bin&#x2F;python3(不建议，我虽然是这么做的，但是我是在docker镜像内操作，系统本身的python关系到系统的运行，比较危险，如果实在要用，可以安装一下其他版本的python，用其他版本来操作)<br>python版本可能很多，指定你所需版本的python可执行文件。</li>\n<li>CUDA_ARCH_BIN，这里指的是你的cuda版本对应的算力级别。去<a href=\"https://developer.nvidia.com/cuda-gpus#collapseOne\">cuda官网</a>查看一下。组内服务器的显卡是3090，cuda版本我装的是11.1，官网上写着对应的算力级别为8.6，所以这里填8.6。</li>\n<li>命令最后两个点不能落下，这两个点代表相对路径。</li>\n</ol>\n</blockquote>\n<p>以上是实际应用中需要自己确定的问题，其他的按照我写的命令复制即可。<br>我在执行cmake的时候报了一些错误，很多个failed，但是实际使用并没什么问题。<br>如果你执行命令之后，发现你的cmake参数配置有错误，那么你需要删除build目录重新执行这一步骤。</p>\n<p><strong>在执行下一步之前，你需要检查cmake的输出，有个至关重要的点：</strong><br>检查cmake输出中有没有这个模块：</p>\n<pre class=\"language-none\"><code class=\"language-none\">--   Python 3:\n--     Interpreter:                 &#x2F;usr&#x2F;local&#x2F;bin&#x2F;python3 (ver 3.9.16)\n--     Libraries:                   &#x2F;usr&#x2F;local&#x2F;lib&#x2F;libpython3.9.so (ver 3.9.16)\n--     numpy:                       &#x2F;usr&#x2F;local&#x2F;lib&#x2F;python3.9&#x2F;site-packages&#x2F;numpy&#x2F;core&#x2F;include (ver 1.24.2)\n--     install path:                lib&#x2F;python3.9&#x2F;site-packages&#x2F;cv2&#x2F;python-3.9</code></pre>\n<p>如果没有这一块，没必要往下走了，因为安装完也没有用。你需要检查你的python环境是否具有python3的条件。<br>这里输出的<code>install path</code>后面要用到，先记下来。</p>\n<p>其他的信息你可以检查一下你配置是否正确，例如下面：</p>\n<pre class=\"language-none\"><code class=\"language-none\">NVIDIA CUDA:                   YES (ver 11.1, CUFFT CUBLAS FAST_MATH)\n  NVIDIA GPU arch:             86\n  NVIDIA PTX archs:\n  \ncuDNN:                         YES (ver 8.7.0)</code></pre>\n\n<h2 id=\"五、安装\"><a href=\"#五、安装\" class=\"headerlink\" title=\"五、安装\"></a>五、安装</h2><pre class=\"language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">make</span> -j<span class=\"token variable\"><span class=\"token variable\">$(</span>nproc<span class=\"token variable\">)</span></span></code></pre>\n<p>安装过程中也会踩很多很多很多很多很多的陨石坑，在这里记录一下（本人被折磨的不轻）</p>\n<h3 id=\"1-Unsupported-gpu-architecture-‘compute-30’\"><a href=\"#1-Unsupported-gpu-architecture-‘compute-30’\" class=\"headerlink\" title=\"1.Unsupported gpu architecture ‘compute_30’\"></a>1.Unsupported gpu architecture ‘compute_30’</h3><p>翻译过来就是gpu算力不支持，说明你在cmake的CUDA_ARCH_BIN设置和你的显卡和cuda不匹配，去<a href=\"https://developer.nvidia.com/cuda-gpus#collapseOne\">cuda官网</a>找你的显卡对应的算力。</p>\n<h3 id=\"2-error-“OpenCV-4-x-requires-enabled-C-11-support”\"><a href=\"#2-error-“OpenCV-4-x-requires-enabled-C-11-support”\" class=\"headerlink\" title=\"2.# error “OpenCV 4.x+ requires enabled C++11 support”\"></a>2.# error “OpenCV 4.x+ requires enabled C++11 support”</h3><p>这句话意思是opencv4以上的版本需要c++11才可以编译。<br>所以这里我去看一下gcc的版本，看看支不支持c++11.<br>gcc的版本是4.8.5，按理说应该是支持c++11的，但是这里编译就是过不了。<br>网络上的解决办法是在编译的时候加上<code>-std=c++11</code>这个选项。<br>但是编译语句都是cmake自动生成的，那么多语句，要找到猴年马月。<br>一度怀疑人生。</p>\n<p>后来我仔细看了下报错信息，发现在之前还有这样一句话：<br><code>nvcc warning : The -std=c++14 flag is not supported with the configured host compiler. Flag will be ignored. </code><br>这句话后面几行才打出<code># error &quot;OpenCV 4.x+ requires enabled C++11 support&quot;</code>这句话，那么说明根源在上面那句。</p>\n<p>这句话的意思是，编译选项<code>-std=c++14</code>不支持，所以该选项被忽略。<br>说明编译语句中写的是<code>-std=c++14</code>，而不是<code>-std=c++11</code>，说明尽管gcc4.8.5支持c++11，它还是没有办法去调用，因为编译语句没有指定。<br>那么从根源解决问题，升高gcc版本，让它支持c++14，该问题才能得到解决。</p>\n<p>所以我把gcc版本升级到了9.3.0，该错误消失了。</p>\n<p>真好啊，ctmd，浪费老子半天。</p>\n<p>gcc安装教程参考博客<a href=\"https://blog.csdn.net/zblock0/article/details/107032359\">https://blog.csdn.net/zblock0/article/details/107032359</a></p>\n<h3 id=\"3-fatal-error-boostdesc-bgm-i-no-such-file-or-directory\"><a href=\"#3-fatal-error-boostdesc-bgm-i-no-such-file-or-directory\" class=\"headerlink\" title=\"3. fatal error: boostdesc_bgm.i:no such file or directory\"></a>3. fatal error: boostdesc_bgm.i:no such file or directory</h3><p>说明缺少一些依赖文件。文件在文章开始的百度网盘提供了。把所有的.i文件复制到opencv_contrib&#x2F;modules&#x2F;xfeatures2d&#x2F;src&#x2F;目录下即可。</p>\n<h3 id=\"4-fatal-error-features2d-x2F-test-x2F-test-detectors-regression-impl-hpp-no-such-file-or-directory\"><a href=\"#4-fatal-error-features2d-x2F-test-x2F-test-detectors-regression-impl-hpp-no-such-file-or-directory\" class=\"headerlink\" title=\"4. fatal error: features2d&#x2F;test&#x2F;test_detectors_regression.impl.hpp:no such file or directory\"></a>4. fatal error: features2d&#x2F;test&#x2F;test_detectors_regression.impl.hpp:no such file or directory</h3><p>依旧是缺少文件，这个文件在opencv的modules目录下其实已经提供了，是路径的问题。所以复制一下：<br><code>cp -r ../modules/features2d ./</code></p>\n<p>所有这种缺少文件的报错，都可以去找一下这个文件的名字，如果在opencv或者contrib中提供了，复制过去就好。</p>\n<h3 id=\"5-CMakeFiles-x2F-example-gpu-surf-keypoint-matcher-dir-x2F-surf-keypoint-matcher-cpp-o-In-function-96-main’\"><a href=\"#5-CMakeFiles-x2F-example-gpu-surf-keypoint-matcher-dir-x2F-surf-keypoint-matcher-cpp-o-In-function-96-main’\" class=\"headerlink\" title=\"5.CMakeFiles&#x2F;example_gpu_surf_keypoint_matcher.dir&#x2F;surf_keypoint_matcher.cpp.o: In function &#96;main’\"></a>5.CMakeFiles&#x2F;example_gpu_surf_keypoint_matcher.dir&#x2F;surf_keypoint_matcher.cpp.o: In function &#96;main’</h3><p>完整报错信息如下：</p>\n<pre class=\"language-none\"><code class=\"language-none\">CMakeFiles&#x2F;example_gpu_surf_keypoint_matcher.dir&#x2F;surf_keypoint_matcher.cpp.o: In function &#96;main&#39;:\nsurf_keypoint_matcher.cpp:(.text.startup.main+0x352): undefined reference to &#96;cv::cuda::SURF_CUDA::SURF_CUDA()&#39;\nsurf_keypoint_matcher.cpp:(.text.startup.main+0x579): undefined reference to &#96;cv::cuda::SURF_CUDA::operator()(cv::cuda::GpuMat const&amp;, cv::cuda::GpuMat const&amp;, cv::cuda::GpuMat&amp;, cv::cuda::GpuMat&amp;, bool)&#39;\nsurf_keypoint_matcher.cpp:(.text.startup.main+0x60d): undefined reference to &#96;cv::cuda::SURF_CUDA::operator()(cv::cuda::GpuMat const&amp;, cv::cuda::GpuMat const&amp;, cv::cuda::GpuMat&amp;, cv::cuda::GpuMat&amp;, bool)&#39;\nsurf_keypoint_matcher.cpp:(.text.startup.main+0x6af): undefined reference to &#96;cv::cuda::SURF_CUDA::defaultNorm() const&#39;\nsurf_keypoint_matcher.cpp:(.text.startup.main+0x7ca): undefined reference to &#96;cv::cuda::SURF_CUDA::downloadKeypoints(cv::cuda::GpuMat const&amp;, std::vector&lt;cv::KeyPoint, std::allocator&lt;cv::KeyPoint&gt; &gt;&amp;)&#39;\nsurf_keypoint_matcher.cpp:(.text.startup.main+0x7ea): undefined reference to &#96;cv::cuda::SURF_CUDA::downloadKeypoints(cv::cuda::GpuMat const&amp;, std::vector&lt;cv::KeyPoint, std::allocator&lt;cv::KeyPoint&gt; &gt;&amp;)&#39;\nsurf_keypoint_matcher.cpp:(.text.startup.main+0x800): undefined reference to &#96;cv::cuda::SURF_CUDA::downloadDescriptors(cv::cuda::GpuMat const&amp;, std::vector&lt;float, std::allocator&lt;float&gt; &gt;&amp;)&#39;\nsurf_keypoint_matcher.cpp:(.text.startup.main+0x812): undefined reference to &#96;cv::cuda::SURF_CUDA::downloadDescriptors(cv::cuda::GpuMat const&amp;, std::vector&lt;float, std::allocator&lt;float&gt; &gt;&amp;)&#39;\ncollect2: error: ld returned 1 exit status\nsamples&#x2F;gpu&#x2F;CMakeFiles&#x2F;example_gpu_surf_keypoint_matcher.dir&#x2F;build.make:132: recipe for target &#39;bin&#x2F;example_gpu_surf_keypoint_matcher&#39; failed\nmake[2]: *** [bin&#x2F;example_gpu_surf_keypoint_matcher] Error 1</code></pre>\n<p>解决方法：<br>先去你的build目录下找到这个文件:<br><code>&lt;build_dir&gt;/samples/gpu/CMakeFiles/example_gpu_surf_keypoint_matcher.dir/link.txt</code><br>在这个文件里，搜索到<code>--as-needed CMakeFiles/example_gpu_surf_keypoint_matcher.dir/surf_keypoint_matcher.cpp.o</code>这一句之后加上<code>&lt;build_dir&gt;/modules/xfeatures2d/CMakeFiles/opencv_xfeatures2d.dir/src/surf.cuda.cpp.o &lt;build_dir&gt;/modules/xfeatures2d/CMakeFiles/cuda_compile_1.dir/src/cuda/cuda_compile_1_generated_surf.cu.o</code><br>其中，<build_dir>是你的构建路径，也就是第四步中创建的build文件夹。</p>\n<h3 id=\"6-libopencv-imgcodecs-so-4-2-0-undefined-reference-to-96-x54-x49-70-70-x52-101-97-x64-82-71-66-65-x53-x74-114-x69-x70-x40-x4c-73-66-x54-x49-x46-x46-95-x34-46-48\"><a href=\"#6-libopencv-imgcodecs-so-4-2-0-undefined-reference-to-96-x54-x49-70-70-x52-101-97-x64-82-71-66-65-x53-x74-114-x69-x70-x40-x4c-73-66-x54-x49-x46-x46-95-x34-46-48\" class=\"headerlink\" title=\"6.libopencv_imgcodecs.so.4.2.0: undefined reference to &#96;&#x54;&#x49;&#70;&#70;&#x52;&#101;&#97;&#x64;&#82;&#71;&#66;&#65;&#x53;&#x74;&#114;&#x69;&#x70;&#x40;&#x4c;&#73;&#66;&#x54;&#x49;&#x46;&#x46;&#95;&#x34;&#46;&#48;\"></a>6.libopencv_imgcodecs.so.4.2.0: undefined reference to &#96;<a href=\"mailto:&#x54;&#x49;&#70;&#70;&#x52;&#101;&#97;&#x64;&#82;&#71;&#66;&#65;&#x53;&#x74;&#114;&#x69;&#x70;&#x40;&#x4c;&#73;&#66;&#x54;&#x49;&#x46;&#x46;&#95;&#x34;&#46;&#48;\">&#x54;&#x49;&#70;&#70;&#x52;&#101;&#97;&#x64;&#82;&#71;&#66;&#65;&#x53;&#x74;&#114;&#x69;&#x70;&#x40;&#x4c;&#73;&#66;&#x54;&#x49;&#x46;&#x46;&#95;&#x34;&#46;&#48;</a></h3><p>完整报错信息：<br> <pre class=\"language-none\"><code class=\"language-none\">&#x2F;usr&#x2F;local&#x2F;lib&#x2F;libopencv_imgcodecs.so.4.2.0: undefined reference to &#96;TIFFReadRGBAStrip@LIBTIFF_4.0&#39;\n&#x2F;usr&#x2F;local&#x2F;lib&#x2F;libopencv_imgcodecs.so.4.2.0: undefined reference to &#96;TIFFReadDirectory@LIBTIFF_4.0&#39;\n&#x2F;usr&#x2F;local&#x2F;lib&#x2F;libopencv_imgcodecs.so.4.2.0: undefined reference to &#96;TIFFWriteEncodedStrip@LIBTIFF_4.0&#39;\n&#x2F;usr&#x2F;local&#x2F;lib&#x2F;libopencv_imgcodecs.so.4.2.0: undefined reference to &#96;TIFFIsTiled@LIBTIFF_4.0&#39;\n&#x2F;usr&#x2F;local&#x2F;lib&#x2F;libopencv_imgcodecs.so.4.2.0: undefined reference to &#96;TIFFWriteScanline@LIBTIFF_4.0&#39;\n&#x2F;usr&#x2F;local&#x2F;lib&#x2F;libopencv_imgcodecs.so.4.2.0: undefined reference to &#96;TIFFGetField@LIBTIFF_4.0&#39;\n&#x2F;usr&#x2F;local&#x2F;lib&#x2F;libopencv_imgcodecs.so.4.2.0: undefined reference to &#96;TIFFScanlineSize@LIBTIFF_4.0&#39;\n&#x2F;usr&#x2F;local&#x2F;lib&#x2F;libopencv_imgcodecs.so.4.2.0: undefined reference to &#96;TIFFWriteDirectory@LIBTIFF_4.0&#39;\n&#x2F;usr&#x2F;local&#x2F;lib&#x2F;libopencv_imgcodecs.so.4.2.0: undefined reference to &#96;TIFFReadEncodedTile@LIBTIFF_4.0&#39;\n&#x2F;usr&#x2F;local&#x2F;lib&#x2F;libopencv_imgcodecs.so.4.2.0: undefined reference to &#96;TIFFReadRGBATile@LIBTIFF_4.0&#39;\n&#x2F;usr&#x2F;local&#x2F;lib&#x2F;libopencv_imgcodecs.so.4.2.0: undefined reference to &#96;TIFFClose@LIBTIFF_4.0&#39;\n&#x2F;usr&#x2F;local&#x2F;lib&#x2F;libopencv_imgcodecs.so.4.2.0: undefined reference to &#96;TIFFClientOpen@LIBTIFF_4.0&#39;\n&#x2F;usr&#x2F;local&#x2F;lib&#x2F;libopencv_imgcodecs.so.4.2.0: undefined reference to &#96;TIFFRGBAImageOK@LIBTIFF_4.0&#39;\n&#x2F;usr&#x2F;local&#x2F;lib&#x2F;libopencv_imgcodecs.so.4.2.0: undefined reference to &#96;TIFFOpen@LIBTIFF_4.0&#39;\n&#x2F;usr&#x2F;local&#x2F;lib&#x2F;libopencv_imgcodecs.so.4.2.0: undefined reference to &#96;TIFFReadEncodedStrip@LIBTIFF_4.0&#39;\n&#x2F;usr&#x2F;local&#x2F;lib&#x2F;libopencv_imgcodecs.so.4.2.0: undefined reference to &#96;TIFFSetField@LIBTIFF_4.0&#39;\n&#x2F;usr&#x2F;local&#x2F;lib&#x2F;libopencv_imgcodecs.so.4.2.0: undefined reference to &#96;TIFFSetWarningHandler@LIBTIFF_4.0&#39;\n&#x2F;usr&#x2F;local&#x2F;lib&#x2F;libopencv_imgcodecs.so.4.2.0: undefined reference to &#96;TIFFSetErrorHandler@LIBTIFF_4.0</code></pre></p>\n<p> 库引用的问题，从报错信息中可以看到是<code>libopencv_imgcodecs.so.4.2.0</code>这个库引用不到一个名字含有<code>TIFF</code>的库。<br> 首先你要检查依赖：<code>libtiff-dev</code>是否正确安装。<br> 如果正确安装后还是出现这个问题，那么可能是你的python环境下没有这个库，你需要复制一份到你的python环境下。<br> 具体操作如下：</p>\n<pre class=\"language-none\"><code class=\"language-none\"># 先查看报错信息，发现是&#96;&#96;&#96;&#x2F;usr&#x2F;local&#x2F;lib&#x2F;libopencv_imgcodecs.so.4.2.0&#96;&#96;&#96;库引用不到其他库\n# 查看这个库的依赖\nldd &#x2F;usr&#x2F;local&#x2F;lib&#x2F;libopencv_imgcodecs.so.4.2.0\n\n# 输出如下\nlinux-vdso.so.1 &#x3D;&gt;  (0x00007ffdc29f5000)\n      libopencv_imgproc.so.4.2 &#x3D;&gt; &#x2F;usr&#x2F;local&#x2F;lib&#x2F;libopencv_imgproc.so.4.2 (0x00007fc9c680c000)\n      libjpeg.so.8 &#x3D;&gt; &#x2F;usr&#x2F;lib&#x2F;x86_64-linux-gnu&#x2F;libjpeg.so.8 (0x00007fc9c65b3000)\n      libpng12.so.0 &#x3D;&gt; &#x2F;lib&#x2F;x86_64-linux-gnu&#x2F;libpng12.so.0 (0x00007fc9c638e000)\n      libtiff.so.5 &#x3D;&gt; &#x2F;usr&#x2F;lib&#x2F;x86_64-linux-gnu&#x2F;libtiff.so.5 (0x00007fc9c6119000)\n      libjasper.so.1 &#x3D;&gt; &#x2F;usr&#x2F;lib&#x2F;x86_64-linux-gnu&#x2F;libjasper.so.1 (0x00007fc9c5ec4000)\n      libIlmImf-2_2.so.22 &#x3D;&gt; &#x2F;usr&#x2F;lib&#x2F;x86_64-linux-gnu&#x2F;libIlmImf-2_2.so.22 (0x00007fc9c59f5000)\n      libopencv_core.so.4.2 &#x3D;&gt; &#x2F;usr&#x2F;local&#x2F;lib&#x2F;libopencv_core.so.4.2 (0x00007fc9c5318000)\n      libstdc++.so.6 &#x3D;&gt; &#x2F;usr&#x2F;lib&#x2F;x86_64-linux-gnu&#x2F;libstdc++.so.6 (0x00007fc9c4f96000)\n      libm.so.6 &#x3D;&gt; &#x2F;lib&#x2F;x86_64-linux-gnu&#x2F;libm.so.6 (0x00007fc9c4c8d000)\n      libgcc_s.so.1 &#x3D;&gt; &#x2F;lib&#x2F;x86_64-linux-gnu&#x2F;libgcc_s.so.1 (0x00007fc9c4a77000)\n      libpthread.so.0 &#x3D;&gt; &#x2F;lib&#x2F;x86_64-linux-gnu&#x2F;libpthread.so.0 (0x00007fc9c485a000)\n      libc.so.6 &#x3D;&gt; &#x2F;lib&#x2F;x86_64-linux-gnu&#x2F;libc.so.6 (0x00007fc9c4490000)\n      libz.so.1 &#x3D;&gt; &#x2F;usr&#x2F;local&#x2F;lib&#x2F;libz.so.1 (0x00007fc9c4272000)\n      liblzma.so.5 &#x3D;&gt; &#x2F;lib&#x2F;x86_64-linux-gnu&#x2F;liblzma.so.5 (0x00007fc9c4050000)\n      libjbig.so.0 &#x3D;&gt; &#x2F;usr&#x2F;lib&#x2F;x86_64-linux-gnu&#x2F;libjbig.so.0 (0x00007fc9c3e42000)\n      libHalf.so.12 &#x3D;&gt; &#x2F;usr&#x2F;lib&#x2F;x86_64-linux-gnu&#x2F;libHalf.so.12 (0x00007fc9c3bff000)\n      libIex-2_2.so.12 &#x3D;&gt; &#x2F;usr&#x2F;lib&#x2F;x86_64-linux-gnu&#x2F;libIex-2_2.so.12 (0x00007fc9c39e1000)\n      libIlmThread-2_2.so.12 &#x3D;&gt; &#x2F;usr&#x2F;lib&#x2F;x86_64-linux-gnu&#x2F;libIlmThread-2_2.so.12 (0x00007fc9c37da000)\n      libdl.so.2 &#x3D;&gt; &#x2F;lib&#x2F;x86_64-linux-gnu&#x2F;libdl.so.2 (0x00007fc9c35d6000)\n      librt.so.1 &#x3D;&gt; &#x2F;lib&#x2F;x86_64-linux-gnu&#x2F;librt.so.1 (0x00007fc9c33ce000)\n      libGL.so.1 &#x3D;&gt; &#x2F;usr&#x2F;lib&#x2F;x86_64-linux-gnu&#x2F;mesa&#x2F;libGL.so.1 (0x00007fc9c315a000)\n      &#x2F;lib64&#x2F;ld-linux-x86-64.so.2 (0x00007fc9c73b1000)\n      libexpat.so.1 &#x3D;&gt; &#x2F;lib&#x2F;x86_64-linux-gnu&#x2F;libexpat.so.1 (0x00007fc9c2f31000)\n      libxcb-dri3.so.0 &#x3D;&gt; &#x2F;usr&#x2F;lib&#x2F;x86_64-linux-gnu&#x2F;libxcb-dri3.so.0 (0x00007fc9c2d2e000)\n      libxcb-present.so.0 &#x3D;&gt; &#x2F;usr&#x2F;lib&#x2F;x86_64-linux-gnu&#x2F;libxcb-present.so.0 (0x00007fc9c2b2b000)\n      libxcb-sync.so.1 &#x3D;&gt; &#x2F;usr&#x2F;lib&#x2F;x86_64-linux-gnu&#x2F;libxcb-sync.so.1 (0x00007fc9c2924000)\n      libxshmfence.so.1 &#x3D;&gt; &#x2F;usr&#x2F;lib&#x2F;x86_64-linux-gnu&#x2F;libxshmfence.so.1 (0x00007fc9c2721000)\n      libglapi.so.0 &#x3D;&gt; &#x2F;usr&#x2F;lib&#x2F;x86_64-linux-gnu&#x2F;libglapi.so.0 (0x00007fc9c24f0000)\n      libXext.so.6 &#x3D;&gt; &#x2F;usr&#x2F;lib&#x2F;x86_64-linux-gnu&#x2F;libXext.so.6 (0x00007fc9c22de000)\n      libXdamage.so.1 &#x3D;&gt; &#x2F;usr&#x2F;lib&#x2F;x86_64-linux-gnu&#x2F;libXdamage.so.1 (0x00007fc9c20db000)\n      libXfixes.so.3 &#x3D;&gt; &#x2F;usr&#x2F;lib&#x2F;x86_64-linux-gnu&#x2F;libXfixes.so.3 (0x00007fc9c1ed5000)\n      libX11-xcb.so.1 &#x3D;&gt; &#x2F;usr&#x2F;lib&#x2F;x86_64-linux-gnu&#x2F;libX11-xcb.so.1 (0x00007fc9c1cd3000)\n      libX11.so.6 &#x3D;&gt; &#x2F;usr&#x2F;lib&#x2F;x86_64-linux-gnu&#x2F;libX11.so.6 (0x00007fc9c1999000)\n      libxcb-glx.so.0 &#x3D;&gt; &#x2F;usr&#x2F;lib&#x2F;x86_64-linux-gnu&#x2F;libxcb-glx.so.0 (0x00007fc9c1780000)\n      libxcb-dri2.so.0 &#x3D;&gt; &#x2F;usr&#x2F;lib&#x2F;x86_64-linux-gnu&#x2F;libxcb-dri2.so.0 (0x00007fc9c157b000)\n      libxcb.so.1 &#x3D;&gt; &#x2F;usr&#x2F;lib&#x2F;x86_64-linux-gnu&#x2F;libxcb.so.1 (0x00007fc9c1359000)\n      libXxf86vm.so.1 &#x3D;&gt; &#x2F;usr&#x2F;lib&#x2F;x86_64-linux-gnu&#x2F;libXxf86vm.so.1 (0x00007fc9c1153000)\n      libdrm.so.2 &#x3D;&gt; &#x2F;usr&#x2F;lib&#x2F;x86_64-linux-gnu&#x2F;libdrm.so.2 (0x00007fc9c0f41000)\n      libXau.so.6 &#x3D;&gt; &#x2F;usr&#x2F;lib&#x2F;x86_64-linux-gnu&#x2F;libXau.so.6 (0x00007fc9c0d3d000)\n      libXdmcp.so.6 &#x3D;&gt; &#x2F;usr&#x2F;lib&#x2F;x86_64-linux-gnu&#x2F;libXdmcp.so.6 (0x00007fc9c0b37000)\n\n# 你需要在这些依赖中找到报错信息中找不到的那个库。\n# 这个库在这里：\nlibtiff.so.5 &#x3D;&gt; &#x2F;usr&#x2F;lib&#x2F;x86_64-linux-gnu&#x2F;libtiff.so.5 (0x00007fc9c6119000)\n\n# 把这个库复制到你的python环境下：\nsudo cp &#x2F;usr&#x2F;lib&#x2F;x86_64-linux-gnu&#x2F;libtiff.so.5 &#x2F;usr&#x2F;local&#x2F;lib&#x2F;libtiff.so.5</code></pre>\n\n<p>不出意外的话应该是没什么其他的问题了。</p>\n<p>make完成后，执行：</p>\n<pre class=\"language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> <span class=\"token function\">make</span> <span class=\"token function\">install</span></code></pre>\n\n<h2 id=\"六、链接动态库\"><a href=\"#六、链接动态库\" class=\"headerlink\" title=\"六、链接动态库\"></a>六、链接动态库</h2><p>安装完成后，在之前cmake输出的python3 <code>install path</code>路径下，会出现一个库：<br>我之前这里输出的<code>install path = lib/python3.9/site-packages/cv2/python-3.9</code>，在这个路径前加上安装前缀<code>CMAKE_INSTALL_PREFIX=/usr/local</code></p>\n<pre class=\"language-none\"><code class=\"language-none\">ls -l &#x2F;usr&#x2F;local&#x2F;lib&#x2F;python3.9&#x2F;site-packages&#x2F;cv2&#x2F;python-3.9\n\n\n总计 9540\n-rw-r--r-- 1 root root 9768648  5月  4 17:51 cv2.cpython-39-x86_64-linux-gnu.so\n</code></pre>\n<p>把这个库连接到你的python环境下：</p>\n<pre class=\"language-none\"><code class=\"language-none\">cd &#x2F;usr&#x2F;local&#x2F;lib&#x2F;python3.9&#x2F;site-packages #这里要看你自己的python环境路径，我是使用的系统的python，所以库直接生成在了我需要的python环境下，这一步对我其实可以省略\nln -s &#x2F;usr&#x2F;local&#x2F;lib&#x2F;python3.9&#x2F;site-packages&#x2F;cv2&#x2F;python3.9&#x2F;cv2.cpython-39-x86_64-linux-gnu.so cv2.so</code></pre>\n\n\n<h2 id=\"测试\"><a href=\"#测试\" class=\"headerlink\" title=\"测试\"></a>测试</h2><pre class=\"language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\">#激活你安装了opencv的虚拟环境，如果你用的系统python，这一步不需要</span>\nconda activate mouse\n\n<span class=\"token comment\">#打开python</span>\npython\n\n<span class=\"token comment\">#测试</span>\n<span class=\"token function\">import</span> cv2\ncv2.__version__\n<span class=\"token comment\"># 输出：'4.4.0'</span></code></pre>"},{"title":"mysql 基础篇","date":"2024-04-06T13:16:56.000Z","_content":"\n\n## SQL分类\n\n1. DDL：数据定义语言\n\n   - CREATE\n   - ALTER\n   - DROP\n   - RENAME\n   - TRUNCATE\n\n2. DML：数据操作语言\n\n   - INSERT\n   - DELETE\n   - UPDATE\n   - SELECT\n\n3. DCL：数据控制语言\n\n   - COMMIT\n   - ROLLBACK\n   - SAVEPOINT\n   - GRANT\n   - REVOKE\n\n   \n\n## SELECT语句\n\n### 查询常量\n\n```SQL\nSELECT 19;\n\nSELECT 1+1 FROM DUAL;  # dual：伪表\n\nSELECT 0, 123, employee_id, last_name\nFROM employees;\n```\n\n### 查询所有字段\n\n```sql\nSELECT * FROM employees;\n```\n\n### 查询部分字段\n\n```sql\nSELECT employee_id, last_name, salary\nFROM employees;\n```\n\n### 列的别名\n\n```sql\n/*\n\t两种方式：\n\t1.列原名 别名，如下面语句的employee_id emp_id\n\t2.列原名 AS 别名，如下面语句中的last_name AS lname\n\t3.基于前两种方式，可以用双引号括起别名，用于别名有空格的情况，如下面语句的salary*12 “annual sal”，但不要使用单引号\n*/\nSELECT employee_id emp_id, last_name AS lname, salary*12 “annual sal”\nFROM employees;\n```\n\n### 去除重复行\n\n```sql\n# 正确用法\nSELECT \tDISTINCT department_id\nFROM employees;\n\n# 错误用法\nSELECT salary, DISTINCT department_id\nFROM employees;\n\n# 不会报错，department_id 和 salary 作为整体\nSELECT DISTINCT department_id， salary\nFROM employees;\n```\n\n### 空值参与运算\n\n```sql\n# 空值：null\n# null不等于0，'',’null'\n# null值参与运算， 结果一定也为空\n# 绩效比例commission_pct为null时，年工资也为null\nSELECT employee_id salary \"月工资\", salary * (1 + commission_pct) * 12 \"年工资\"\n\n# 把null当成0\nSELECT employee_id salary \"月工资\", salary * (1 + IFNULL(commission_pct, 0)) * 12 \"年工资\"\n```\n\n### 着重号 `\n\n```sql\n# 用于表名和关键字相同时\nSELECT * FROM ORDER;\nSELECT * FROM `order`;\n```\n\n### 过滤条件\n\n```sql\n# WHERE 紧跟在 FROM 子句后\n# WHERE 筛选后面的条件为1的数据， 0和NULL会被过滤\n# WHERE 不能使用类的别名\nSELECT * \nFROM employees\nWHERE last_name = 'King';\n```\n\n### 排序\n\n```sql\n# 如果没有使用排序，查询返回的数据默认按照添加数据的顺序\n# 使用ORDER BY对数据进行排序，升序ASC， 降序DESC，默认升序\n\n# 按照salary从高到低顺序显示员工信息\nSELECT employee_id, last_name, salary\nFROM employees\nORDER BY salary DESC;\n\n# 按照salary从低到高顺序显示员工信息\nSELECT employee_id, last_name, salary\nFROM employees\nORDER BY salary ASC; # ASC可以不写\n\nSELECT employee_id, last_name, salary\nFROM employees\nORDER BY salary;\n\n# 使用类的别名排序\nSELECT employee_id emp_id, last_name AS lname, salary*12 “annual sal”\nFROM employees;\nORDER BY annual_sal;\n\n# 二级排序\n# 显示员工信息，按照department_id降序排序，salary升序排序\nSELECT employee_id, last_name, salary\nFROM employees\nORDER BY department_id DESC, salary ASC;\n```\n\n### 分页\n\n```sql\n# 使用LIMIT使用分页操作\n# LIMIT 偏移量,条目数\n# LIMIT 0,20  表示偏移量为0，显示20条数据\n\nSELECT employee_id, last_name\nFROM employees\nLIMIT 0,20;\n\n# MySQL 8.0新特性\n# LIMIT 条目数 OFFSET 偏移量\nSELECT employee_id, last_name\nFROM employees\nLIMIT 20 OFFSET 0;\n```\n\n\n\n## 显示表结构\n\n```sql\nDESCRIBE employees;\nDESC employees;\n```\n\n## 运算符\n\n### 算术运算符\n\n+、-、*、/或DIV、%或MOD\n\n```sql\nSELECT 100 + '1' FROM DUAL; # 返回101， 会将字符串转换为数值\nSELECT 100 + 'a' FROM DUAL; # 返回100，将非数字字符串当作0\n\nSELECT 100/0 FROM DUAL; # 返回NULL\n```\n\n### 比较运算符\n\n比较结果为真返回1， 为假返回0， 其他情况返回NULL\n\n=  \t<=>（安全等于） \t<>（不等于） \t!=\t<\t<=\t>\t>=\n\n```sql\n# 两边都是字符串，按照ANSI进行比较\n# 两边都是数字，按照数值比较\n# 数字和字符串相比，会产生字符串的隐形转换\n# null参与运算返回null\nSELECT 1 = 2, 1 != 2,1 = '1',0 = 'A' FROM DUAL;# 返回0，1，1，1\nSELECT 'A' = 'A', 'A' = 'B' FROM DUAL;# 返回1，0\nSELECT 1 = NULL, NULL = NULL FROM DUAL;# 返回NULL, NULL\n\n# <=> 安全等于 在无NULL时等同于= ， 在有NULL时，两边都是NULL为1， 只有一个NULL为0\nSELECT 1 <=> NULL, NULL <=> NULL FROM DUAL;# 返回0，1\n\nSELECT employee_id, last_name, salary\nFROM employees;\nWHERE commission_pct <=> NULL;\n\nSELECT employee_id, last_name, salary\nFROM employees;\nWHERE NOT commission_pct <=> NULL;\n```\n\n### 非符号类型运算符\n\n```Sql\n# IS NULL / IS NOT NULL / ISNULL 判断字段是否为NULL\nSELECT employee_id, last_name, salary\nFROM employees;\nWHERE commission_pct IS NOT NULL;\n\n\n# LEAST() 求最小值/ GREATEST() 求最大值\nSELECT LEAST('A', 'B', 'E'), GREATEST('A', 'B', 'E') FROM DUAL; # 返回A  E\n\n# BETWEEN 条件一 AND 条件二  包含条件一和条件二,要求条件一为下界， 条件二为上界，不能交换\n# 查询工资在6000和8000的员工信息\nSELECT employee_id, last_name, salary\nFROM employees\nWHERE salary BETWEEN 6000 AND 8000;\n\nSELECT employee_id, last_name, salary\nFROM employees\nWHERE salary >= 6000 && SALARY <= 8000;\n\n# IN \\ NOT IN\n# 查询部门为10，20，30的员工信息\nSELECT last_name, salary, department_id\nFROM employees\nWHERE department_id = 10 OR department_id = 20 OR department_id = 30\n\nSELECT last_name, salary, department_id\nFROM employees\nWHERE department_id IN (10,20,30);\n\n# LIKE 模糊查询\n# 查询last_name中包含字符a的元素信息\nSELECT last_name, salary, department_id\nFROM employees\nWHERE last_name LIKE '%a%'; # '%'代表不确定个数的字符\n\n# 查询last_name中包含字符a和e的元素信息\nSELECT last_name, salary, department_id\nFROM employees\nWHERE last_name LIKE '%a%' AND last_name LIKE '%e%'; # '%'代表不确定个数的字符\n\n# 查询last_name中包含第二个字符是a的元素信息\nSELECT last_name, salary, department_id\nFROM employees\nWHERE last_name LIKE '_a%'; # '_'代表一个字符\n\n# 正则表达式\n# REGEXP \\ RLIKE: 正则表达式\nSELECT 'shlstart' REGEXP '^s','shlstart' REGEXP 't$','shlstart' REGEXP 'hk'\nFROM DUAL;\n```\n\n### 逻辑运算符\n\n! / NOT  \t&& / AND  \t || / OR   \tXOR（异或）\n\n\n\n## 多表查询\n\n### 等值连接和非等值连接\n\n```sql\n# 错误写法，缺少了连接条件，会出现笛卡尔积\nSELECT employee_id, department_name\nFROM employees, departments;\n\nSELECT employee_id, department_name\nFROM employees CROSS JOIN departments;\n\n# 正确写法\n# 等值连接\n# 如果查询语句中出现了多个表中都存在的字段，则必须指明字段所在的表\nSELECT employee_id, department_name,employees.department_id\nFROM employees, departments;\nWHERE employees.department_id = departments.department_id;\n\n\n# 给表起别名,起了别名必须用\nSELECT emp.employee_id, dept.department_name,emp.department_id\nFROM employees emp, departments dept;\nWHERE emp.department_id = dept.department_id;\n\n\n# 非等值连接\nSELECT last_name, salary, grade_level\nFROM employees e, job_grades\nWHERE e.`salary` BETWEEN j.`lowest_sal` AND j.`highest_sal`;\n```\n\n### 自连接和非自连接\n\n```sql\n# 自连接\n# 查询员工id、名称last_name及其上级id、名称\nSELECT emp.empployee_id, emp.last_name, man.employee_id, man.last_name\nFROM employees emp, employees man\nWHERE emp.manager_id = man.employee_id\n```\n\n### 内连接和外连接\n\n```sql\n# 内连接：合并具有同一列的两个以上的表的行，结果集中不包含一个表与另一个表不匹配的行\n# SQL92(MySQL不支持)实现内连接\nSELECT employee_id, department_name,employees.department_id\nFROM employees, departments;\nWHERE employees.department_id = departments.department_id;\n\n# SQL99实现外连接JOIN ON\nSELECT emp.last_name, dept.department_name\nFROM employees emp INNER JOIN departments dept\nON emp.department_id = dept.department_id;# INNER可以省略\n\n# 外连接：合并具有同一列的两个以上的表的行，结果集中不仅包含一个表与另一个表不匹配的行，还包含左表 或 右表中不匹配的行\n\n# 左外连接：合并具有同一列的两个以上的表的行，结果集中不仅包含一个表与另一个表不匹配的行，还包含左表中不匹配的行\n\n# 右外连接：合并具有同一列的两个以上的表的行，结果集中不仅包含一个表与另一个表不匹配的行，还包含右表中不匹配的行\n\n# 满外连接：合并具有同一列的两个以上的表的行，结果集中不仅包含一个表与另一个表不匹配的行，还包含左表 和 右表中不匹配的行\n\n\n# 左外连接\n# 查询所有员工的last_name和department_name\n# SQL92（MySQL不支持）语法实现外连接：使用+\nSELECT emp.last_name, dept.department_name\nFROM employees emp, departments dept\nWHERE emp.department_id = dept.department_id(+);\n\n# SQL99语法实现外连接：使用OUTER JOIN ON\nSELECT emp.last_name, dept.department_name\nFROM employees emp LEFT OUTER JOIN departments dept\nON emp.department_id = dept.department_id;# OUTER可以省略\n\n# 右外连接\n# SQL92（MySQL不支持）语法实现外连接：使用+\nSELECT emp.last_name, dept.department_name\nFROM employees emp, departments dept\nWHERE emp.department_id(+) = dept.department_id;\n\n# SQL99语法实现外连接：使用OUTER JOIN ON\nSELECT emp.last_name, dept.department_name\nFROM employees emp RIGHT OUTER JOIN departments dept\nON emp.department_id = dept.department_id;# OUTER可以省略\n\n# 满外连接\n# SQL99语法实现外连接：使用FULL OUTER JOIN ON\n# MySQL不支持FULL OUTER JOIN ON，满外连接使用UNION实现\nSELECT emp.last_name, dept.department_name\nFROM employees emp FULL OUTER JOIN departments dept\nON emp.department_id = dept.department_id;# OUTER可以省略\n```\n\nSQL99中实现七种JOIN操作的方法：\n\n![MySQL中七种JOIN实现](@JOIN.png)\n\n### UNION 和 UNION ALL的使用\n\n**UNION** 和 **UNION ALL**用于合并两个查询的结果集，取并集\n\n区别在于 **UNION** 会对结果集去重， 而 **UNION ALL** 不会去重\n\n因此 **UNION ALL** 速度更快，更推荐使用\n\n```sql\n# 使用 UNION 和 UNION ALL 实现满外连接\nSELECT e.employee_id, d.department_name\nFROM employees e LEFT JOIN departments d\nON e.employee_id = d.department_id\nUNION ALL\nSELECT e.employee_id, d.department_name\nFROM employees e RIGHT JOIN departments d\nON e.employee_id = d.department_id\nWHERE e.department_id IS NULL;\n\nSELECT e.employee_id, d.department_name\nFROM employees e LEFT JOIN departments d\nON e.employee_id = d.department_id\nWHERE d.department_id IS NULL;\nUNION ALL\nSELECT e.employee_id, d.department_name\nFROM employees e RIGHT JOIN departments d\nON e.employee_id = d.department_id\n```\n\n### SQL99新特性\n\n1. 自然连接\n\n   NATURAL JOIN表示自然连接，自然连接其实是等值连接，自动查询两张表中相同的字段进行等值连接\n\n   ```sql\n   # 自然连接\n   SELECT e.employee_id, d.department_name,e.department_id\n   FROM employees e, departments d;\n   WHERE e.department_id = d.department_id;\n   AND e.manager_id = d.manager_id;\n   \n   SELECT e.employee_id, d.department_name,e.department_id\n   FROM employees e NATURAL JOIN departments d;\n   \n   ```\n\n2. **USING**\n\n   用于替换连接条件\n\n   ```sql\n   SELECT e.employee_id, d.department_name,e.department_id\n   FROM employees e, departments d;\n   WHERE e.department_id = d.department_id;\n   \n   SELECT e.employee_id, d.department_name,e.department_id\n   FROM employees e, departments d;\n   USING (department_id); # 必须写两张表中同名的字段单行函数数的特点\n   \n   ```\n\n##  单行函数\n\n###  单行函数的特点\n\n- 操作数据对象\n- 接收参数返回一个结果\n- **只对一行进行变换**\n- **每行返回一个结果**\n- 可以嵌套\n- 参数可以是一列（字段）或一个值\n\n### 数值函数\n\n```sql\n/*\n\tABS(x):返回x的绝对值\n\tSIGN(x):符号函数，x大于0返回1，小于0返回-1，等于0返回0\n\tPI():返回圆周率的值\n\tCEIL(x), CEILING(x)：返回不小于x的最小整数\n\tFLOOR(x)：返回不大于x的最大整数\n\tMOD(x,y):返回x除以y的余数\n\tLEAST(e1,e2,e3...):返回列表中的最小值\n\tGREATEST(e1,e2,e3...):返回列表中的最大值\n\tRAND():返回0-1的随机数\n\tRAND(x):返回0-1的随机值，其中x为种子，相同的x会产生相同的随机数\n\tROUND(x):返回x四舍五入后的最接近x的整数\n\tROUND(x,y):返回x四舍五入后最接近x的值，并保留到小数点后面y位\n\tTRUNCATE(x,y):返回数字x截断为y位小数的结果\n\tSQRT(x):返回x的平方根，当x小于0时返回null\n\tPOW(x,y):返回x的y次方\n\tPOWER(x,y):返回x的y次方\n\tEXP(x):返回e的x次方\n\tLN(x):返回x的自然对数\n\tLOG(x):返回x的自然对数\n\tLOG10(x):返回以10为底x的对数\n\tLOG2(x):返回以2为底x的对数\n\t\n\t三角函数：默认弧度制\n\tSIN(x):正弦值\n\tASIN(x):反正弦值\n\tCOS(x):余弦值\n\tACOS(x):反余弦值\n\tTAN(x):正切值\n\tATAN(x):反正切值\n\tATAN2(x,y):返回两个参数的反正切值\n\tCOT(x):余切值\n\t\n\t角度与弧度互换函数\n\tRADIANS(x):将角度转化为弧度，其中，参数x为角度值\n\tDEGREES(x):将弧度转化为角度，其中，参数x为弧度制\n\t\n\t进制间的转换\n\tBIN(x):二进制\n\tHEX(x):十六进制\n\tOCT(x):八进制\n\tCONV(x, f1, f2):返回f1进制变成f2进制\n*/\n```\n\n### 字符串函数\n\n```sql\n/*\n    注意：字符串的索引是从1开始的！\n\n\tASCII(s):返回字符串s中的第一个字符的ASCII码\n\tCHAR_LENGTH(s):返回字符串s的字符数\n\tLENGTH(s):返回字符串s的字节数\n\tCONCAT(s1,s2,...,sn):连接s1,s2,...,sn为一个字符串\n\tCONCAT_WS(x,s1,s2,...,sn):同CONCAT(s1,s2,...,sn)函数，但是每个字符串之间要加上x\n\tINSERT(str, idx, len, replacestr):将字符串str从第idx位置开始，len个字符长的子串替换为字符串replacestr\n\tREPLACE(str,a,b):用字符串b替换字符串str中所有出现的字符串a\n\tUPPER(s) / UCASE(s):将字符串s中所有字母转成大写字母\n\tLOWER(s) / LCASE(s):将字符串s中所有字母转成小写字母\n\tLEFT(str,n):返回字符串str最左边的n个字符\n\tRIGHT(str,n):返回字符串str最右边的n个字符\n\tLPAD(str, len, pad):用字符串pad对str最左边进行填充，直到str长度为len个字符\n\tRPAD(str, len, pad):用字符串pad对str最右边进行填充，直到str长度为len个字符\n\tLTRIM(s):去掉字符串s左侧的空格\n\tRTRIM(s):去掉字符串s右侧的空格\n\tTRIM(s):去掉字符串s开头和结尾的空格\n\tTRIM(s1 FROM s):去掉字符串s开始与结尾的s1\n\tTRIM(LEADING s1 FROM s):去掉字符串s开始的s1\n\tTRIM(TRAILING s1 FROM s):去掉字符串s结尾的s1\n\tREPEAT(str, n):返回str重复n次的结果\n\tSPACE(n):返回n个空格\n\tSTRCMP(s1, s2):比较s1、s2的ASCII码的大小\n\tSUBSTR(s, index, len):返回从字符串s的index位置起n个字符， 作用与SUBSTRING(s,n,len),MID(s,n,len)相同\n\tLOCATE(substr, str):返回字符串substr在字符串str中首次出现的位置，作用与POSITION(substr In str),INSTR(str, substr)相同。未找到返回0\n\tELT(m, s1, s2, ..., sn):返回指定位置的字符串，如果m=1，则返回s1，如果m=2，则返回s2，如果m=n，则返回sn\n\tFIELD(s,s1,s2,...,sn):返回字符串s在字符串列表中第一次出现的位置\n\tFIND_IN_SET(s1,s2):返回字符串s1在字符串s2中出现的位置，其中s2是一个以逗号分隔的字符串\n\tREVERSE(s):返回s反转后的字符串\n\tNULLIF(value1, value2):比较两个字符串，如果value1和value2相等，则返回NULL，否则返回value1\n*/\n```\n\n### 日期函数\n\n```sql\n/*\n\t1.获取日期、时间\n\tCURDATE(),CURRENT_DATE():返回当前日期，只包含年月日，格式'yyyy-MM-dd'\n\tCURTIME(),CURRENT_TIME():返回当前时间，只包含时分秒，格式'HH:mm:ss'\n\tNOW()/SYSDATE()/CURRENT_TIMESTAMP()/LOCALTIME()/LOCALTIMESTAMP():返回当前系统日期和时间，格式'yyyy-MM-dd HH:mm:ss'\n\tUTC_DATE():返回UTC（世界标准时间）日期\n\tUTC_TIME():返回UTC（世界标准时间）时间\n\t\n\t2.日期和时间戳的转换\n\tUNIX_TIMESTAMP():以UNIX时间戳的形式返回当前时间\n\tUNIX_TIMESTAMP(date):将时间date以UNIX时间戳的形式返回\n\tFROM_UNIXTIME(timestamp):将UNIX时间戳的时间转换为普通格式的时间\n\t\n\t3.获取月份、星期、星期数、天数等函数\n\tYEAR(date)/MONTH(date)/DAY(date):返回具体的日期值\n\tHOUR(time)/MINUTE(time)/SECOND(time):返回具体的时间值\n\tMONTHNAME(date):返回月份：January...\n\tDAYNAME(date):返回星期几：MONDAY...\n\tWEEKDAY(date):返回周几，周一是0，周二是1，...，周日是6\n\tQUARTER(date):返回日期对应的季度，范围为1-4\n\tWEEK(date),WEEKOFYEAR(date):返回一年中的第几周\n\tDAYOFYEAR(date):返回日期是一年中的第几天\n\tDAYOFMONTH(date):返回日期位于所在月份的第几天\n\tDAYOFWEEK(date):返回周几，周一是1，周二是2，...，周日是7\n\t\n\t4.日期的操作函数\n\tEXTRACT(type FROM date):返回指定日期中特定的部分，type指定返回的值\n\ttype的取值如下：\n\tMICROSECOND:毫秒数\n\tSECOND:秒数\n\tMINUTE:分钟数\n\tHOUR:小时数\n\tDAY:天数\n\tWEEK:一年中的第几个星期\n\tMONTH:一年中的第几个月\n\tQUARTER:季度\n\tYEAR:年份\n\tSECOND_MICROSECOND:秒和毫秒值\n\t两个返回值的取值用下划线连接组合，如上面的SECOND_MICROSECOND。\n\t\n\t5.时间和秒钟的转换函数\n\tTIME_TO_SEC(time):将time转化为秒并返回结果值，转化的公式为：小时*3600+分钟*60+秒\n\tSEC_TO_TIME(seconds):将second描述转化为包含小时、分钟和秒的时间\n\t\n\t6.计算日期和时间的函数\n\tDATE_ADD(datetime, INTERVAL expr type):返回与给定日期时间相差INTERVAL时间段的日期时间\n\tDATE_SUB(date, INTERVAL expr type):返回与date相差INTERVAL时间间隔的日期\n\ttype的取值和EXTRACT函数一致，示例：DATE_ADD(NOW(), INTERVAL 1 YEAR),DATE_ADD(NOW(), INTERVAL -1 YEAR),DATE_ADD('2021-10-21 23:32:12', INTERVAL '1_1' YEAR_MONTH)\n\t\n\tADDTIME(time1, time2):返回time1加上time2的时间。当time2为一个数字时，代表的是秒，可以是负数\n\tSUBTIME(time1,time2):返回time1减去time2的时间。当time2为一个数字时，代表的是秒，可以是负数\n\tDATEDIFF(date1, date2):返回date1-date2的日期间隔天数\n\tTIMEDIFF(time1,time2):返回time1-time2的时间间隔\n\tFROM_DAYS(N):返回从0000年1月1日起，N天以后的日期\n\tTO_DAYS(date):返回日期距离0000年1月1日的天数\n\tLAST_DAY(date):返回date所在月份最后一天的日期\n\tMAKEDATE(year,n):针对给定年份和该年份中的天数返回一个日期\n\tMAKETIME(hour,minute,second):将给定的小时、分钟和秒合成时间并返回\n\tPERIOD_ADD(time,n):返回time加上n后的时间\n\t\n\t7.日期的格式化和解析\n\tDATE_FORMAT(date, fmt):按照字符串fmt格式化日期date值\n\tTIME_FORMAT(time, fmt):按照字符串fmt格式化时间time值\n\tGET_FORMAT(date_type, format_type):返回日期字符串的显示格式\n\tSTR_TO_DATE(str, fmt):按照字符串fmt对str进行解析，解析为一个日期\n\t\n\tfmt的格式：\n\t%S, %s 两位数字形式的秒（ 00,01, …, 59）\n    %I, %i 两位数字形式的分（ 00,01, …, 59）\n    %H 两位数字形式的小时，24 小时（00,01, …, 23）\n    %h 两位数字形式的小时，12 小时（01,02, …, 12）\n    %k 数字形式的小时，24 小时（0,1, …, 23）\n    %l 数字形式的小时，12 小时（1, 2, …, 12）\n    %T 24 小时的时间形式（hh:mm:ss）\n    %r 12 小时的时间形式（hh:mm:ss AM 或hh:mm:ss PM）\n    %p AM或PM\n    %W 一周中每一天的名称（Sunday, Monday, …, Saturday）\n    %a 一周中每一天名称的缩写（Sun, Mon, …, Sat）\n    %d 两位数字表示月中的天数（00, 01,…, 31）\n    %e 数字形式表示月中的天数（1, 2， …, 31）\n    %D 英文后缀表示月中的天数（1st, 2nd, 3rd,…）\n    %w 以数字形式表示周中的天数（ 0 = Sunday, 1=Monday, …, 6=Saturday）\n    %j 以三位数字表示年中的天数（ 001, 002, …, 366）\n    %U 周（0, 1, 52），其中Sunday 为周中的第一天\n    %u 周（0, 1, 52），其中Monday 为周中的第一天\n    %M 月名（January, February, …, December）\n    %b 缩写的月名（ January, February,…, December）\n    %m 两位数字表示的月份（01, 02, …, 12）\n    %c 数字表示的月份（1, 2, …, 12）\n    %Y 四位数字表示的年份\n    %y 两位数字表示的年份\n    %% 直接值“%”\n    \n    GET_FORMAT(date_type, format_type):返回日期字符串的显示格式:\n    GET_FORMAT(DATE,'USA')\t'%m.%d.%Y'\n    GET_FORMAT(DATE,'JIS')\t'%Y-%m-%d'\n    GET_FORMAT(DATE,'ISO')\t'%Y-%m-%d'\n    GET_FORMAT(DATE,'EUR')\t'%d.%m.%Y'\n    GET_FORMAT(DATE,'INTERNAL')\t'%Y%m%d'\n    GET_FORMAT(DATETIME,'USA')\t'%Y-%m-%d %H.%i.%s'\n    GET_FORMAT(DATETIME,'JIS')\t'%Y-%m-%d %H:%i:%s'\n    GET_FORMAT(DATETIME,'ISO')\t'%Y-%m-%d %H:%i:%s'\n    GET_FORMAT(DATETIME,'EUR')\t'%Y-%m-%d %H.%i.%s'\n    GET_FORMAT(DATETIME,'INTERNAL')\t'%Y%m%d%H%i%s'\n    GET_FORMAT(TIME,'USA')\t'%h:%i:%s %p'\n    GET_FORMAT(TIME,'JIS')\t'%H:%i:%s'\n    GET_FORMAT(TIME,'ISO')\t'%H:%i:%s'\n    GET_FORMAT(TIME,'EUR')\t'%H.%i.%s'\n    GET_FORMAT(TIME,'INTERNAL')\t'%H%i%s'\n*/\n```\n\n### 流程控制函数\n\n```sql\n/*\n\tIF(value, value1, value2):如果value的值为TRUE，返回value1，否则返回value2\n\tIFNULL(value1, value2):如果value1不为NULL，返回value1，否则返回value2\n\tCASE WHEN 条件1 THEN 结果1 WHEN 条件2 THEN 结果2 ... ELSE END  相当于if else\n\tCASE expr WHEN 常量值1 THEN 值1 WHEN 常量值2 THEN 值2 ... END  相当于switch case\n*/\n```\n\n### 加密与解密函数\n\n```sql\n/*\n\tPASSWORD(str):返回字符串str的加密版本，41位长的字符串。加密结果不可逆，常用于用户的密码加密（MySQL8.0中无法使用）\n\tMD5(str):返回字符串str的md5加密后的值，也是一种加密方式。若参数为NULL，则会返回NULL\n\tSHA(str):从原明文密码str计算并返回加密后的密码字符串，当参数为NULL时，返回NULL。SHA比MD5更安全。\n\tENCODE(value, password_seed):返回使用password_seed作为加密密码加密value\n\tDECODE(value, password_seed):返回使用password_seed作为加密密码解密value\n*/\n```\n\n### 其他函数\n\n```sql\n/*\n\tFORMAT(\tvalue, n):返回对数字value进行格式化后的结果数据。n表示四舍五入后保留小数点后n位\n\tCONV(value, from, to):将value的值进行不同进制之间的转换\n\tINET_ATON(ipvalue):将以点分隔的ip地址转化为一个数字\n\tINET_NTOA(value):将数字形式的ip地址转化为以点分隔的ip地址\n\tBENCHMARK(n, expr):将表达式expr重复执行n次，用于测试MySQL处理expr表达式所需要的时间\n\tCONVERT(value USING char_code):将value所使用的字符编码修改为char_code\n*/\n```\n\n## 多行函数\n\n### 多行函数的特征 \n\n- 对一组数据进行汇总\n- 输入是一组数据的集合\n- 输出是单个值\n- **不能嵌套使用！ **\n\n### 常用聚合函数\n\n```sql\n/*\n\tAVG(column):平均值，只适用于数值类型\n\tSUM(column):求和，只适用于数值类型\n\tMAX(column):最大值,可用于数值、字符串、日期类型\n\tMIN(column):最小值,可用于数值、字符串、日期类型\n\tCOUNT(column):出现次数，统计次数时不统计空值\n*/\n```\n\n### GROUP BY\n\n按照某些字段进行分组，值相同的数据会被分成一组\n\n```sql\n # 未指定分组，默认所有人一组，计算平均值\n SELECT AVG(salary)\n FROM employees;\n\n+-------------+\n| AVG(salary) |\n+-------------+\n| 6461.682243 |\n+-------------+\n\n# 按照department_id分组，department_id相同的人分为一组，计算每个组的平均值\n# GROUP BY声明在FROM后面、WHERE后面、ORDER BY前面、LIMIT前面\nSELECT AVG(salary)\nFROM employees\nGROUP BY department_id;\n\n+--------------+\n| AVG(salary)  |\n+--------------+\n|  7000.000000 |\n|  4400.000000 |\n|  9500.000000 |\n|  4150.000000 |\n|  6500.000000 |\n|  3475.555556 |\n|  5760.000000 |\n| 10000.000000 |\n|  8955.882353 |\n| 19333.333333 |\n|  8600.000000 |\n| 10150.000000 |\n+--------------+\n\n# 错误写法，GROUP BY分组后，其他字段（下面语句的job_id）结果会出现错误，但不会报错\n# 查询的非组函数字段一定要写在GROUP BY中\nSELECT department_id, job_id, AVG(salary)\nFROM employees\nGROUP BY department_id;\n\n# MySQL中GROUP BY使用WITH ROLLUP\n# WITH ROLLUP会在查询完成后，把所有数据分在一组再进行一次计算\n# 不能和ORDER BY同时使用\nSELECT department_id,AVG(salary)\nFROM employees\nGROUP BY department_id WITH ROLLUP;\n\n+---------------+--------------+\n| department_id | AVG(salary)  |\n+---------------+--------------+\n|          NULL |  7000.000000 | # 这是一个部门为null的哥们\n|            10 |  4400.000000 |\n|            20 |  9500.000000 |\n|            30 |  4150.000000 |\n|            40 |  6500.000000 |\n|            50 |  3475.555556 |\n|            60 |  5760.000000 |\n|            70 | 10000.000000 |\n|            80 |  8955.882353 |\n|            90 | 19333.333333 |\n|           100 |  8600.000000 |\n|           110 | 10150.000000 |\n|          NULL |  6461.682243 | # 这是所有人的平均工资\n+---------------+--------------+\n```\n\n### HAVING\n\nHAVING语句是用来过滤数据的，它和WHERE的区别在于：\n\n- 一旦过滤条件使用了聚合函数，必须使用HAVING来替换WHERE，否则报错\n- 当过滤条件中没有聚合函数是，则此过滤条件声明在WHERE和HAVING中均可，但WHERE执行效率更高\n- HAVING必须声明在GROUP BY后面，而WHERE必须声明在FROM后面\n\n```sql\n# 查询各个部门中最高工资比10000高的部门信息\n\n# 错误写法\nSELECT department_id, MAX(salary) \nFROM employees \nWHERE MAX(salary)>10000 \nGROUP BY department_id;\n\nERROR 1111 (HY000): Invalid use of group function\n\n# 正确写法：\nSELECT department_id, MAX(salary) \nFROM employees \nGROUP BY department_id \nHAVING MAX(salary)>10000;\n\n+---------------+-------------+\n| department_id | MAX(salary) |\n+---------------+-------------+\n|            20 |    13000.00 |\n|            30 |    11000.00 |\n|            80 |    14000.00 |\n|            90 |    24000.00 |\n|           100 |    12000.00 |\n|           110 |    12000.00 |\n+---------------+-------------+\n\n# 查询部门id为10，20，30，40这四个部门中最高工资比10000高的部门信息\n# 方式一：推荐，执行效率高于方式二\nSELECT department_id, MAX(salary) \nFROM employees \nWHERE department_id IN (10,20,30,40) \nGROUP BY department_id \nHAVING MAX(salary)>10000;\n+---------------+-------------+\n| department_id | MAX(salary) |\n+---------------+-------------+\n|            20 |    13000.00 |\n|            30 |    11000.00 |\n+---------------+-------------+\n2 rows in set (0.02 sec)\n\n# 方式二\n SELECT department_id, MAX(salary) \n FROM employees \n GROUP BY department_id \n HAVING MAX(salary)>10000 AND department_id IN (10,20,30,40);\n+---------------+-------------+\n| department_id | MAX(salary) |\n+---------------+-------------+\n|            20 |    13000.00 |\n|            30 |    11000.00 |\n+---------------+-------------+\n2 rows in set (0.06 sec)\n```\n\n## SQL底层执行原理\n\n### SELECT语句的完整结构\n\n```sql\nSELECT ... , ... , ... \nFROM ... , ... , ...(LEFT / RIGHT) JOIN ... ON ...\nJOIN ... ON ...\nWHERE 多表连接条件 AND 不包含聚合函数的过滤条件\nGROUP BY ... , ...\nHAVING 包含聚合函数的过滤条件\nORDER BY ... , ...(DESC/ASC)\nLIMIT ... , ...\n```\n\n### SELECT语句的执行过程\n\nFROM ... , ... , ... （多表连接会笛卡尔积） -> ON（根据连接条件进行过滤） -> (LEFT / RIGHT  JOIN)  -> WHERE -> GROUP BY -> HAVING  -> SELECT  ->  DISTINCT  -> ORDER BY -> LIMIT\n\n## 子查询\n\n### 子查询的特点\n\n子查询指一个查询语句嵌套在另一个查询语句内部的查询\n\n- 子查询先于主查询运行\n- 子查询结果被主查询使用\n- 子查询要包含在括号内\n- 子查询放在比较条件的右侧\n- 单行操作符对应单行子查询，多行操作符对应多行子查询\n- SELECT中，除了GROUP BY和LIMIT以外，都可以声明子查询\n\n```sql\n# 查询谁的工资比Abel高？\n# 方式一：\nSELECT salary\nFROM employees\nWHERE last_name = 'Abel';\n\nSELECT last_name,salary\nFROM employees\nWHERE salary > 11000;\n\n# 方式二：\nSELECT e2.last_name, e2.salary\nFROM employees e1,employees e2\nWHERE e1.last_name = 'Abel'\nAND e2.salary > e1.salary;\n\n# 方式三：子查询\nSELECT last_name, salary\nFROM employees\nWHERE salary > (\n    \t\t\tSELECT salary\n    \t\t\tFROM employees\n    \t\t\tWHERE last_name = 'Abel'\n\t\t\t\t);\n```\n\n\n\n### 子查询的分类\n\n1. 从内查询返回的结果的条目数：  单行子查询    多行子查询\n2. 从内查询的执行次数：  相关子查询    不相关子查询\n\n### 单行子查询\n\n子查询返回单行数据，使用单行操作符\n\n单行操作符： =  >  >=  <  <=  <>\n\n```sql\n\n\t# 查询工资大于149号员工工资的员工信息\n\tSELECT salary\n\tFROM employees\n\tWHERE salary > (SELECT salary\n\t\t\t\t\tFROM employees\n\t\t\t\t\tWHERE employee_id = 149);\n\t\t\t\t\t\n\t# 返回job_id与141号员工相同，salary比143号员工多的员工姓名，job_id和工资\n\tSELECT last_name, job_id, salary\n\tFROM employees\n\tWHERE job_id = (SELECT job_id\n                    FROM employees\n                    WHERE employee_id = 141\n                    )\n    AND salary >   (SELECT salary\n                    FROM employees\n                    WHERE employee_id = 143);\n                    \n   # 查询和141号员工的manager_id,department_id相同的其他员工的employee_id,manager_id,department_id\n   SELECT employee_id,manager_id,department_id\n   FROM employees\n   WHERE (manager_id, department_id) = (\n   \t\t\t\t\t\t\t\t\t\tSELECT manager_id, department_id\n   \t\t\t\t\t\t\t\t\t\tFROM employees\n   \t\t\t\t\t\t\t\t\t\tWHERE employee_id = 141\n   \t\t\t\t\t\t\t\t\t\t)\n   AND employee_id <> 141;\n\n```\n\n### 多行子查询\n\n子查询返回多行，使用多行操作符\n\n多行操作符： IN\tANY\tALL\tSOME(实际上是ANY的别名，和ANY相同)\n\n```sql\n # 查询和141号或174号员工的manager_id,department_id相同的其他员工的employee_id,manager_id,department_id\nSELECT employee_id,manager_id,department_id\nFROM employees\nWHERE (manager_id, department_id) in (\n    SELECT manager_id, department_id\n    FROM employees\n    WHERE employee_id in (141,174)\n)\n  AND employee_id not in (141,174);\n# 查询其他job_id中比job_id为'IT_PROG'部门任意工资低的员工的员工号\nSELECT employee_id, last_name, job_id,salary\nFROM employees\nWHERE job_id <> 'IT_PROG'\nAND salary < (SELECT MAX(salary)\n                FROM employees\n                WHERE job_id = 'IT_PROG');\n                \nSELECT employee_id, last_name, job_id,salary\nFROM employees\nWHERE job_id <> 'IT_PROG'\nAND salary < ANY (SELECT salary\n                FROM employees\n                WHERE job_id = 'IT_PROG');\n\n# 查询平均工资最低的部门id\n# 方法一：\nSELECT department_id, AVG(salary)\nFROM employees\nGROUP BY department_id\nHAVING AVG(salary) <= ALL (\n    SELECT AVG(salary)\n    FROM employees\n    GROUP BY department_id\n);\n\n# 方法二：把子查询当成一个表，该临时表必须有一个别名\n\nSELECT department_id\nFROM employees\nGROUP BY department_id\nHAVING AVG(salary) = (\n                    SELECT MIN(avg_sal)\n                \tFROM (SELECT AVG(salary) avg_sal\n                    \t\tFROM employees\n                    \t\tGROUP BY department_id) dept\n                \t);\n\n```\n\n### 相关子查询\n\n如果子查询的执行依赖于外部查询，通常情况下都是因为子查询中的表用到了外部的表，并进行了条件关联，因此每执行一次外部查询，子查询都要重新计算一次，这样的子查询就称之为关联子查询。\n\n```sql\n# 查询员工中工资大于本部门平均工资的员工的last_name, salary和其department_id\n# 方式一：相关子查询\nSELECT last_name, salary, department_id\nFROM employees e1\nWHERE salary > (\n\t\t\t\tSELECT AVG(salary)\n    \t\t\tFROM employees e2\n    \t\t\tWHERE department_id = e1.department_id\n\t\t\t\t);\n\n# 方式二：在FROM中声明子查询\nSELECT e.last_name, e.salary, e.department_id\nFROM employees e,(\n    SELECT department_id,AVG(salary) avg_sal\n\tFROM employees\n\tGROUP BY department_id\n) t_dept_avg_sal\nWHERE e.department_id = t_dept_avg_sal.department_id\nAND e.salary > t_dept_avg_sal.avg_sal\n\n# 查询员工的id, salary, 按照department_name排序\nSELECT e.employee_id, e.salary\nFROM employees e \nORDER BY (\n\tSELECT department_name\n    FROM departments d\n    WHERE e.department_id = d.department_id\n)\n\n```\n\n### EXISTS 和 NOT EXISTS\n\n\n\n关联子查询通常也会和EXISTS操作符一起来使用，用来检查在子查询中是否存在满足条件的行。·\n\n如果在子查询中不存在满足条件的行:\n\n- 条件返回FALSE\n- 继续在子查询中查找\n\n如果在子查询中存在满足条件的行:\n\n- 不在子查询中继续查找\n- 条件返回TRUE\n\nNOT EXISTS关键字表示如果不存在某种条件，则返回TRUE，否则返回FALSE。\n\n```sql\n# 查询公司管理者的employee_id, last_name, job_id, department_id\n# 方式一\nSELECT DISTINCT  m.employee_id, m.last_name, m.job_id, m.department_id, m.manager_id\nFROM employees e JOIN employees m\nON e.manager_id = m.employee_id\n\n# 方式二\nSELECT employee_id, last_name, job_id, department_id\nFROM employees\nWHERE employee_id IN (\n\tSELECT DISTINCT manager_id\n    FROM employees\n);\n\n# 方式三 使用EXISTS\nSELECT e1.employee_id, e1.last_name, e1.job_id, e1.department_id\nFROM employees e1\nWHERE EXISTS (\n\tSELECT *\n    FROM employees e2\n    WHERE e1.employee_id = e2.manager_id\n);\n```\n\n## 增删改\n\n### 插入数据\n\n- 预处理\n\n  ```sql\n  CREATE TABLE IF NOT EXISTS emp1(\n  \tid INT,\n      `name` VARCHAR(15),\n      hire_date DATE,\n      salary DOUBLE(10,2)\n  );\n  ```\n\n  \n\n- 方式一：一条一条添加数据\n\n  ```sql\n  # 不指定添加的字段，要严格按照表的字段来匹配\n  INSERT INTO emp1\n  VALUES (1,'Tom','2000-12-21',3400);  # 按照顺序匹配id , name, hire_date, salary\n  \n  # 指定添加的字段\n  # 指定表的全部字段，按照自己指定的顺序匹配\n  INSERT INTO emp1(id, hire_date, salary, `name`) VALUES(2,'1999-09-09',4000,'Jerry');\n  \n  # 指定表的部分字段，没有知名的字段默认为NULL值\n  INSERT INTO emp1(id, salary, `name`) VALUES(3, 3500 , 'David');\n  \n  # 插入多条记录\n  INSERT INTO emp1(id, salary, `name`) \n  VALUES\n  (4,5000,'Jim'),\n  (5,6000,'Jelinal');\n  ```\n\n- 方式二：将查询结果插入到表中\n\n  ```sql\n  INSERT INTO emp1(id, `name`, salary, hire_date)\n  # 查询语句， 查询的字段要和要插入的表字段一一对应\n  # 从查询结果插入时，要注意两个表的字段长度，查询的表的字段长度不能高于要插入的表的字段长度，如果一定要插入，需要先修改一下表\n  SELECT employee_id, last_name, salary, hire_date\n  FROM employees\n  WHERE department_id IN (50,60);\n  ```\n\n### 更新数据\n\n```sql\n# UPDATE ... SET ... WHERE ...\nUPDATE emp1\nSET hire_date = CURDATE()\nWHERE id = 5;# WHERE一般情况下必须要加，如果不加，会改整张表的所有记录\n\n# 修改数据时存在不成功的情况，可能是由于约束的影响\n```\n\n### 删除数据\n\n```sql\n# DELETE FROM ... WHERE ...\n# 删除数据时也存在不成功的情况，可能是由于约束的影响\nDELETE FROM emp1\nWHERE id = 1;\n```\n\n\n\n## 创建和管理数据库和表\n\n### 标识符命名规则\n\n- 数据库名、表名不得超过30个字符，变量名限制为29个。必须只能包含A-Z,a-z,0-9，共63个字符\n- 数据库名、表名、字段名等对象名中间不要包含空格\n- 同一个MySQL软件中，数据库不能同名；同一个库中，表不能重名；同一个表中，字段不能重名\n- 必须保证你的字段没有和保留字、数据库系统或常用方法冲突。如果坚持使用，请在SQL语句中使用`(着重号)引起来\n- 保持字段名和类型的一致性：在命名字段并为其指定数据类型的时候一定要保证一致性，假如数据类型在一个表里是整数，那在另一个表里可就别变成字符型了\n\n### 创建数据库\n\n- 方式一：创建数据库\n\n  ```sql\n  CREATE DATABASE mytest1;\n  ```\n\n- 方式二：指定字符集\n\n  ```sql\n  CREATE DATABASE mytest1 CHARACTER SET 'utf8mb4';\n  \n  # 查看数据库的创建信息\n  SHOW CREATE DATABASE mytest1;\n  ```\n\n- 方式三：创建之前判断是否存在，如果要创建的数据库已经存在，创建不成功，不会报错：\n\n  ```sql\n  CREATE DATABASE IF NOT EXISTS mytest1;\n  ```\n\n### 管理数据库\n\n- 查看当前连接中的数据库有哪些\n\n  ```sql\n  SHOW DATABASES;\n  ```\n\n- 切换数据库\n\n  ```sql\n  USE mytest2;\n  ```\n\n- 查看当前数据库中保存的数据表\n\n  ```sql\n  SHOW TABLES;\n  ```\n\n- 查看当前使用的数据库\n\n  ```sql\n  SELECT DATABASE() FROM DUAL;\n  ```\n\n- 查看指定数据库下保存的数据表\n\n  ```sql\n  SHOW TABLES FROM 数据库名;\n  ```\n\n### 修改数据库\n\n- 更改数据库字符集\n\n  ```sql\n  ALTER DATABASE mytest1 CHARACTER SET 'utf8';\n  ```\n\n### 删除数据库\n\n- 方式一：\n\n  ```sql\n  DROP DATABASE mytest1;\n  ```\n\n- 方式二：\n\n  ```sql\n  DROP DATABASE IF EXISTS mytest1;\n  ```\n\n### 创建数据表\n\n- 方式一：\n\n  ```sql\n  USE mytest1;\n  CREATE TABLE IF NOT EXISTS myemp1( # 需要用户具有创建表的权限\n  \tid INT,\n      emp_name VARCHAR(15), # 使用VARCHAR字符串必须指定长度\n      hire_date DATE\n  ); \n  \n  # 查看表的创建信息\n  SHOW CREATE TABLE myemp1;# 如果创建表时没有指定字符集，默认使用表所在的数据库的字符集\n  ```\n\n- 方式二：基于现有的表，同时导入数据\n\n  ```sql\n  CREATE TABLE myemp2\n  AS\n  SELECT employee_id, last_name ,salary\n  FROM employees;\n  ```\n\n- MySQL8新特性：计算列\n\n  ```sql\n  # 计算列，是某一列的值是通过其他列计算得来的，其他列变化时计算列会随之更新。\n  # 创建表时声明计算列：\n  CREATE TABLE tb1(\n      id INT,\n  \ta INT,\n      b INT,\n      c INT GENERATED ALWAYS AS (a + b) VIRTUAL # c就是计算列，它的值总等于a+b\n  );\n  \n  # 向表中插入值\n  INSERT INTO tb1(id,a,b) # 这里只插入了a=11和b=22\n  VALUES\n  (1,11,22);\n  \n  # 查询\n  SELECT * FROM tb1;\n  # c已经被同步成了11+22=33\n  +------+------+------+------+\n  | id   | a    | b    | c    |\n  +------+------+------+------+\n  |    1 |   11 |   22 |   33 |\n  +------+------+------+------+\n  1 row in set (0.02 sec)\n  ```\n\n  \n\n### 查看表结构\n\n```sql\nDESC myemp1;\n```\n\n### 修改表\n\n- 添加字段\n\n  ```sql\n  ALTER TABLE myemp1\n  ADD salary DOUBLE(10,2) # 一共十位数字，小数点后两位，默认添加到表的最后面\n  \n  ALTER TABLE myemp1\n  ADD phone_number VARCHAR(20) FIRST; # 把phone_number添加到第一个字段的位置\n  \n  ALTER TABLE myemp1\n  ADD email VARCHAR(45) AFTER emp_name; # 把email放到emp_name后面\n  ```\n\n  \n\n- 修改字段\n\n  ```sql\n  ALTER TABLE myemp1\n  MODIFY emp_name VARCHAR(35) DEFAULT 'AAA';\n  ```\n\n  \n\n- 重命名一个字段\n\n  ```sql\n  ALTER TABLE myemp1\n  CHANGE salary monthly_salary DOUBLE(10,2);\n  \n  ALTER TABLE myemp1\n  CHANGE email my_email VARCHAR(50);\n  ```\n\n  \n\n- 删除一个字段\n\n  ```sql\n  ALTER TABLE myemp1\n  DROP COLUMN my_email;\n  ```\n\n### 重命名表\n\n- 方式一：\n\n  ```sql\n  RENAME TABLE emp1\n  TO myemp11;\n  ```\n\n- 方式二：\n\n  ```sql\n  ALTER TABLE myemp2\n  RENAME TO myemp12;\n  ```\n\n### 删除表\n\n```sql\nDROP TABLE IF EXISTS 表名;\n```\n\n### 清空表\n\n```sql\n# 清空表中的数据，但是结构还在\nTRUNCATE TABLE 表名;\n```\n\n### COMMIT 和 ROLLBACK\n\n- COMMIT: 提交数据， 一旦执行，数据就被永久保存到了数据库中，不可以回滚。\n- ROLLBACK：回滚数据，一旦执行，可以实现数据的回滚。回滚到最近的一次COMMIT之后。\n\n### 对比TRUNCATE 和 DELETE\n\n- 相同点：都可以实现对表中所有数据的删除，同时保留表结构\n- 不同点：一旦执行TRUNCATE，表数据全部清除，不可以回滚；DELETE 可以全部清除（不带WHERE），数据可以实现回滚\n\n### DDL和DML的说明\n\n1. DDL的操作一旦执行，就不可以回滚，`SET autocommit = FALSE`对DDL无效，因为在执行完DDL之后，一定会执行一次COMMIT。MySQL8.0以后，DDL的操作引入了原子性，要么都执行，要么都不执行、\n2. DML操作默认情况也是不可以回滚的，但是如果在执行DML之前，执行了`SET autocommit = FALSE`，则执行的DML操作就可以回滚。\n\n演示：\n\n```sql\n# 创建一个备份表，在备份表里面操作\nCREATE TABLE employee_copy\nAS\nSELECT *\nFROM employees;\n\n# 看一下备份表里面的数据\nSELECT employee_id,last_name, salary\nFROM employee_copy;\n\n# 和employee表一样，共107条数据\n+-------------+-------------+----------+\n| employee_id | last_name   | salary   |\n+-------------+-------------+----------+\n|         100 | King        | 24000.00 |\n|         101 | Kochhar     | 17000.00 |\n|         102 | De Haan     | 17000.00 |\n|         103 | Hunold      |  9000.00 |\n|         104 | Ernst       |  6000.00 |\n|         105 | Austin      |  4800.00 |\n|         106 | Pataballa   |  4800.00 |\n|         107 | Lorentz     |  4200.00 |\n|         108 | Greenberg   | 12000.00 |\n|         109 | Faviet      |  9000.00 |\n|         110 | Chen        |  8200.00 |\n|         ....| ...         |       ...|\n+-------------+-------------+----------+\n107 rows in set (0.11 sec)\n\n\n# 先提交，相当于存档，保证能够回滚\nCOMMIT;\n -- Query OK, 0 rows affected (0.09 sec)\n\n# 关闭自动提交事务\nSET autocommit = FALSE;\n -- Query OK, 0 rows affected (0.02 sec)\n\n# 删除所有表数据\nDELETE FROM employee_copy;\n -- Query OK, 107 rows affected (0.02 sec)\n \n# 查看表数据，确定已经删掉了\nSELECT employee_id,last_name, salary\nFROM employee_copy;\n -- Empty set (0.02 sec)\n \n# 回滚\nROLLBACK;\n -- Query OK, 0 rows affected (0.02 sec)\n\n# 查看表数据，发现已经回来了\nSELECT employee_id,last_name, salary\nFROM employee_copy;\n+-------------+-------------+----------+\n| employee_id | last_name   | salary   |\n+-------------+-------------+----------+\n|         100 | King        | 24000.00 |\n|         101 | Kochhar     | 17000.00 |\n|         102 | De Haan     | 17000.00 |\n|         103 | Hunold      |  9000.00 |\n|         104 | Ernst       |  6000.00 |\n|         105 | Austin      |  4800.00 |\n|         106 | Pataballa   |  4800.00 |\n|         107 | Lorentz     |  4200.00 |\n|         108 | Greenberg   | 12000.00 |\n|         109 | Faviet      |  9000.00 |\n|         110 | Chen        |  8200.00 |\n|         ....| ...         |       ...|\n+-------------+-------------+----------+\n107 rows in set (0.11 sec)\n```\n\n\n\n\n\n","source":"_posts/mysql-基础篇.md","raw":"---\ntitle: mysql 基础篇\ntags:\n  - mysql\ncategories: mysql\ndate: 2024-04-06 21:16:56\n---\n\n\n## SQL分类\n\n1. DDL：数据定义语言\n\n   - CREATE\n   - ALTER\n   - DROP\n   - RENAME\n   - TRUNCATE\n\n2. DML：数据操作语言\n\n   - INSERT\n   - DELETE\n   - UPDATE\n   - SELECT\n\n3. DCL：数据控制语言\n\n   - COMMIT\n   - ROLLBACK\n   - SAVEPOINT\n   - GRANT\n   - REVOKE\n\n   \n\n## SELECT语句\n\n### 查询常量\n\n```SQL\nSELECT 19;\n\nSELECT 1+1 FROM DUAL;  # dual：伪表\n\nSELECT 0, 123, employee_id, last_name\nFROM employees;\n```\n\n### 查询所有字段\n\n```sql\nSELECT * FROM employees;\n```\n\n### 查询部分字段\n\n```sql\nSELECT employee_id, last_name, salary\nFROM employees;\n```\n\n### 列的别名\n\n```sql\n/*\n\t两种方式：\n\t1.列原名 别名，如下面语句的employee_id emp_id\n\t2.列原名 AS 别名，如下面语句中的last_name AS lname\n\t3.基于前两种方式，可以用双引号括起别名，用于别名有空格的情况，如下面语句的salary*12 “annual sal”，但不要使用单引号\n*/\nSELECT employee_id emp_id, last_name AS lname, salary*12 “annual sal”\nFROM employees;\n```\n\n### 去除重复行\n\n```sql\n# 正确用法\nSELECT \tDISTINCT department_id\nFROM employees;\n\n# 错误用法\nSELECT salary, DISTINCT department_id\nFROM employees;\n\n# 不会报错，department_id 和 salary 作为整体\nSELECT DISTINCT department_id， salary\nFROM employees;\n```\n\n### 空值参与运算\n\n```sql\n# 空值：null\n# null不等于0，'',’null'\n# null值参与运算， 结果一定也为空\n# 绩效比例commission_pct为null时，年工资也为null\nSELECT employee_id salary \"月工资\", salary * (1 + commission_pct) * 12 \"年工资\"\n\n# 把null当成0\nSELECT employee_id salary \"月工资\", salary * (1 + IFNULL(commission_pct, 0)) * 12 \"年工资\"\n```\n\n### 着重号 `\n\n```sql\n# 用于表名和关键字相同时\nSELECT * FROM ORDER;\nSELECT * FROM `order`;\n```\n\n### 过滤条件\n\n```sql\n# WHERE 紧跟在 FROM 子句后\n# WHERE 筛选后面的条件为1的数据， 0和NULL会被过滤\n# WHERE 不能使用类的别名\nSELECT * \nFROM employees\nWHERE last_name = 'King';\n```\n\n### 排序\n\n```sql\n# 如果没有使用排序，查询返回的数据默认按照添加数据的顺序\n# 使用ORDER BY对数据进行排序，升序ASC， 降序DESC，默认升序\n\n# 按照salary从高到低顺序显示员工信息\nSELECT employee_id, last_name, salary\nFROM employees\nORDER BY salary DESC;\n\n# 按照salary从低到高顺序显示员工信息\nSELECT employee_id, last_name, salary\nFROM employees\nORDER BY salary ASC; # ASC可以不写\n\nSELECT employee_id, last_name, salary\nFROM employees\nORDER BY salary;\n\n# 使用类的别名排序\nSELECT employee_id emp_id, last_name AS lname, salary*12 “annual sal”\nFROM employees;\nORDER BY annual_sal;\n\n# 二级排序\n# 显示员工信息，按照department_id降序排序，salary升序排序\nSELECT employee_id, last_name, salary\nFROM employees\nORDER BY department_id DESC, salary ASC;\n```\n\n### 分页\n\n```sql\n# 使用LIMIT使用分页操作\n# LIMIT 偏移量,条目数\n# LIMIT 0,20  表示偏移量为0，显示20条数据\n\nSELECT employee_id, last_name\nFROM employees\nLIMIT 0,20;\n\n# MySQL 8.0新特性\n# LIMIT 条目数 OFFSET 偏移量\nSELECT employee_id, last_name\nFROM employees\nLIMIT 20 OFFSET 0;\n```\n\n\n\n## 显示表结构\n\n```sql\nDESCRIBE employees;\nDESC employees;\n```\n\n## 运算符\n\n### 算术运算符\n\n+、-、*、/或DIV、%或MOD\n\n```sql\nSELECT 100 + '1' FROM DUAL; # 返回101， 会将字符串转换为数值\nSELECT 100 + 'a' FROM DUAL; # 返回100，将非数字字符串当作0\n\nSELECT 100/0 FROM DUAL; # 返回NULL\n```\n\n### 比较运算符\n\n比较结果为真返回1， 为假返回0， 其他情况返回NULL\n\n=  \t<=>（安全等于） \t<>（不等于） \t!=\t<\t<=\t>\t>=\n\n```sql\n# 两边都是字符串，按照ANSI进行比较\n# 两边都是数字，按照数值比较\n# 数字和字符串相比，会产生字符串的隐形转换\n# null参与运算返回null\nSELECT 1 = 2, 1 != 2,1 = '1',0 = 'A' FROM DUAL;# 返回0，1，1，1\nSELECT 'A' = 'A', 'A' = 'B' FROM DUAL;# 返回1，0\nSELECT 1 = NULL, NULL = NULL FROM DUAL;# 返回NULL, NULL\n\n# <=> 安全等于 在无NULL时等同于= ， 在有NULL时，两边都是NULL为1， 只有一个NULL为0\nSELECT 1 <=> NULL, NULL <=> NULL FROM DUAL;# 返回0，1\n\nSELECT employee_id, last_name, salary\nFROM employees;\nWHERE commission_pct <=> NULL;\n\nSELECT employee_id, last_name, salary\nFROM employees;\nWHERE NOT commission_pct <=> NULL;\n```\n\n### 非符号类型运算符\n\n```Sql\n# IS NULL / IS NOT NULL / ISNULL 判断字段是否为NULL\nSELECT employee_id, last_name, salary\nFROM employees;\nWHERE commission_pct IS NOT NULL;\n\n\n# LEAST() 求最小值/ GREATEST() 求最大值\nSELECT LEAST('A', 'B', 'E'), GREATEST('A', 'B', 'E') FROM DUAL; # 返回A  E\n\n# BETWEEN 条件一 AND 条件二  包含条件一和条件二,要求条件一为下界， 条件二为上界，不能交换\n# 查询工资在6000和8000的员工信息\nSELECT employee_id, last_name, salary\nFROM employees\nWHERE salary BETWEEN 6000 AND 8000;\n\nSELECT employee_id, last_name, salary\nFROM employees\nWHERE salary >= 6000 && SALARY <= 8000;\n\n# IN \\ NOT IN\n# 查询部门为10，20，30的员工信息\nSELECT last_name, salary, department_id\nFROM employees\nWHERE department_id = 10 OR department_id = 20 OR department_id = 30\n\nSELECT last_name, salary, department_id\nFROM employees\nWHERE department_id IN (10,20,30);\n\n# LIKE 模糊查询\n# 查询last_name中包含字符a的元素信息\nSELECT last_name, salary, department_id\nFROM employees\nWHERE last_name LIKE '%a%'; # '%'代表不确定个数的字符\n\n# 查询last_name中包含字符a和e的元素信息\nSELECT last_name, salary, department_id\nFROM employees\nWHERE last_name LIKE '%a%' AND last_name LIKE '%e%'; # '%'代表不确定个数的字符\n\n# 查询last_name中包含第二个字符是a的元素信息\nSELECT last_name, salary, department_id\nFROM employees\nWHERE last_name LIKE '_a%'; # '_'代表一个字符\n\n# 正则表达式\n# REGEXP \\ RLIKE: 正则表达式\nSELECT 'shlstart' REGEXP '^s','shlstart' REGEXP 't$','shlstart' REGEXP 'hk'\nFROM DUAL;\n```\n\n### 逻辑运算符\n\n! / NOT  \t&& / AND  \t || / OR   \tXOR（异或）\n\n\n\n## 多表查询\n\n### 等值连接和非等值连接\n\n```sql\n# 错误写法，缺少了连接条件，会出现笛卡尔积\nSELECT employee_id, department_name\nFROM employees, departments;\n\nSELECT employee_id, department_name\nFROM employees CROSS JOIN departments;\n\n# 正确写法\n# 等值连接\n# 如果查询语句中出现了多个表中都存在的字段，则必须指明字段所在的表\nSELECT employee_id, department_name,employees.department_id\nFROM employees, departments;\nWHERE employees.department_id = departments.department_id;\n\n\n# 给表起别名,起了别名必须用\nSELECT emp.employee_id, dept.department_name,emp.department_id\nFROM employees emp, departments dept;\nWHERE emp.department_id = dept.department_id;\n\n\n# 非等值连接\nSELECT last_name, salary, grade_level\nFROM employees e, job_grades\nWHERE e.`salary` BETWEEN j.`lowest_sal` AND j.`highest_sal`;\n```\n\n### 自连接和非自连接\n\n```sql\n# 自连接\n# 查询员工id、名称last_name及其上级id、名称\nSELECT emp.empployee_id, emp.last_name, man.employee_id, man.last_name\nFROM employees emp, employees man\nWHERE emp.manager_id = man.employee_id\n```\n\n### 内连接和外连接\n\n```sql\n# 内连接：合并具有同一列的两个以上的表的行，结果集中不包含一个表与另一个表不匹配的行\n# SQL92(MySQL不支持)实现内连接\nSELECT employee_id, department_name,employees.department_id\nFROM employees, departments;\nWHERE employees.department_id = departments.department_id;\n\n# SQL99实现外连接JOIN ON\nSELECT emp.last_name, dept.department_name\nFROM employees emp INNER JOIN departments dept\nON emp.department_id = dept.department_id;# INNER可以省略\n\n# 外连接：合并具有同一列的两个以上的表的行，结果集中不仅包含一个表与另一个表不匹配的行，还包含左表 或 右表中不匹配的行\n\n# 左外连接：合并具有同一列的两个以上的表的行，结果集中不仅包含一个表与另一个表不匹配的行，还包含左表中不匹配的行\n\n# 右外连接：合并具有同一列的两个以上的表的行，结果集中不仅包含一个表与另一个表不匹配的行，还包含右表中不匹配的行\n\n# 满外连接：合并具有同一列的两个以上的表的行，结果集中不仅包含一个表与另一个表不匹配的行，还包含左表 和 右表中不匹配的行\n\n\n# 左外连接\n# 查询所有员工的last_name和department_name\n# SQL92（MySQL不支持）语法实现外连接：使用+\nSELECT emp.last_name, dept.department_name\nFROM employees emp, departments dept\nWHERE emp.department_id = dept.department_id(+);\n\n# SQL99语法实现外连接：使用OUTER JOIN ON\nSELECT emp.last_name, dept.department_name\nFROM employees emp LEFT OUTER JOIN departments dept\nON emp.department_id = dept.department_id;# OUTER可以省略\n\n# 右外连接\n# SQL92（MySQL不支持）语法实现外连接：使用+\nSELECT emp.last_name, dept.department_name\nFROM employees emp, departments dept\nWHERE emp.department_id(+) = dept.department_id;\n\n# SQL99语法实现外连接：使用OUTER JOIN ON\nSELECT emp.last_name, dept.department_name\nFROM employees emp RIGHT OUTER JOIN departments dept\nON emp.department_id = dept.department_id;# OUTER可以省略\n\n# 满外连接\n# SQL99语法实现外连接：使用FULL OUTER JOIN ON\n# MySQL不支持FULL OUTER JOIN ON，满外连接使用UNION实现\nSELECT emp.last_name, dept.department_name\nFROM employees emp FULL OUTER JOIN departments dept\nON emp.department_id = dept.department_id;# OUTER可以省略\n```\n\nSQL99中实现七种JOIN操作的方法：\n\n![MySQL中七种JOIN实现](@JOIN.png)\n\n### UNION 和 UNION ALL的使用\n\n**UNION** 和 **UNION ALL**用于合并两个查询的结果集，取并集\n\n区别在于 **UNION** 会对结果集去重， 而 **UNION ALL** 不会去重\n\n因此 **UNION ALL** 速度更快，更推荐使用\n\n```sql\n# 使用 UNION 和 UNION ALL 实现满外连接\nSELECT e.employee_id, d.department_name\nFROM employees e LEFT JOIN departments d\nON e.employee_id = d.department_id\nUNION ALL\nSELECT e.employee_id, d.department_name\nFROM employees e RIGHT JOIN departments d\nON e.employee_id = d.department_id\nWHERE e.department_id IS NULL;\n\nSELECT e.employee_id, d.department_name\nFROM employees e LEFT JOIN departments d\nON e.employee_id = d.department_id\nWHERE d.department_id IS NULL;\nUNION ALL\nSELECT e.employee_id, d.department_name\nFROM employees e RIGHT JOIN departments d\nON e.employee_id = d.department_id\n```\n\n### SQL99新特性\n\n1. 自然连接\n\n   NATURAL JOIN表示自然连接，自然连接其实是等值连接，自动查询两张表中相同的字段进行等值连接\n\n   ```sql\n   # 自然连接\n   SELECT e.employee_id, d.department_name,e.department_id\n   FROM employees e, departments d;\n   WHERE e.department_id = d.department_id;\n   AND e.manager_id = d.manager_id;\n   \n   SELECT e.employee_id, d.department_name,e.department_id\n   FROM employees e NATURAL JOIN departments d;\n   \n   ```\n\n2. **USING**\n\n   用于替换连接条件\n\n   ```sql\n   SELECT e.employee_id, d.department_name,e.department_id\n   FROM employees e, departments d;\n   WHERE e.department_id = d.department_id;\n   \n   SELECT e.employee_id, d.department_name,e.department_id\n   FROM employees e, departments d;\n   USING (department_id); # 必须写两张表中同名的字段单行函数数的特点\n   \n   ```\n\n##  单行函数\n\n###  单行函数的特点\n\n- 操作数据对象\n- 接收参数返回一个结果\n- **只对一行进行变换**\n- **每行返回一个结果**\n- 可以嵌套\n- 参数可以是一列（字段）或一个值\n\n### 数值函数\n\n```sql\n/*\n\tABS(x):返回x的绝对值\n\tSIGN(x):符号函数，x大于0返回1，小于0返回-1，等于0返回0\n\tPI():返回圆周率的值\n\tCEIL(x), CEILING(x)：返回不小于x的最小整数\n\tFLOOR(x)：返回不大于x的最大整数\n\tMOD(x,y):返回x除以y的余数\n\tLEAST(e1,e2,e3...):返回列表中的最小值\n\tGREATEST(e1,e2,e3...):返回列表中的最大值\n\tRAND():返回0-1的随机数\n\tRAND(x):返回0-1的随机值，其中x为种子，相同的x会产生相同的随机数\n\tROUND(x):返回x四舍五入后的最接近x的整数\n\tROUND(x,y):返回x四舍五入后最接近x的值，并保留到小数点后面y位\n\tTRUNCATE(x,y):返回数字x截断为y位小数的结果\n\tSQRT(x):返回x的平方根，当x小于0时返回null\n\tPOW(x,y):返回x的y次方\n\tPOWER(x,y):返回x的y次方\n\tEXP(x):返回e的x次方\n\tLN(x):返回x的自然对数\n\tLOG(x):返回x的自然对数\n\tLOG10(x):返回以10为底x的对数\n\tLOG2(x):返回以2为底x的对数\n\t\n\t三角函数：默认弧度制\n\tSIN(x):正弦值\n\tASIN(x):反正弦值\n\tCOS(x):余弦值\n\tACOS(x):反余弦值\n\tTAN(x):正切值\n\tATAN(x):反正切值\n\tATAN2(x,y):返回两个参数的反正切值\n\tCOT(x):余切值\n\t\n\t角度与弧度互换函数\n\tRADIANS(x):将角度转化为弧度，其中，参数x为角度值\n\tDEGREES(x):将弧度转化为角度，其中，参数x为弧度制\n\t\n\t进制间的转换\n\tBIN(x):二进制\n\tHEX(x):十六进制\n\tOCT(x):八进制\n\tCONV(x, f1, f2):返回f1进制变成f2进制\n*/\n```\n\n### 字符串函数\n\n```sql\n/*\n    注意：字符串的索引是从1开始的！\n\n\tASCII(s):返回字符串s中的第一个字符的ASCII码\n\tCHAR_LENGTH(s):返回字符串s的字符数\n\tLENGTH(s):返回字符串s的字节数\n\tCONCAT(s1,s2,...,sn):连接s1,s2,...,sn为一个字符串\n\tCONCAT_WS(x,s1,s2,...,sn):同CONCAT(s1,s2,...,sn)函数，但是每个字符串之间要加上x\n\tINSERT(str, idx, len, replacestr):将字符串str从第idx位置开始，len个字符长的子串替换为字符串replacestr\n\tREPLACE(str,a,b):用字符串b替换字符串str中所有出现的字符串a\n\tUPPER(s) / UCASE(s):将字符串s中所有字母转成大写字母\n\tLOWER(s) / LCASE(s):将字符串s中所有字母转成小写字母\n\tLEFT(str,n):返回字符串str最左边的n个字符\n\tRIGHT(str,n):返回字符串str最右边的n个字符\n\tLPAD(str, len, pad):用字符串pad对str最左边进行填充，直到str长度为len个字符\n\tRPAD(str, len, pad):用字符串pad对str最右边进行填充，直到str长度为len个字符\n\tLTRIM(s):去掉字符串s左侧的空格\n\tRTRIM(s):去掉字符串s右侧的空格\n\tTRIM(s):去掉字符串s开头和结尾的空格\n\tTRIM(s1 FROM s):去掉字符串s开始与结尾的s1\n\tTRIM(LEADING s1 FROM s):去掉字符串s开始的s1\n\tTRIM(TRAILING s1 FROM s):去掉字符串s结尾的s1\n\tREPEAT(str, n):返回str重复n次的结果\n\tSPACE(n):返回n个空格\n\tSTRCMP(s1, s2):比较s1、s2的ASCII码的大小\n\tSUBSTR(s, index, len):返回从字符串s的index位置起n个字符， 作用与SUBSTRING(s,n,len),MID(s,n,len)相同\n\tLOCATE(substr, str):返回字符串substr在字符串str中首次出现的位置，作用与POSITION(substr In str),INSTR(str, substr)相同。未找到返回0\n\tELT(m, s1, s2, ..., sn):返回指定位置的字符串，如果m=1，则返回s1，如果m=2，则返回s2，如果m=n，则返回sn\n\tFIELD(s,s1,s2,...,sn):返回字符串s在字符串列表中第一次出现的位置\n\tFIND_IN_SET(s1,s2):返回字符串s1在字符串s2中出现的位置，其中s2是一个以逗号分隔的字符串\n\tREVERSE(s):返回s反转后的字符串\n\tNULLIF(value1, value2):比较两个字符串，如果value1和value2相等，则返回NULL，否则返回value1\n*/\n```\n\n### 日期函数\n\n```sql\n/*\n\t1.获取日期、时间\n\tCURDATE(),CURRENT_DATE():返回当前日期，只包含年月日，格式'yyyy-MM-dd'\n\tCURTIME(),CURRENT_TIME():返回当前时间，只包含时分秒，格式'HH:mm:ss'\n\tNOW()/SYSDATE()/CURRENT_TIMESTAMP()/LOCALTIME()/LOCALTIMESTAMP():返回当前系统日期和时间，格式'yyyy-MM-dd HH:mm:ss'\n\tUTC_DATE():返回UTC（世界标准时间）日期\n\tUTC_TIME():返回UTC（世界标准时间）时间\n\t\n\t2.日期和时间戳的转换\n\tUNIX_TIMESTAMP():以UNIX时间戳的形式返回当前时间\n\tUNIX_TIMESTAMP(date):将时间date以UNIX时间戳的形式返回\n\tFROM_UNIXTIME(timestamp):将UNIX时间戳的时间转换为普通格式的时间\n\t\n\t3.获取月份、星期、星期数、天数等函数\n\tYEAR(date)/MONTH(date)/DAY(date):返回具体的日期值\n\tHOUR(time)/MINUTE(time)/SECOND(time):返回具体的时间值\n\tMONTHNAME(date):返回月份：January...\n\tDAYNAME(date):返回星期几：MONDAY...\n\tWEEKDAY(date):返回周几，周一是0，周二是1，...，周日是6\n\tQUARTER(date):返回日期对应的季度，范围为1-4\n\tWEEK(date),WEEKOFYEAR(date):返回一年中的第几周\n\tDAYOFYEAR(date):返回日期是一年中的第几天\n\tDAYOFMONTH(date):返回日期位于所在月份的第几天\n\tDAYOFWEEK(date):返回周几，周一是1，周二是2，...，周日是7\n\t\n\t4.日期的操作函数\n\tEXTRACT(type FROM date):返回指定日期中特定的部分，type指定返回的值\n\ttype的取值如下：\n\tMICROSECOND:毫秒数\n\tSECOND:秒数\n\tMINUTE:分钟数\n\tHOUR:小时数\n\tDAY:天数\n\tWEEK:一年中的第几个星期\n\tMONTH:一年中的第几个月\n\tQUARTER:季度\n\tYEAR:年份\n\tSECOND_MICROSECOND:秒和毫秒值\n\t两个返回值的取值用下划线连接组合，如上面的SECOND_MICROSECOND。\n\t\n\t5.时间和秒钟的转换函数\n\tTIME_TO_SEC(time):将time转化为秒并返回结果值，转化的公式为：小时*3600+分钟*60+秒\n\tSEC_TO_TIME(seconds):将second描述转化为包含小时、分钟和秒的时间\n\t\n\t6.计算日期和时间的函数\n\tDATE_ADD(datetime, INTERVAL expr type):返回与给定日期时间相差INTERVAL时间段的日期时间\n\tDATE_SUB(date, INTERVAL expr type):返回与date相差INTERVAL时间间隔的日期\n\ttype的取值和EXTRACT函数一致，示例：DATE_ADD(NOW(), INTERVAL 1 YEAR),DATE_ADD(NOW(), INTERVAL -1 YEAR),DATE_ADD('2021-10-21 23:32:12', INTERVAL '1_1' YEAR_MONTH)\n\t\n\tADDTIME(time1, time2):返回time1加上time2的时间。当time2为一个数字时，代表的是秒，可以是负数\n\tSUBTIME(time1,time2):返回time1减去time2的时间。当time2为一个数字时，代表的是秒，可以是负数\n\tDATEDIFF(date1, date2):返回date1-date2的日期间隔天数\n\tTIMEDIFF(time1,time2):返回time1-time2的时间间隔\n\tFROM_DAYS(N):返回从0000年1月1日起，N天以后的日期\n\tTO_DAYS(date):返回日期距离0000年1月1日的天数\n\tLAST_DAY(date):返回date所在月份最后一天的日期\n\tMAKEDATE(year,n):针对给定年份和该年份中的天数返回一个日期\n\tMAKETIME(hour,minute,second):将给定的小时、分钟和秒合成时间并返回\n\tPERIOD_ADD(time,n):返回time加上n后的时间\n\t\n\t7.日期的格式化和解析\n\tDATE_FORMAT(date, fmt):按照字符串fmt格式化日期date值\n\tTIME_FORMAT(time, fmt):按照字符串fmt格式化时间time值\n\tGET_FORMAT(date_type, format_type):返回日期字符串的显示格式\n\tSTR_TO_DATE(str, fmt):按照字符串fmt对str进行解析，解析为一个日期\n\t\n\tfmt的格式：\n\t%S, %s 两位数字形式的秒（ 00,01, …, 59）\n    %I, %i 两位数字形式的分（ 00,01, …, 59）\n    %H 两位数字形式的小时，24 小时（00,01, …, 23）\n    %h 两位数字形式的小时，12 小时（01,02, …, 12）\n    %k 数字形式的小时，24 小时（0,1, …, 23）\n    %l 数字形式的小时，12 小时（1, 2, …, 12）\n    %T 24 小时的时间形式（hh:mm:ss）\n    %r 12 小时的时间形式（hh:mm:ss AM 或hh:mm:ss PM）\n    %p AM或PM\n    %W 一周中每一天的名称（Sunday, Monday, …, Saturday）\n    %a 一周中每一天名称的缩写（Sun, Mon, …, Sat）\n    %d 两位数字表示月中的天数（00, 01,…, 31）\n    %e 数字形式表示月中的天数（1, 2， …, 31）\n    %D 英文后缀表示月中的天数（1st, 2nd, 3rd,…）\n    %w 以数字形式表示周中的天数（ 0 = Sunday, 1=Monday, …, 6=Saturday）\n    %j 以三位数字表示年中的天数（ 001, 002, …, 366）\n    %U 周（0, 1, 52），其中Sunday 为周中的第一天\n    %u 周（0, 1, 52），其中Monday 为周中的第一天\n    %M 月名（January, February, …, December）\n    %b 缩写的月名（ January, February,…, December）\n    %m 两位数字表示的月份（01, 02, …, 12）\n    %c 数字表示的月份（1, 2, …, 12）\n    %Y 四位数字表示的年份\n    %y 两位数字表示的年份\n    %% 直接值“%”\n    \n    GET_FORMAT(date_type, format_type):返回日期字符串的显示格式:\n    GET_FORMAT(DATE,'USA')\t'%m.%d.%Y'\n    GET_FORMAT(DATE,'JIS')\t'%Y-%m-%d'\n    GET_FORMAT(DATE,'ISO')\t'%Y-%m-%d'\n    GET_FORMAT(DATE,'EUR')\t'%d.%m.%Y'\n    GET_FORMAT(DATE,'INTERNAL')\t'%Y%m%d'\n    GET_FORMAT(DATETIME,'USA')\t'%Y-%m-%d %H.%i.%s'\n    GET_FORMAT(DATETIME,'JIS')\t'%Y-%m-%d %H:%i:%s'\n    GET_FORMAT(DATETIME,'ISO')\t'%Y-%m-%d %H:%i:%s'\n    GET_FORMAT(DATETIME,'EUR')\t'%Y-%m-%d %H.%i.%s'\n    GET_FORMAT(DATETIME,'INTERNAL')\t'%Y%m%d%H%i%s'\n    GET_FORMAT(TIME,'USA')\t'%h:%i:%s %p'\n    GET_FORMAT(TIME,'JIS')\t'%H:%i:%s'\n    GET_FORMAT(TIME,'ISO')\t'%H:%i:%s'\n    GET_FORMAT(TIME,'EUR')\t'%H.%i.%s'\n    GET_FORMAT(TIME,'INTERNAL')\t'%H%i%s'\n*/\n```\n\n### 流程控制函数\n\n```sql\n/*\n\tIF(value, value1, value2):如果value的值为TRUE，返回value1，否则返回value2\n\tIFNULL(value1, value2):如果value1不为NULL，返回value1，否则返回value2\n\tCASE WHEN 条件1 THEN 结果1 WHEN 条件2 THEN 结果2 ... ELSE END  相当于if else\n\tCASE expr WHEN 常量值1 THEN 值1 WHEN 常量值2 THEN 值2 ... END  相当于switch case\n*/\n```\n\n### 加密与解密函数\n\n```sql\n/*\n\tPASSWORD(str):返回字符串str的加密版本，41位长的字符串。加密结果不可逆，常用于用户的密码加密（MySQL8.0中无法使用）\n\tMD5(str):返回字符串str的md5加密后的值，也是一种加密方式。若参数为NULL，则会返回NULL\n\tSHA(str):从原明文密码str计算并返回加密后的密码字符串，当参数为NULL时，返回NULL。SHA比MD5更安全。\n\tENCODE(value, password_seed):返回使用password_seed作为加密密码加密value\n\tDECODE(value, password_seed):返回使用password_seed作为加密密码解密value\n*/\n```\n\n### 其他函数\n\n```sql\n/*\n\tFORMAT(\tvalue, n):返回对数字value进行格式化后的结果数据。n表示四舍五入后保留小数点后n位\n\tCONV(value, from, to):将value的值进行不同进制之间的转换\n\tINET_ATON(ipvalue):将以点分隔的ip地址转化为一个数字\n\tINET_NTOA(value):将数字形式的ip地址转化为以点分隔的ip地址\n\tBENCHMARK(n, expr):将表达式expr重复执行n次，用于测试MySQL处理expr表达式所需要的时间\n\tCONVERT(value USING char_code):将value所使用的字符编码修改为char_code\n*/\n```\n\n## 多行函数\n\n### 多行函数的特征 \n\n- 对一组数据进行汇总\n- 输入是一组数据的集合\n- 输出是单个值\n- **不能嵌套使用！ **\n\n### 常用聚合函数\n\n```sql\n/*\n\tAVG(column):平均值，只适用于数值类型\n\tSUM(column):求和，只适用于数值类型\n\tMAX(column):最大值,可用于数值、字符串、日期类型\n\tMIN(column):最小值,可用于数值、字符串、日期类型\n\tCOUNT(column):出现次数，统计次数时不统计空值\n*/\n```\n\n### GROUP BY\n\n按照某些字段进行分组，值相同的数据会被分成一组\n\n```sql\n # 未指定分组，默认所有人一组，计算平均值\n SELECT AVG(salary)\n FROM employees;\n\n+-------------+\n| AVG(salary) |\n+-------------+\n| 6461.682243 |\n+-------------+\n\n# 按照department_id分组，department_id相同的人分为一组，计算每个组的平均值\n# GROUP BY声明在FROM后面、WHERE后面、ORDER BY前面、LIMIT前面\nSELECT AVG(salary)\nFROM employees\nGROUP BY department_id;\n\n+--------------+\n| AVG(salary)  |\n+--------------+\n|  7000.000000 |\n|  4400.000000 |\n|  9500.000000 |\n|  4150.000000 |\n|  6500.000000 |\n|  3475.555556 |\n|  5760.000000 |\n| 10000.000000 |\n|  8955.882353 |\n| 19333.333333 |\n|  8600.000000 |\n| 10150.000000 |\n+--------------+\n\n# 错误写法，GROUP BY分组后，其他字段（下面语句的job_id）结果会出现错误，但不会报错\n# 查询的非组函数字段一定要写在GROUP BY中\nSELECT department_id, job_id, AVG(salary)\nFROM employees\nGROUP BY department_id;\n\n# MySQL中GROUP BY使用WITH ROLLUP\n# WITH ROLLUP会在查询完成后，把所有数据分在一组再进行一次计算\n# 不能和ORDER BY同时使用\nSELECT department_id,AVG(salary)\nFROM employees\nGROUP BY department_id WITH ROLLUP;\n\n+---------------+--------------+\n| department_id | AVG(salary)  |\n+---------------+--------------+\n|          NULL |  7000.000000 | # 这是一个部门为null的哥们\n|            10 |  4400.000000 |\n|            20 |  9500.000000 |\n|            30 |  4150.000000 |\n|            40 |  6500.000000 |\n|            50 |  3475.555556 |\n|            60 |  5760.000000 |\n|            70 | 10000.000000 |\n|            80 |  8955.882353 |\n|            90 | 19333.333333 |\n|           100 |  8600.000000 |\n|           110 | 10150.000000 |\n|          NULL |  6461.682243 | # 这是所有人的平均工资\n+---------------+--------------+\n```\n\n### HAVING\n\nHAVING语句是用来过滤数据的，它和WHERE的区别在于：\n\n- 一旦过滤条件使用了聚合函数，必须使用HAVING来替换WHERE，否则报错\n- 当过滤条件中没有聚合函数是，则此过滤条件声明在WHERE和HAVING中均可，但WHERE执行效率更高\n- HAVING必须声明在GROUP BY后面，而WHERE必须声明在FROM后面\n\n```sql\n# 查询各个部门中最高工资比10000高的部门信息\n\n# 错误写法\nSELECT department_id, MAX(salary) \nFROM employees \nWHERE MAX(salary)>10000 \nGROUP BY department_id;\n\nERROR 1111 (HY000): Invalid use of group function\n\n# 正确写法：\nSELECT department_id, MAX(salary) \nFROM employees \nGROUP BY department_id \nHAVING MAX(salary)>10000;\n\n+---------------+-------------+\n| department_id | MAX(salary) |\n+---------------+-------------+\n|            20 |    13000.00 |\n|            30 |    11000.00 |\n|            80 |    14000.00 |\n|            90 |    24000.00 |\n|           100 |    12000.00 |\n|           110 |    12000.00 |\n+---------------+-------------+\n\n# 查询部门id为10，20，30，40这四个部门中最高工资比10000高的部门信息\n# 方式一：推荐，执行效率高于方式二\nSELECT department_id, MAX(salary) \nFROM employees \nWHERE department_id IN (10,20,30,40) \nGROUP BY department_id \nHAVING MAX(salary)>10000;\n+---------------+-------------+\n| department_id | MAX(salary) |\n+---------------+-------------+\n|            20 |    13000.00 |\n|            30 |    11000.00 |\n+---------------+-------------+\n2 rows in set (0.02 sec)\n\n# 方式二\n SELECT department_id, MAX(salary) \n FROM employees \n GROUP BY department_id \n HAVING MAX(salary)>10000 AND department_id IN (10,20,30,40);\n+---------------+-------------+\n| department_id | MAX(salary) |\n+---------------+-------------+\n|            20 |    13000.00 |\n|            30 |    11000.00 |\n+---------------+-------------+\n2 rows in set (0.06 sec)\n```\n\n## SQL底层执行原理\n\n### SELECT语句的完整结构\n\n```sql\nSELECT ... , ... , ... \nFROM ... , ... , ...(LEFT / RIGHT) JOIN ... ON ...\nJOIN ... ON ...\nWHERE 多表连接条件 AND 不包含聚合函数的过滤条件\nGROUP BY ... , ...\nHAVING 包含聚合函数的过滤条件\nORDER BY ... , ...(DESC/ASC)\nLIMIT ... , ...\n```\n\n### SELECT语句的执行过程\n\nFROM ... , ... , ... （多表连接会笛卡尔积） -> ON（根据连接条件进行过滤） -> (LEFT / RIGHT  JOIN)  -> WHERE -> GROUP BY -> HAVING  -> SELECT  ->  DISTINCT  -> ORDER BY -> LIMIT\n\n## 子查询\n\n### 子查询的特点\n\n子查询指一个查询语句嵌套在另一个查询语句内部的查询\n\n- 子查询先于主查询运行\n- 子查询结果被主查询使用\n- 子查询要包含在括号内\n- 子查询放在比较条件的右侧\n- 单行操作符对应单行子查询，多行操作符对应多行子查询\n- SELECT中，除了GROUP BY和LIMIT以外，都可以声明子查询\n\n```sql\n# 查询谁的工资比Abel高？\n# 方式一：\nSELECT salary\nFROM employees\nWHERE last_name = 'Abel';\n\nSELECT last_name,salary\nFROM employees\nWHERE salary > 11000;\n\n# 方式二：\nSELECT e2.last_name, e2.salary\nFROM employees e1,employees e2\nWHERE e1.last_name = 'Abel'\nAND e2.salary > e1.salary;\n\n# 方式三：子查询\nSELECT last_name, salary\nFROM employees\nWHERE salary > (\n    \t\t\tSELECT salary\n    \t\t\tFROM employees\n    \t\t\tWHERE last_name = 'Abel'\n\t\t\t\t);\n```\n\n\n\n### 子查询的分类\n\n1. 从内查询返回的结果的条目数：  单行子查询    多行子查询\n2. 从内查询的执行次数：  相关子查询    不相关子查询\n\n### 单行子查询\n\n子查询返回单行数据，使用单行操作符\n\n单行操作符： =  >  >=  <  <=  <>\n\n```sql\n\n\t# 查询工资大于149号员工工资的员工信息\n\tSELECT salary\n\tFROM employees\n\tWHERE salary > (SELECT salary\n\t\t\t\t\tFROM employees\n\t\t\t\t\tWHERE employee_id = 149);\n\t\t\t\t\t\n\t# 返回job_id与141号员工相同，salary比143号员工多的员工姓名，job_id和工资\n\tSELECT last_name, job_id, salary\n\tFROM employees\n\tWHERE job_id = (SELECT job_id\n                    FROM employees\n                    WHERE employee_id = 141\n                    )\n    AND salary >   (SELECT salary\n                    FROM employees\n                    WHERE employee_id = 143);\n                    \n   # 查询和141号员工的manager_id,department_id相同的其他员工的employee_id,manager_id,department_id\n   SELECT employee_id,manager_id,department_id\n   FROM employees\n   WHERE (manager_id, department_id) = (\n   \t\t\t\t\t\t\t\t\t\tSELECT manager_id, department_id\n   \t\t\t\t\t\t\t\t\t\tFROM employees\n   \t\t\t\t\t\t\t\t\t\tWHERE employee_id = 141\n   \t\t\t\t\t\t\t\t\t\t)\n   AND employee_id <> 141;\n\n```\n\n### 多行子查询\n\n子查询返回多行，使用多行操作符\n\n多行操作符： IN\tANY\tALL\tSOME(实际上是ANY的别名，和ANY相同)\n\n```sql\n # 查询和141号或174号员工的manager_id,department_id相同的其他员工的employee_id,manager_id,department_id\nSELECT employee_id,manager_id,department_id\nFROM employees\nWHERE (manager_id, department_id) in (\n    SELECT manager_id, department_id\n    FROM employees\n    WHERE employee_id in (141,174)\n)\n  AND employee_id not in (141,174);\n# 查询其他job_id中比job_id为'IT_PROG'部门任意工资低的员工的员工号\nSELECT employee_id, last_name, job_id,salary\nFROM employees\nWHERE job_id <> 'IT_PROG'\nAND salary < (SELECT MAX(salary)\n                FROM employees\n                WHERE job_id = 'IT_PROG');\n                \nSELECT employee_id, last_name, job_id,salary\nFROM employees\nWHERE job_id <> 'IT_PROG'\nAND salary < ANY (SELECT salary\n                FROM employees\n                WHERE job_id = 'IT_PROG');\n\n# 查询平均工资最低的部门id\n# 方法一：\nSELECT department_id, AVG(salary)\nFROM employees\nGROUP BY department_id\nHAVING AVG(salary) <= ALL (\n    SELECT AVG(salary)\n    FROM employees\n    GROUP BY department_id\n);\n\n# 方法二：把子查询当成一个表，该临时表必须有一个别名\n\nSELECT department_id\nFROM employees\nGROUP BY department_id\nHAVING AVG(salary) = (\n                    SELECT MIN(avg_sal)\n                \tFROM (SELECT AVG(salary) avg_sal\n                    \t\tFROM employees\n                    \t\tGROUP BY department_id) dept\n                \t);\n\n```\n\n### 相关子查询\n\n如果子查询的执行依赖于外部查询，通常情况下都是因为子查询中的表用到了外部的表，并进行了条件关联，因此每执行一次外部查询，子查询都要重新计算一次，这样的子查询就称之为关联子查询。\n\n```sql\n# 查询员工中工资大于本部门平均工资的员工的last_name, salary和其department_id\n# 方式一：相关子查询\nSELECT last_name, salary, department_id\nFROM employees e1\nWHERE salary > (\n\t\t\t\tSELECT AVG(salary)\n    \t\t\tFROM employees e2\n    \t\t\tWHERE department_id = e1.department_id\n\t\t\t\t);\n\n# 方式二：在FROM中声明子查询\nSELECT e.last_name, e.salary, e.department_id\nFROM employees e,(\n    SELECT department_id,AVG(salary) avg_sal\n\tFROM employees\n\tGROUP BY department_id\n) t_dept_avg_sal\nWHERE e.department_id = t_dept_avg_sal.department_id\nAND e.salary > t_dept_avg_sal.avg_sal\n\n# 查询员工的id, salary, 按照department_name排序\nSELECT e.employee_id, e.salary\nFROM employees e \nORDER BY (\n\tSELECT department_name\n    FROM departments d\n    WHERE e.department_id = d.department_id\n)\n\n```\n\n### EXISTS 和 NOT EXISTS\n\n\n\n关联子查询通常也会和EXISTS操作符一起来使用，用来检查在子查询中是否存在满足条件的行。·\n\n如果在子查询中不存在满足条件的行:\n\n- 条件返回FALSE\n- 继续在子查询中查找\n\n如果在子查询中存在满足条件的行:\n\n- 不在子查询中继续查找\n- 条件返回TRUE\n\nNOT EXISTS关键字表示如果不存在某种条件，则返回TRUE，否则返回FALSE。\n\n```sql\n# 查询公司管理者的employee_id, last_name, job_id, department_id\n# 方式一\nSELECT DISTINCT  m.employee_id, m.last_name, m.job_id, m.department_id, m.manager_id\nFROM employees e JOIN employees m\nON e.manager_id = m.employee_id\n\n# 方式二\nSELECT employee_id, last_name, job_id, department_id\nFROM employees\nWHERE employee_id IN (\n\tSELECT DISTINCT manager_id\n    FROM employees\n);\n\n# 方式三 使用EXISTS\nSELECT e1.employee_id, e1.last_name, e1.job_id, e1.department_id\nFROM employees e1\nWHERE EXISTS (\n\tSELECT *\n    FROM employees e2\n    WHERE e1.employee_id = e2.manager_id\n);\n```\n\n## 增删改\n\n### 插入数据\n\n- 预处理\n\n  ```sql\n  CREATE TABLE IF NOT EXISTS emp1(\n  \tid INT,\n      `name` VARCHAR(15),\n      hire_date DATE,\n      salary DOUBLE(10,2)\n  );\n  ```\n\n  \n\n- 方式一：一条一条添加数据\n\n  ```sql\n  # 不指定添加的字段，要严格按照表的字段来匹配\n  INSERT INTO emp1\n  VALUES (1,'Tom','2000-12-21',3400);  # 按照顺序匹配id , name, hire_date, salary\n  \n  # 指定添加的字段\n  # 指定表的全部字段，按照自己指定的顺序匹配\n  INSERT INTO emp1(id, hire_date, salary, `name`) VALUES(2,'1999-09-09',4000,'Jerry');\n  \n  # 指定表的部分字段，没有知名的字段默认为NULL值\n  INSERT INTO emp1(id, salary, `name`) VALUES(3, 3500 , 'David');\n  \n  # 插入多条记录\n  INSERT INTO emp1(id, salary, `name`) \n  VALUES\n  (4,5000,'Jim'),\n  (5,6000,'Jelinal');\n  ```\n\n- 方式二：将查询结果插入到表中\n\n  ```sql\n  INSERT INTO emp1(id, `name`, salary, hire_date)\n  # 查询语句， 查询的字段要和要插入的表字段一一对应\n  # 从查询结果插入时，要注意两个表的字段长度，查询的表的字段长度不能高于要插入的表的字段长度，如果一定要插入，需要先修改一下表\n  SELECT employee_id, last_name, salary, hire_date\n  FROM employees\n  WHERE department_id IN (50,60);\n  ```\n\n### 更新数据\n\n```sql\n# UPDATE ... SET ... WHERE ...\nUPDATE emp1\nSET hire_date = CURDATE()\nWHERE id = 5;# WHERE一般情况下必须要加，如果不加，会改整张表的所有记录\n\n# 修改数据时存在不成功的情况，可能是由于约束的影响\n```\n\n### 删除数据\n\n```sql\n# DELETE FROM ... WHERE ...\n# 删除数据时也存在不成功的情况，可能是由于约束的影响\nDELETE FROM emp1\nWHERE id = 1;\n```\n\n\n\n## 创建和管理数据库和表\n\n### 标识符命名规则\n\n- 数据库名、表名不得超过30个字符，变量名限制为29个。必须只能包含A-Z,a-z,0-9，共63个字符\n- 数据库名、表名、字段名等对象名中间不要包含空格\n- 同一个MySQL软件中，数据库不能同名；同一个库中，表不能重名；同一个表中，字段不能重名\n- 必须保证你的字段没有和保留字、数据库系统或常用方法冲突。如果坚持使用，请在SQL语句中使用`(着重号)引起来\n- 保持字段名和类型的一致性：在命名字段并为其指定数据类型的时候一定要保证一致性，假如数据类型在一个表里是整数，那在另一个表里可就别变成字符型了\n\n### 创建数据库\n\n- 方式一：创建数据库\n\n  ```sql\n  CREATE DATABASE mytest1;\n  ```\n\n- 方式二：指定字符集\n\n  ```sql\n  CREATE DATABASE mytest1 CHARACTER SET 'utf8mb4';\n  \n  # 查看数据库的创建信息\n  SHOW CREATE DATABASE mytest1;\n  ```\n\n- 方式三：创建之前判断是否存在，如果要创建的数据库已经存在，创建不成功，不会报错：\n\n  ```sql\n  CREATE DATABASE IF NOT EXISTS mytest1;\n  ```\n\n### 管理数据库\n\n- 查看当前连接中的数据库有哪些\n\n  ```sql\n  SHOW DATABASES;\n  ```\n\n- 切换数据库\n\n  ```sql\n  USE mytest2;\n  ```\n\n- 查看当前数据库中保存的数据表\n\n  ```sql\n  SHOW TABLES;\n  ```\n\n- 查看当前使用的数据库\n\n  ```sql\n  SELECT DATABASE() FROM DUAL;\n  ```\n\n- 查看指定数据库下保存的数据表\n\n  ```sql\n  SHOW TABLES FROM 数据库名;\n  ```\n\n### 修改数据库\n\n- 更改数据库字符集\n\n  ```sql\n  ALTER DATABASE mytest1 CHARACTER SET 'utf8';\n  ```\n\n### 删除数据库\n\n- 方式一：\n\n  ```sql\n  DROP DATABASE mytest1;\n  ```\n\n- 方式二：\n\n  ```sql\n  DROP DATABASE IF EXISTS mytest1;\n  ```\n\n### 创建数据表\n\n- 方式一：\n\n  ```sql\n  USE mytest1;\n  CREATE TABLE IF NOT EXISTS myemp1( # 需要用户具有创建表的权限\n  \tid INT,\n      emp_name VARCHAR(15), # 使用VARCHAR字符串必须指定长度\n      hire_date DATE\n  ); \n  \n  # 查看表的创建信息\n  SHOW CREATE TABLE myemp1;# 如果创建表时没有指定字符集，默认使用表所在的数据库的字符集\n  ```\n\n- 方式二：基于现有的表，同时导入数据\n\n  ```sql\n  CREATE TABLE myemp2\n  AS\n  SELECT employee_id, last_name ,salary\n  FROM employees;\n  ```\n\n- MySQL8新特性：计算列\n\n  ```sql\n  # 计算列，是某一列的值是通过其他列计算得来的，其他列变化时计算列会随之更新。\n  # 创建表时声明计算列：\n  CREATE TABLE tb1(\n      id INT,\n  \ta INT,\n      b INT,\n      c INT GENERATED ALWAYS AS (a + b) VIRTUAL # c就是计算列，它的值总等于a+b\n  );\n  \n  # 向表中插入值\n  INSERT INTO tb1(id,a,b) # 这里只插入了a=11和b=22\n  VALUES\n  (1,11,22);\n  \n  # 查询\n  SELECT * FROM tb1;\n  # c已经被同步成了11+22=33\n  +------+------+------+------+\n  | id   | a    | b    | c    |\n  +------+------+------+------+\n  |    1 |   11 |   22 |   33 |\n  +------+------+------+------+\n  1 row in set (0.02 sec)\n  ```\n\n  \n\n### 查看表结构\n\n```sql\nDESC myemp1;\n```\n\n### 修改表\n\n- 添加字段\n\n  ```sql\n  ALTER TABLE myemp1\n  ADD salary DOUBLE(10,2) # 一共十位数字，小数点后两位，默认添加到表的最后面\n  \n  ALTER TABLE myemp1\n  ADD phone_number VARCHAR(20) FIRST; # 把phone_number添加到第一个字段的位置\n  \n  ALTER TABLE myemp1\n  ADD email VARCHAR(45) AFTER emp_name; # 把email放到emp_name后面\n  ```\n\n  \n\n- 修改字段\n\n  ```sql\n  ALTER TABLE myemp1\n  MODIFY emp_name VARCHAR(35) DEFAULT 'AAA';\n  ```\n\n  \n\n- 重命名一个字段\n\n  ```sql\n  ALTER TABLE myemp1\n  CHANGE salary monthly_salary DOUBLE(10,2);\n  \n  ALTER TABLE myemp1\n  CHANGE email my_email VARCHAR(50);\n  ```\n\n  \n\n- 删除一个字段\n\n  ```sql\n  ALTER TABLE myemp1\n  DROP COLUMN my_email;\n  ```\n\n### 重命名表\n\n- 方式一：\n\n  ```sql\n  RENAME TABLE emp1\n  TO myemp11;\n  ```\n\n- 方式二：\n\n  ```sql\n  ALTER TABLE myemp2\n  RENAME TO myemp12;\n  ```\n\n### 删除表\n\n```sql\nDROP TABLE IF EXISTS 表名;\n```\n\n### 清空表\n\n```sql\n# 清空表中的数据，但是结构还在\nTRUNCATE TABLE 表名;\n```\n\n### COMMIT 和 ROLLBACK\n\n- COMMIT: 提交数据， 一旦执行，数据就被永久保存到了数据库中，不可以回滚。\n- ROLLBACK：回滚数据，一旦执行，可以实现数据的回滚。回滚到最近的一次COMMIT之后。\n\n### 对比TRUNCATE 和 DELETE\n\n- 相同点：都可以实现对表中所有数据的删除，同时保留表结构\n- 不同点：一旦执行TRUNCATE，表数据全部清除，不可以回滚；DELETE 可以全部清除（不带WHERE），数据可以实现回滚\n\n### DDL和DML的说明\n\n1. DDL的操作一旦执行，就不可以回滚，`SET autocommit = FALSE`对DDL无效，因为在执行完DDL之后，一定会执行一次COMMIT。MySQL8.0以后，DDL的操作引入了原子性，要么都执行，要么都不执行、\n2. DML操作默认情况也是不可以回滚的，但是如果在执行DML之前，执行了`SET autocommit = FALSE`，则执行的DML操作就可以回滚。\n\n演示：\n\n```sql\n# 创建一个备份表，在备份表里面操作\nCREATE TABLE employee_copy\nAS\nSELECT *\nFROM employees;\n\n# 看一下备份表里面的数据\nSELECT employee_id,last_name, salary\nFROM employee_copy;\n\n# 和employee表一样，共107条数据\n+-------------+-------------+----------+\n| employee_id | last_name   | salary   |\n+-------------+-------------+----------+\n|         100 | King        | 24000.00 |\n|         101 | Kochhar     | 17000.00 |\n|         102 | De Haan     | 17000.00 |\n|         103 | Hunold      |  9000.00 |\n|         104 | Ernst       |  6000.00 |\n|         105 | Austin      |  4800.00 |\n|         106 | Pataballa   |  4800.00 |\n|         107 | Lorentz     |  4200.00 |\n|         108 | Greenberg   | 12000.00 |\n|         109 | Faviet      |  9000.00 |\n|         110 | Chen        |  8200.00 |\n|         ....| ...         |       ...|\n+-------------+-------------+----------+\n107 rows in set (0.11 sec)\n\n\n# 先提交，相当于存档，保证能够回滚\nCOMMIT;\n -- Query OK, 0 rows affected (0.09 sec)\n\n# 关闭自动提交事务\nSET autocommit = FALSE;\n -- Query OK, 0 rows affected (0.02 sec)\n\n# 删除所有表数据\nDELETE FROM employee_copy;\n -- Query OK, 107 rows affected (0.02 sec)\n \n# 查看表数据，确定已经删掉了\nSELECT employee_id,last_name, salary\nFROM employee_copy;\n -- Empty set (0.02 sec)\n \n# 回滚\nROLLBACK;\n -- Query OK, 0 rows affected (0.02 sec)\n\n# 查看表数据，发现已经回来了\nSELECT employee_id,last_name, salary\nFROM employee_copy;\n+-------------+-------------+----------+\n| employee_id | last_name   | salary   |\n+-------------+-------------+----------+\n|         100 | King        | 24000.00 |\n|         101 | Kochhar     | 17000.00 |\n|         102 | De Haan     | 17000.00 |\n|         103 | Hunold      |  9000.00 |\n|         104 | Ernst       |  6000.00 |\n|         105 | Austin      |  4800.00 |\n|         106 | Pataballa   |  4800.00 |\n|         107 | Lorentz     |  4200.00 |\n|         108 | Greenberg   | 12000.00 |\n|         109 | Faviet      |  9000.00 |\n|         110 | Chen        |  8200.00 |\n|         ....| ...         |       ...|\n+-------------+-------------+----------+\n107 rows in set (0.11 sec)\n```\n\n\n\n\n\n","slug":"mysql-基础篇","published":1,"updated":"2024-04-09T10:59:25.103Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clusa3woh00302s7e26uz3yv8","content":"<h2 id=\"SQL分类\"><a href=\"#SQL分类\" class=\"headerlink\" title=\"SQL分类\"></a>SQL分类</h2><ol>\n<li><p>DDL：数据定义语言</p>\n<ul>\n<li>CREATE</li>\n<li>ALTER</li>\n<li>DROP</li>\n<li>RENAME</li>\n<li>TRUNCATE</li>\n</ul>\n</li>\n<li><p>DML：数据操作语言</p>\n<ul>\n<li>INSERT</li>\n<li>DELETE</li>\n<li>UPDATE</li>\n<li>SELECT</li>\n</ul>\n</li>\n<li><p>DCL：数据控制语言</p>\n<ul>\n<li>COMMIT</li>\n<li>ROLLBACK</li>\n<li>SAVEPOINT</li>\n<li>GRANT</li>\n<li>REVOKE</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"SELECT语句\"><a href=\"#SELECT语句\" class=\"headerlink\" title=\"SELECT语句\"></a>SELECT语句</h2><h3 id=\"查询常量\"><a href=\"#查询常量\" class=\"headerlink\" title=\"查询常量\"></a>查询常量</h3><pre class=\"language-SQL\" data-language=\"SQL\"><code class=\"language-SQL\">SELECT 19;\n\nSELECT 1+1 FROM DUAL;  # dual：伪表\n\nSELECT 0, 123, employee_id, last_name\nFROM employees;</code></pre>\n\n<h3 id=\"查询所有字段\"><a href=\"#查询所有字段\" class=\"headerlink\" title=\"查询所有字段\"></a>查询所有字段</h3><pre class=\"language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token keyword\">SELECT</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">FROM</span> employees<span class=\"token punctuation\">;</span></code></pre>\n\n<h3 id=\"查询部分字段\"><a href=\"#查询部分字段\" class=\"headerlink\" title=\"查询部分字段\"></a>查询部分字段</h3><pre class=\"language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token keyword\">SELECT</span> employee_id<span class=\"token punctuation\">,</span> last_name<span class=\"token punctuation\">,</span> salary\n<span class=\"token keyword\">FROM</span> employees<span class=\"token punctuation\">;</span></code></pre>\n\n<h3 id=\"列的别名\"><a href=\"#列的别名\" class=\"headerlink\" title=\"列的别名\"></a>列的别名</h3><pre class=\"language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token comment\">/*\n\t两种方式：\n\t1.列原名 别名，如下面语句的employee_id emp_id\n\t2.列原名 AS 别名，如下面语句中的last_name AS lname\n\t3.基于前两种方式，可以用双引号括起别名，用于别名有空格的情况，如下面语句的salary*12 “annual sal”，但不要使用单引号\n*/</span>\n<span class=\"token keyword\">SELECT</span> employee_id emp_id<span class=\"token punctuation\">,</span> last_name <span class=\"token keyword\">AS</span> lname<span class=\"token punctuation\">,</span> salary<span class=\"token operator\">*</span><span class=\"token number\">12</span> “annual sal”\n<span class=\"token keyword\">FROM</span> employees<span class=\"token punctuation\">;</span></code></pre>\n\n<h3 id=\"去除重复行\"><a href=\"#去除重复行\" class=\"headerlink\" title=\"去除重复行\"></a>去除重复行</h3><pre class=\"language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token comment\"># 正确用法</span>\n<span class=\"token keyword\">SELECT</span> \t<span class=\"token keyword\">DISTINCT</span> department_id\n<span class=\"token keyword\">FROM</span> employees<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\"># 错误用法</span>\n<span class=\"token keyword\">SELECT</span> salary<span class=\"token punctuation\">,</span> <span class=\"token keyword\">DISTINCT</span> department_id\n<span class=\"token keyword\">FROM</span> employees<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\"># 不会报错，department_id 和 salary 作为整体</span>\n<span class=\"token keyword\">SELECT</span> <span class=\"token keyword\">DISTINCT</span> department_id， salary\n<span class=\"token keyword\">FROM</span> employees<span class=\"token punctuation\">;</span></code></pre>\n\n<h3 id=\"空值参与运算\"><a href=\"#空值参与运算\" class=\"headerlink\" title=\"空值参与运算\"></a>空值参与运算</h3><pre class=\"language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token comment\"># 空值：null</span>\n<span class=\"token comment\"># null不等于0，'',’null'</span>\n<span class=\"token comment\"># null值参与运算， 结果一定也为空</span>\n<span class=\"token comment\"># 绩效比例commission_pct为null时，年工资也为null</span>\n<span class=\"token keyword\">SELECT</span> employee_id salary <span class=\"token string\">\"月工资\"</span><span class=\"token punctuation\">,</span> salary <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token operator\">+</span> commission_pct<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">12</span> <span class=\"token string\">\"年工资\"</span>\n\n<span class=\"token comment\"># 把null当成0</span>\n<span class=\"token keyword\">SELECT</span> employee_id salary <span class=\"token string\">\"月工资\"</span><span class=\"token punctuation\">,</span> salary <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token operator\">+</span> IFNULL<span class=\"token punctuation\">(</span>commission_pct<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">12</span> <span class=\"token string\">\"年工资\"</span></code></pre>\n\n<h3 id=\"着重号-96\"><a href=\"#着重号-96\" class=\"headerlink\" title=\"着重号 &#96;\"></a>着重号 &#96;</h3><pre class=\"language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token comment\"># 用于表名和关键字相同时</span>\n<span class=\"token keyword\">SELECT</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">FROM</span> <span class=\"token keyword\">ORDER</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">SELECT</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">FROM</span> <span class=\"token identifier\"><span class=\"token punctuation\">`</span>order<span class=\"token punctuation\">`</span></span><span class=\"token punctuation\">;</span></code></pre>\n\n<h3 id=\"过滤条件\"><a href=\"#过滤条件\" class=\"headerlink\" title=\"过滤条件\"></a>过滤条件</h3><pre class=\"language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token comment\"># WHERE 紧跟在 FROM 子句后</span>\n<span class=\"token comment\"># WHERE 筛选后面的条件为1的数据， 0和NULL会被过滤</span>\n<span class=\"token comment\"># WHERE 不能使用类的别名</span>\n<span class=\"token keyword\">SELECT</span> <span class=\"token operator\">*</span> \n<span class=\"token keyword\">FROM</span> employees\n<span class=\"token keyword\">WHERE</span> last_name <span class=\"token operator\">=</span> <span class=\"token string\">'King'</span><span class=\"token punctuation\">;</span></code></pre>\n\n<h3 id=\"排序\"><a href=\"#排序\" class=\"headerlink\" title=\"排序\"></a>排序</h3><pre class=\"language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token comment\"># 如果没有使用排序，查询返回的数据默认按照添加数据的顺序</span>\n<span class=\"token comment\"># 使用ORDER BY对数据进行排序，升序ASC， 降序DESC，默认升序</span>\n\n<span class=\"token comment\"># 按照salary从高到低顺序显示员工信息</span>\n<span class=\"token keyword\">SELECT</span> employee_id<span class=\"token punctuation\">,</span> last_name<span class=\"token punctuation\">,</span> salary\n<span class=\"token keyword\">FROM</span> employees\n<span class=\"token keyword\">ORDER</span> <span class=\"token keyword\">BY</span> salary <span class=\"token keyword\">DESC</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\"># 按照salary从低到高顺序显示员工信息</span>\n<span class=\"token keyword\">SELECT</span> employee_id<span class=\"token punctuation\">,</span> last_name<span class=\"token punctuation\">,</span> salary\n<span class=\"token keyword\">FROM</span> employees\n<span class=\"token keyword\">ORDER</span> <span class=\"token keyword\">BY</span> salary <span class=\"token keyword\">ASC</span><span class=\"token punctuation\">;</span> <span class=\"token comment\"># ASC可以不写</span>\n\n<span class=\"token keyword\">SELECT</span> employee_id<span class=\"token punctuation\">,</span> last_name<span class=\"token punctuation\">,</span> salary\n<span class=\"token keyword\">FROM</span> employees\n<span class=\"token keyword\">ORDER</span> <span class=\"token keyword\">BY</span> salary<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\"># 使用类的别名排序</span>\n<span class=\"token keyword\">SELECT</span> employee_id emp_id<span class=\"token punctuation\">,</span> last_name <span class=\"token keyword\">AS</span> lname<span class=\"token punctuation\">,</span> salary<span class=\"token operator\">*</span><span class=\"token number\">12</span> “annual sal”\n<span class=\"token keyword\">FROM</span> employees<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">ORDER</span> <span class=\"token keyword\">BY</span> annual_sal<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\"># 二级排序</span>\n<span class=\"token comment\"># 显示员工信息，按照department_id降序排序，salary升序排序</span>\n<span class=\"token keyword\">SELECT</span> employee_id<span class=\"token punctuation\">,</span> last_name<span class=\"token punctuation\">,</span> salary\n<span class=\"token keyword\">FROM</span> employees\n<span class=\"token keyword\">ORDER</span> <span class=\"token keyword\">BY</span> department_id <span class=\"token keyword\">DESC</span><span class=\"token punctuation\">,</span> salary <span class=\"token keyword\">ASC</span><span class=\"token punctuation\">;</span></code></pre>\n\n<h3 id=\"分页\"><a href=\"#分页\" class=\"headerlink\" title=\"分页\"></a>分页</h3><pre class=\"language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token comment\"># 使用LIMIT使用分页操作</span>\n<span class=\"token comment\"># LIMIT 偏移量,条目数</span>\n<span class=\"token comment\"># LIMIT 0,20  表示偏移量为0，显示20条数据</span>\n\n<span class=\"token keyword\">SELECT</span> employee_id<span class=\"token punctuation\">,</span> last_name\n<span class=\"token keyword\">FROM</span> employees\n<span class=\"token keyword\">LIMIT</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">20</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\"># MySQL 8.0新特性</span>\n<span class=\"token comment\"># LIMIT 条目数 OFFSET 偏移量</span>\n<span class=\"token keyword\">SELECT</span> employee_id<span class=\"token punctuation\">,</span> last_name\n<span class=\"token keyword\">FROM</span> employees\n<span class=\"token keyword\">LIMIT</span> <span class=\"token number\">20</span> <span class=\"token keyword\">OFFSET</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></code></pre>\n\n\n\n<h2 id=\"显示表结构\"><a href=\"#显示表结构\" class=\"headerlink\" title=\"显示表结构\"></a>显示表结构</h2><pre class=\"language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token keyword\">DESCRIBE</span> employees<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">DESC</span> employees<span class=\"token punctuation\">;</span></code></pre>\n\n<h2 id=\"运算符\"><a href=\"#运算符\" class=\"headerlink\" title=\"运算符\"></a>运算符</h2><h3 id=\"算术运算符\"><a href=\"#算术运算符\" class=\"headerlink\" title=\"算术运算符\"></a>算术运算符</h3><p>+、-、*、&#x2F;或DIV、%或MOD</p>\n<pre class=\"language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token keyword\">SELECT</span> <span class=\"token number\">100</span> <span class=\"token operator\">+</span> <span class=\"token string\">'1'</span> <span class=\"token keyword\">FROM</span> DUAL<span class=\"token punctuation\">;</span> <span class=\"token comment\"># 返回101， 会将字符串转换为数值</span>\n<span class=\"token keyword\">SELECT</span> <span class=\"token number\">100</span> <span class=\"token operator\">+</span> <span class=\"token string\">'a'</span> <span class=\"token keyword\">FROM</span> DUAL<span class=\"token punctuation\">;</span> <span class=\"token comment\"># 返回100，将非数字字符串当作0</span>\n\n<span class=\"token keyword\">SELECT</span> <span class=\"token number\">100</span><span class=\"token operator\">/</span><span class=\"token number\">0</span> <span class=\"token keyword\">FROM</span> DUAL<span class=\"token punctuation\">;</span> <span class=\"token comment\"># 返回NULL</span></code></pre>\n\n<h3 id=\"比较运算符\"><a href=\"#比较运算符\" class=\"headerlink\" title=\"比较运算符\"></a>比较运算符</h3><p>比较结果为真返回1， 为假返回0， 其他情况返回NULL</p>\n<p>&#x3D;  \t&lt;&#x3D;&gt;（安全等于） \t&lt;&gt;（不等于） \t!&#x3D;\t&lt;\t&lt;&#x3D;\t&gt;\t&gt;&#x3D;</p>\n<pre class=\"language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token comment\"># 两边都是字符串，按照ANSI进行比较</span>\n<span class=\"token comment\"># 两边都是数字，按照数值比较</span>\n<span class=\"token comment\"># 数字和字符串相比，会产生字符串的隐形转换</span>\n<span class=\"token comment\"># null参与运算返回null</span>\n<span class=\"token keyword\">SELECT</span> <span class=\"token number\">1</span> <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span> <span class=\"token operator\">!=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span> <span class=\"token operator\">=</span> <span class=\"token string\">'1'</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span> <span class=\"token operator\">=</span> <span class=\"token string\">'A'</span> <span class=\"token keyword\">FROM</span> DUAL<span class=\"token punctuation\">;</span><span class=\"token comment\"># 返回0，1，1，1</span>\n<span class=\"token keyword\">SELECT</span> <span class=\"token string\">'A'</span> <span class=\"token operator\">=</span> <span class=\"token string\">'A'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'A'</span> <span class=\"token operator\">=</span> <span class=\"token string\">'B'</span> <span class=\"token keyword\">FROM</span> DUAL<span class=\"token punctuation\">;</span><span class=\"token comment\"># 返回1，0</span>\n<span class=\"token keyword\">SELECT</span> <span class=\"token number\">1</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">NULL</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">NULL</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">NULL</span> <span class=\"token keyword\">FROM</span> DUAL<span class=\"token punctuation\">;</span><span class=\"token comment\"># 返回NULL, NULL</span>\n\n<span class=\"token comment\"># &lt;=> 安全等于 在无NULL时等同于= ， 在有NULL时，两边都是NULL为1， 只有一个NULL为0</span>\n<span class=\"token keyword\">SELECT</span> <span class=\"token number\">1</span> <span class=\"token operator\">&lt;=></span> <span class=\"token boolean\">NULL</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">NULL</span> <span class=\"token operator\">&lt;=></span> <span class=\"token boolean\">NULL</span> <span class=\"token keyword\">FROM</span> DUAL<span class=\"token punctuation\">;</span><span class=\"token comment\"># 返回0，1</span>\n\n<span class=\"token keyword\">SELECT</span> employee_id<span class=\"token punctuation\">,</span> last_name<span class=\"token punctuation\">,</span> salary\n<span class=\"token keyword\">FROM</span> employees<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">WHERE</span> commission_pct <span class=\"token operator\">&lt;=></span> <span class=\"token boolean\">NULL</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">SELECT</span> employee_id<span class=\"token punctuation\">,</span> last_name<span class=\"token punctuation\">,</span> salary\n<span class=\"token keyword\">FROM</span> employees<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">WHERE</span> <span class=\"token operator\">NOT</span> commission_pct <span class=\"token operator\">&lt;=></span> <span class=\"token boolean\">NULL</span><span class=\"token punctuation\">;</span></code></pre>\n\n<h3 id=\"非符号类型运算符\"><a href=\"#非符号类型运算符\" class=\"headerlink\" title=\"非符号类型运算符\"></a>非符号类型运算符</h3><pre class=\"language-Sql\" data-language=\"Sql\"><code class=\"language-Sql\"># IS NULL &#x2F; IS NOT NULL &#x2F; ISNULL 判断字段是否为NULL\nSELECT employee_id, last_name, salary\nFROM employees;\nWHERE commission_pct IS NOT NULL;\n\n\n# LEAST() 求最小值&#x2F; GREATEST() 求最大值\nSELECT LEAST(&#39;A&#39;, &#39;B&#39;, &#39;E&#39;), GREATEST(&#39;A&#39;, &#39;B&#39;, &#39;E&#39;) FROM DUAL; # 返回A  E\n\n# BETWEEN 条件一 AND 条件二  包含条件一和条件二,要求条件一为下界， 条件二为上界，不能交换\n# 查询工资在6000和8000的员工信息\nSELECT employee_id, last_name, salary\nFROM employees\nWHERE salary BETWEEN 6000 AND 8000;\n\nSELECT employee_id, last_name, salary\nFROM employees\nWHERE salary &gt;&#x3D; 6000 &amp;&amp; SALARY &lt;&#x3D; 8000;\n\n# IN \\ NOT IN\n# 查询部门为10，20，30的员工信息\nSELECT last_name, salary, department_id\nFROM employees\nWHERE department_id &#x3D; 10 OR department_id &#x3D; 20 OR department_id &#x3D; 30\n\nSELECT last_name, salary, department_id\nFROM employees\nWHERE department_id IN (10,20,30);\n\n# LIKE 模糊查询\n# 查询last_name中包含字符a的元素信息\nSELECT last_name, salary, department_id\nFROM employees\nWHERE last_name LIKE &#39;%a%&#39;; # &#39;%&#39;代表不确定个数的字符\n\n# 查询last_name中包含字符a和e的元素信息\nSELECT last_name, salary, department_id\nFROM employees\nWHERE last_name LIKE &#39;%a%&#39; AND last_name LIKE &#39;%e%&#39;; # &#39;%&#39;代表不确定个数的字符\n\n# 查询last_name中包含第二个字符是a的元素信息\nSELECT last_name, salary, department_id\nFROM employees\nWHERE last_name LIKE &#39;_a%&#39;; # &#39;_&#39;代表一个字符\n\n# 正则表达式\n# REGEXP \\ RLIKE: 正则表达式\nSELECT &#39;shlstart&#39; REGEXP &#39;^s&#39;,&#39;shlstart&#39; REGEXP &#39;t$&#39;,&#39;shlstart&#39; REGEXP &#39;hk&#39;\nFROM DUAL;</code></pre>\n\n<h3 id=\"逻辑运算符\"><a href=\"#逻辑运算符\" class=\"headerlink\" title=\"逻辑运算符\"></a>逻辑运算符</h3><p>! &#x2F; NOT  \t&amp;&amp; &#x2F; AND  \t || &#x2F; OR   \tXOR（异或）</p>\n<h2 id=\"多表查询\"><a href=\"#多表查询\" class=\"headerlink\" title=\"多表查询\"></a>多表查询</h2><h3 id=\"等值连接和非等值连接\"><a href=\"#等值连接和非等值连接\" class=\"headerlink\" title=\"等值连接和非等值连接\"></a>等值连接和非等值连接</h3><pre class=\"language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token comment\"># 错误写法，缺少了连接条件，会出现笛卡尔积</span>\n<span class=\"token keyword\">SELECT</span> employee_id<span class=\"token punctuation\">,</span> department_name\n<span class=\"token keyword\">FROM</span> employees<span class=\"token punctuation\">,</span> departments<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">SELECT</span> employee_id<span class=\"token punctuation\">,</span> department_name\n<span class=\"token keyword\">FROM</span> employees <span class=\"token keyword\">CROSS</span> <span class=\"token keyword\">JOIN</span> departments<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\"># 正确写法</span>\n<span class=\"token comment\"># 等值连接</span>\n<span class=\"token comment\"># 如果查询语句中出现了多个表中都存在的字段，则必须指明字段所在的表</span>\n<span class=\"token keyword\">SELECT</span> employee_id<span class=\"token punctuation\">,</span> department_name<span class=\"token punctuation\">,</span>employees<span class=\"token punctuation\">.</span>department_id\n<span class=\"token keyword\">FROM</span> employees<span class=\"token punctuation\">,</span> departments<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">WHERE</span> employees<span class=\"token punctuation\">.</span>department_id <span class=\"token operator\">=</span> departments<span class=\"token punctuation\">.</span>department_id<span class=\"token punctuation\">;</span>\n\n\n<span class=\"token comment\"># 给表起别名,起了别名必须用</span>\n<span class=\"token keyword\">SELECT</span> emp<span class=\"token punctuation\">.</span>employee_id<span class=\"token punctuation\">,</span> dept<span class=\"token punctuation\">.</span>department_name<span class=\"token punctuation\">,</span>emp<span class=\"token punctuation\">.</span>department_id\n<span class=\"token keyword\">FROM</span> employees emp<span class=\"token punctuation\">,</span> departments dept<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">WHERE</span> emp<span class=\"token punctuation\">.</span>department_id <span class=\"token operator\">=</span> dept<span class=\"token punctuation\">.</span>department_id<span class=\"token punctuation\">;</span>\n\n\n<span class=\"token comment\"># 非等值连接</span>\n<span class=\"token keyword\">SELECT</span> last_name<span class=\"token punctuation\">,</span> salary<span class=\"token punctuation\">,</span> grade_level\n<span class=\"token keyword\">FROM</span> employees e<span class=\"token punctuation\">,</span> job_grades\n<span class=\"token keyword\">WHERE</span> e<span class=\"token punctuation\">.</span><span class=\"token identifier\"><span class=\"token punctuation\">`</span>salary<span class=\"token punctuation\">`</span></span> <span class=\"token operator\">BETWEEN</span> j<span class=\"token punctuation\">.</span><span class=\"token identifier\"><span class=\"token punctuation\">`</span>lowest_sal<span class=\"token punctuation\">`</span></span> <span class=\"token operator\">AND</span> j<span class=\"token punctuation\">.</span><span class=\"token identifier\"><span class=\"token punctuation\">`</span>highest_sal<span class=\"token punctuation\">`</span></span><span class=\"token punctuation\">;</span></code></pre>\n\n<h3 id=\"自连接和非自连接\"><a href=\"#自连接和非自连接\" class=\"headerlink\" title=\"自连接和非自连接\"></a>自连接和非自连接</h3><pre class=\"language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token comment\"># 自连接</span>\n<span class=\"token comment\"># 查询员工id、名称last_name及其上级id、名称</span>\n<span class=\"token keyword\">SELECT</span> emp<span class=\"token punctuation\">.</span>empployee_id<span class=\"token punctuation\">,</span> emp<span class=\"token punctuation\">.</span>last_name<span class=\"token punctuation\">,</span> man<span class=\"token punctuation\">.</span>employee_id<span class=\"token punctuation\">,</span> man<span class=\"token punctuation\">.</span>last_name\n<span class=\"token keyword\">FROM</span> employees emp<span class=\"token punctuation\">,</span> employees man\n<span class=\"token keyword\">WHERE</span> emp<span class=\"token punctuation\">.</span>manager_id <span class=\"token operator\">=</span> man<span class=\"token punctuation\">.</span>employee_id</code></pre>\n\n<h3 id=\"内连接和外连接\"><a href=\"#内连接和外连接\" class=\"headerlink\" title=\"内连接和外连接\"></a>内连接和外连接</h3><pre class=\"language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token comment\"># 内连接：合并具有同一列的两个以上的表的行，结果集中不包含一个表与另一个表不匹配的行</span>\n<span class=\"token comment\"># SQL92(MySQL不支持)实现内连接</span>\n<span class=\"token keyword\">SELECT</span> employee_id<span class=\"token punctuation\">,</span> department_name<span class=\"token punctuation\">,</span>employees<span class=\"token punctuation\">.</span>department_id\n<span class=\"token keyword\">FROM</span> employees<span class=\"token punctuation\">,</span> departments<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">WHERE</span> employees<span class=\"token punctuation\">.</span>department_id <span class=\"token operator\">=</span> departments<span class=\"token punctuation\">.</span>department_id<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\"># SQL99实现外连接JOIN ON</span>\n<span class=\"token keyword\">SELECT</span> emp<span class=\"token punctuation\">.</span>last_name<span class=\"token punctuation\">,</span> dept<span class=\"token punctuation\">.</span>department_name\n<span class=\"token keyword\">FROM</span> employees emp <span class=\"token keyword\">INNER</span> <span class=\"token keyword\">JOIN</span> departments dept\n<span class=\"token keyword\">ON</span> emp<span class=\"token punctuation\">.</span>department_id <span class=\"token operator\">=</span> dept<span class=\"token punctuation\">.</span>department_id<span class=\"token punctuation\">;</span><span class=\"token comment\"># INNER可以省略</span>\n\n<span class=\"token comment\"># 外连接：合并具有同一列的两个以上的表的行，结果集中不仅包含一个表与另一个表不匹配的行，还包含左表 或 右表中不匹配的行</span>\n\n<span class=\"token comment\"># 左外连接：合并具有同一列的两个以上的表的行，结果集中不仅包含一个表与另一个表不匹配的行，还包含左表中不匹配的行</span>\n\n<span class=\"token comment\"># 右外连接：合并具有同一列的两个以上的表的行，结果集中不仅包含一个表与另一个表不匹配的行，还包含右表中不匹配的行</span>\n\n<span class=\"token comment\"># 满外连接：合并具有同一列的两个以上的表的行，结果集中不仅包含一个表与另一个表不匹配的行，还包含左表 和 右表中不匹配的行</span>\n\n\n<span class=\"token comment\"># 左外连接</span>\n<span class=\"token comment\"># 查询所有员工的last_name和department_name</span>\n<span class=\"token comment\"># SQL92（MySQL不支持）语法实现外连接：使用+</span>\n<span class=\"token keyword\">SELECT</span> emp<span class=\"token punctuation\">.</span>last_name<span class=\"token punctuation\">,</span> dept<span class=\"token punctuation\">.</span>department_name\n<span class=\"token keyword\">FROM</span> employees emp<span class=\"token punctuation\">,</span> departments dept\n<span class=\"token keyword\">WHERE</span> emp<span class=\"token punctuation\">.</span>department_id <span class=\"token operator\">=</span> dept<span class=\"token punctuation\">.</span>department_id<span class=\"token punctuation\">(</span><span class=\"token operator\">+</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\"># SQL99语法实现外连接：使用OUTER JOIN ON</span>\n<span class=\"token keyword\">SELECT</span> emp<span class=\"token punctuation\">.</span>last_name<span class=\"token punctuation\">,</span> dept<span class=\"token punctuation\">.</span>department_name\n<span class=\"token keyword\">FROM</span> employees emp <span class=\"token keyword\">LEFT</span> <span class=\"token keyword\">OUTER</span> <span class=\"token keyword\">JOIN</span> departments dept\n<span class=\"token keyword\">ON</span> emp<span class=\"token punctuation\">.</span>department_id <span class=\"token operator\">=</span> dept<span class=\"token punctuation\">.</span>department_id<span class=\"token punctuation\">;</span><span class=\"token comment\"># OUTER可以省略</span>\n\n<span class=\"token comment\"># 右外连接</span>\n<span class=\"token comment\"># SQL92（MySQL不支持）语法实现外连接：使用+</span>\n<span class=\"token keyword\">SELECT</span> emp<span class=\"token punctuation\">.</span>last_name<span class=\"token punctuation\">,</span> dept<span class=\"token punctuation\">.</span>department_name\n<span class=\"token keyword\">FROM</span> employees emp<span class=\"token punctuation\">,</span> departments dept\n<span class=\"token keyword\">WHERE</span> emp<span class=\"token punctuation\">.</span>department_id<span class=\"token punctuation\">(</span><span class=\"token operator\">+</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> dept<span class=\"token punctuation\">.</span>department_id<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\"># SQL99语法实现外连接：使用OUTER JOIN ON</span>\n<span class=\"token keyword\">SELECT</span> emp<span class=\"token punctuation\">.</span>last_name<span class=\"token punctuation\">,</span> dept<span class=\"token punctuation\">.</span>department_name\n<span class=\"token keyword\">FROM</span> employees emp <span class=\"token keyword\">RIGHT</span> <span class=\"token keyword\">OUTER</span> <span class=\"token keyword\">JOIN</span> departments dept\n<span class=\"token keyword\">ON</span> emp<span class=\"token punctuation\">.</span>department_id <span class=\"token operator\">=</span> dept<span class=\"token punctuation\">.</span>department_id<span class=\"token punctuation\">;</span><span class=\"token comment\"># OUTER可以省略</span>\n\n<span class=\"token comment\"># 满外连接</span>\n<span class=\"token comment\"># SQL99语法实现外连接：使用FULL OUTER JOIN ON</span>\n<span class=\"token comment\"># MySQL不支持FULL OUTER JOIN ON，满外连接使用UNION实现</span>\n<span class=\"token keyword\">SELECT</span> emp<span class=\"token punctuation\">.</span>last_name<span class=\"token punctuation\">,</span> dept<span class=\"token punctuation\">.</span>department_name\n<span class=\"token keyword\">FROM</span> employees emp <span class=\"token keyword\">FULL</span> <span class=\"token keyword\">OUTER</span> <span class=\"token keyword\">JOIN</span> departments dept\n<span class=\"token keyword\">ON</span> emp<span class=\"token punctuation\">.</span>department_id <span class=\"token operator\">=</span> dept<span class=\"token punctuation\">.</span>department_id<span class=\"token punctuation\">;</span><span class=\"token comment\"># OUTER可以省略</span></code></pre>\n\n<p>SQL99中实现七种JOIN操作的方法：</p>\n<p><img src=\"/@JOIN.png\" alt=\"MySQL中七种JOIN实现\"></p>\n<h3 id=\"UNION-和-UNION-ALL的使用\"><a href=\"#UNION-和-UNION-ALL的使用\" class=\"headerlink\" title=\"UNION 和 UNION ALL的使用\"></a>UNION 和 UNION ALL的使用</h3><p><strong>UNION</strong> 和 <strong>UNION ALL</strong>用于合并两个查询的结果集，取并集</p>\n<p>区别在于 <strong>UNION</strong> 会对结果集去重， 而 <strong>UNION ALL</strong> 不会去重</p>\n<p>因此 <strong>UNION ALL</strong> 速度更快，更推荐使用</p>\n<pre class=\"language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token comment\"># 使用 UNION 和 UNION ALL 实现满外连接</span>\n<span class=\"token keyword\">SELECT</span> e<span class=\"token punctuation\">.</span>employee_id<span class=\"token punctuation\">,</span> d<span class=\"token punctuation\">.</span>department_name\n<span class=\"token keyword\">FROM</span> employees e <span class=\"token keyword\">LEFT</span> <span class=\"token keyword\">JOIN</span> departments d\n<span class=\"token keyword\">ON</span> e<span class=\"token punctuation\">.</span>employee_id <span class=\"token operator\">=</span> d<span class=\"token punctuation\">.</span>department_id\n<span class=\"token keyword\">UNION</span> <span class=\"token keyword\">ALL</span>\n<span class=\"token keyword\">SELECT</span> e<span class=\"token punctuation\">.</span>employee_id<span class=\"token punctuation\">,</span> d<span class=\"token punctuation\">.</span>department_name\n<span class=\"token keyword\">FROM</span> employees e <span class=\"token keyword\">RIGHT</span> <span class=\"token keyword\">JOIN</span> departments d\n<span class=\"token keyword\">ON</span> e<span class=\"token punctuation\">.</span>employee_id <span class=\"token operator\">=</span> d<span class=\"token punctuation\">.</span>department_id\n<span class=\"token keyword\">WHERE</span> e<span class=\"token punctuation\">.</span>department_id <span class=\"token operator\">IS</span> <span class=\"token boolean\">NULL</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">SELECT</span> e<span class=\"token punctuation\">.</span>employee_id<span class=\"token punctuation\">,</span> d<span class=\"token punctuation\">.</span>department_name\n<span class=\"token keyword\">FROM</span> employees e <span class=\"token keyword\">LEFT</span> <span class=\"token keyword\">JOIN</span> departments d\n<span class=\"token keyword\">ON</span> e<span class=\"token punctuation\">.</span>employee_id <span class=\"token operator\">=</span> d<span class=\"token punctuation\">.</span>department_id\n<span class=\"token keyword\">WHERE</span> d<span class=\"token punctuation\">.</span>department_id <span class=\"token operator\">IS</span> <span class=\"token boolean\">NULL</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">UNION</span> <span class=\"token keyword\">ALL</span>\n<span class=\"token keyword\">SELECT</span> e<span class=\"token punctuation\">.</span>employee_id<span class=\"token punctuation\">,</span> d<span class=\"token punctuation\">.</span>department_name\n<span class=\"token keyword\">FROM</span> employees e <span class=\"token keyword\">RIGHT</span> <span class=\"token keyword\">JOIN</span> departments d\n<span class=\"token keyword\">ON</span> e<span class=\"token punctuation\">.</span>employee_id <span class=\"token operator\">=</span> d<span class=\"token punctuation\">.</span>department_id</code></pre>\n\n<h3 id=\"SQL99新特性\"><a href=\"#SQL99新特性\" class=\"headerlink\" title=\"SQL99新特性\"></a>SQL99新特性</h3><ol>\n<li><p>自然连接</p>\n<p>NATURAL JOIN表示自然连接，自然连接其实是等值连接，自动查询两张表中相同的字段进行等值连接</p>\n<pre class=\"language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token comment\"># 自然连接</span>\n<span class=\"token keyword\">SELECT</span> e<span class=\"token punctuation\">.</span>employee_id<span class=\"token punctuation\">,</span> d<span class=\"token punctuation\">.</span>department_name<span class=\"token punctuation\">,</span>e<span class=\"token punctuation\">.</span>department_id\n<span class=\"token keyword\">FROM</span> employees e<span class=\"token punctuation\">,</span> departments d<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">WHERE</span> e<span class=\"token punctuation\">.</span>department_id <span class=\"token operator\">=</span> d<span class=\"token punctuation\">.</span>department_id<span class=\"token punctuation\">;</span>\n<span class=\"token operator\">AND</span> e<span class=\"token punctuation\">.</span>manager_id <span class=\"token operator\">=</span> d<span class=\"token punctuation\">.</span>manager_id<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">SELECT</span> e<span class=\"token punctuation\">.</span>employee_id<span class=\"token punctuation\">,</span> d<span class=\"token punctuation\">.</span>department_name<span class=\"token punctuation\">,</span>e<span class=\"token punctuation\">.</span>department_id\n<span class=\"token keyword\">FROM</span> employees e <span class=\"token keyword\">NATURAL</span> <span class=\"token keyword\">JOIN</span> departments d<span class=\"token punctuation\">;</span>\n</code></pre>\n</li>\n<li><p><strong>USING</strong></p>\n<p>用于替换连接条件</p>\n<pre class=\"language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token keyword\">SELECT</span> e<span class=\"token punctuation\">.</span>employee_id<span class=\"token punctuation\">,</span> d<span class=\"token punctuation\">.</span>department_name<span class=\"token punctuation\">,</span>e<span class=\"token punctuation\">.</span>department_id\n<span class=\"token keyword\">FROM</span> employees e<span class=\"token punctuation\">,</span> departments d<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">WHERE</span> e<span class=\"token punctuation\">.</span>department_id <span class=\"token operator\">=</span> d<span class=\"token punctuation\">.</span>department_id<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">SELECT</span> e<span class=\"token punctuation\">.</span>employee_id<span class=\"token punctuation\">,</span> d<span class=\"token punctuation\">.</span>department_name<span class=\"token punctuation\">,</span>e<span class=\"token punctuation\">.</span>department_id\n<span class=\"token keyword\">FROM</span> employees e<span class=\"token punctuation\">,</span> departments d<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">USING</span> <span class=\"token punctuation\">(</span>department_id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\"># 必须写两张表中同名的字段单行函数数的特点</span>\n</code></pre></li>\n</ol>\n<h2 id=\"单行函数\"><a href=\"#单行函数\" class=\"headerlink\" title=\"单行函数\"></a>单行函数</h2><h3 id=\"单行函数的特点\"><a href=\"#单行函数的特点\" class=\"headerlink\" title=\"单行函数的特点\"></a>单行函数的特点</h3><ul>\n<li>操作数据对象</li>\n<li>接收参数返回一个结果</li>\n<li><strong>只对一行进行变换</strong></li>\n<li><strong>每行返回一个结果</strong></li>\n<li>可以嵌套</li>\n<li>参数可以是一列（字段）或一个值</li>\n</ul>\n<h3 id=\"数值函数\"><a href=\"#数值函数\" class=\"headerlink\" title=\"数值函数\"></a>数值函数</h3><pre class=\"language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token comment\">/*\n\tABS(x):返回x的绝对值\n\tSIGN(x):符号函数，x大于0返回1，小于0返回-1，等于0返回0\n\tPI():返回圆周率的值\n\tCEIL(x), CEILING(x)：返回不小于x的最小整数\n\tFLOOR(x)：返回不大于x的最大整数\n\tMOD(x,y):返回x除以y的余数\n\tLEAST(e1,e2,e3...):返回列表中的最小值\n\tGREATEST(e1,e2,e3...):返回列表中的最大值\n\tRAND():返回0-1的随机数\n\tRAND(x):返回0-1的随机值，其中x为种子，相同的x会产生相同的随机数\n\tROUND(x):返回x四舍五入后的最接近x的整数\n\tROUND(x,y):返回x四舍五入后最接近x的值，并保留到小数点后面y位\n\tTRUNCATE(x,y):返回数字x截断为y位小数的结果\n\tSQRT(x):返回x的平方根，当x小于0时返回null\n\tPOW(x,y):返回x的y次方\n\tPOWER(x,y):返回x的y次方\n\tEXP(x):返回e的x次方\n\tLN(x):返回x的自然对数\n\tLOG(x):返回x的自然对数\n\tLOG10(x):返回以10为底x的对数\n\tLOG2(x):返回以2为底x的对数\n\t\n\t三角函数：默认弧度制\n\tSIN(x):正弦值\n\tASIN(x):反正弦值\n\tCOS(x):余弦值\n\tACOS(x):反余弦值\n\tTAN(x):正切值\n\tATAN(x):反正切值\n\tATAN2(x,y):返回两个参数的反正切值\n\tCOT(x):余切值\n\t\n\t角度与弧度互换函数\n\tRADIANS(x):将角度转化为弧度，其中，参数x为角度值\n\tDEGREES(x):将弧度转化为角度，其中，参数x为弧度制\n\t\n\t进制间的转换\n\tBIN(x):二进制\n\tHEX(x):十六进制\n\tOCT(x):八进制\n\tCONV(x, f1, f2):返回f1进制变成f2进制\n*/</span></code></pre>\n\n<h3 id=\"字符串函数\"><a href=\"#字符串函数\" class=\"headerlink\" title=\"字符串函数\"></a>字符串函数</h3><pre class=\"language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token comment\">/*\n    注意：字符串的索引是从1开始的！\n\n\tASCII(s):返回字符串s中的第一个字符的ASCII码\n\tCHAR_LENGTH(s):返回字符串s的字符数\n\tLENGTH(s):返回字符串s的字节数\n\tCONCAT(s1,s2,...,sn):连接s1,s2,...,sn为一个字符串\n\tCONCAT_WS(x,s1,s2,...,sn):同CONCAT(s1,s2,...,sn)函数，但是每个字符串之间要加上x\n\tINSERT(str, idx, len, replacestr):将字符串str从第idx位置开始，len个字符长的子串替换为字符串replacestr\n\tREPLACE(str,a,b):用字符串b替换字符串str中所有出现的字符串a\n\tUPPER(s) / UCASE(s):将字符串s中所有字母转成大写字母\n\tLOWER(s) / LCASE(s):将字符串s中所有字母转成小写字母\n\tLEFT(str,n):返回字符串str最左边的n个字符\n\tRIGHT(str,n):返回字符串str最右边的n个字符\n\tLPAD(str, len, pad):用字符串pad对str最左边进行填充，直到str长度为len个字符\n\tRPAD(str, len, pad):用字符串pad对str最右边进行填充，直到str长度为len个字符\n\tLTRIM(s):去掉字符串s左侧的空格\n\tRTRIM(s):去掉字符串s右侧的空格\n\tTRIM(s):去掉字符串s开头和结尾的空格\n\tTRIM(s1 FROM s):去掉字符串s开始与结尾的s1\n\tTRIM(LEADING s1 FROM s):去掉字符串s开始的s1\n\tTRIM(TRAILING s1 FROM s):去掉字符串s结尾的s1\n\tREPEAT(str, n):返回str重复n次的结果\n\tSPACE(n):返回n个空格\n\tSTRCMP(s1, s2):比较s1、s2的ASCII码的大小\n\tSUBSTR(s, index, len):返回从字符串s的index位置起n个字符， 作用与SUBSTRING(s,n,len),MID(s,n,len)相同\n\tLOCATE(substr, str):返回字符串substr在字符串str中首次出现的位置，作用与POSITION(substr In str),INSTR(str, substr)相同。未找到返回0\n\tELT(m, s1, s2, ..., sn):返回指定位置的字符串，如果m=1，则返回s1，如果m=2，则返回s2，如果m=n，则返回sn\n\tFIELD(s,s1,s2,...,sn):返回字符串s在字符串列表中第一次出现的位置\n\tFIND_IN_SET(s1,s2):返回字符串s1在字符串s2中出现的位置，其中s2是一个以逗号分隔的字符串\n\tREVERSE(s):返回s反转后的字符串\n\tNULLIF(value1, value2):比较两个字符串，如果value1和value2相等，则返回NULL，否则返回value1\n*/</span></code></pre>\n\n<h3 id=\"日期函数\"><a href=\"#日期函数\" class=\"headerlink\" title=\"日期函数\"></a>日期函数</h3><pre class=\"language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token comment\">/*\n\t1.获取日期、时间\n\tCURDATE(),CURRENT_DATE():返回当前日期，只包含年月日，格式'yyyy-MM-dd'\n\tCURTIME(),CURRENT_TIME():返回当前时间，只包含时分秒，格式'HH:mm:ss'\n\tNOW()/SYSDATE()/CURRENT_TIMESTAMP()/LOCALTIME()/LOCALTIMESTAMP():返回当前系统日期和时间，格式'yyyy-MM-dd HH:mm:ss'\n\tUTC_DATE():返回UTC（世界标准时间）日期\n\tUTC_TIME():返回UTC（世界标准时间）时间\n\t\n\t2.日期和时间戳的转换\n\tUNIX_TIMESTAMP():以UNIX时间戳的形式返回当前时间\n\tUNIX_TIMESTAMP(date):将时间date以UNIX时间戳的形式返回\n\tFROM_UNIXTIME(timestamp):将UNIX时间戳的时间转换为普通格式的时间\n\t\n\t3.获取月份、星期、星期数、天数等函数\n\tYEAR(date)/MONTH(date)/DAY(date):返回具体的日期值\n\tHOUR(time)/MINUTE(time)/SECOND(time):返回具体的时间值\n\tMONTHNAME(date):返回月份：January...\n\tDAYNAME(date):返回星期几：MONDAY...\n\tWEEKDAY(date):返回周几，周一是0，周二是1，...，周日是6\n\tQUARTER(date):返回日期对应的季度，范围为1-4\n\tWEEK(date),WEEKOFYEAR(date):返回一年中的第几周\n\tDAYOFYEAR(date):返回日期是一年中的第几天\n\tDAYOFMONTH(date):返回日期位于所在月份的第几天\n\tDAYOFWEEK(date):返回周几，周一是1，周二是2，...，周日是7\n\t\n\t4.日期的操作函数\n\tEXTRACT(type FROM date):返回指定日期中特定的部分，type指定返回的值\n\ttype的取值如下：\n\tMICROSECOND:毫秒数\n\tSECOND:秒数\n\tMINUTE:分钟数\n\tHOUR:小时数\n\tDAY:天数\n\tWEEK:一年中的第几个星期\n\tMONTH:一年中的第几个月\n\tQUARTER:季度\n\tYEAR:年份\n\tSECOND_MICROSECOND:秒和毫秒值\n\t两个返回值的取值用下划线连接组合，如上面的SECOND_MICROSECOND。\n\t\n\t5.时间和秒钟的转换函数\n\tTIME_TO_SEC(time):将time转化为秒并返回结果值，转化的公式为：小时*3600+分钟*60+秒\n\tSEC_TO_TIME(seconds):将second描述转化为包含小时、分钟和秒的时间\n\t\n\t6.计算日期和时间的函数\n\tDATE_ADD(datetime, INTERVAL expr type):返回与给定日期时间相差INTERVAL时间段的日期时间\n\tDATE_SUB(date, INTERVAL expr type):返回与date相差INTERVAL时间间隔的日期\n\ttype的取值和EXTRACT函数一致，示例：DATE_ADD(NOW(), INTERVAL 1 YEAR),DATE_ADD(NOW(), INTERVAL -1 YEAR),DATE_ADD('2021-10-21 23:32:12', INTERVAL '1_1' YEAR_MONTH)\n\t\n\tADDTIME(time1, time2):返回time1加上time2的时间。当time2为一个数字时，代表的是秒，可以是负数\n\tSUBTIME(time1,time2):返回time1减去time2的时间。当time2为一个数字时，代表的是秒，可以是负数\n\tDATEDIFF(date1, date2):返回date1-date2的日期间隔天数\n\tTIMEDIFF(time1,time2):返回time1-time2的时间间隔\n\tFROM_DAYS(N):返回从0000年1月1日起，N天以后的日期\n\tTO_DAYS(date):返回日期距离0000年1月1日的天数\n\tLAST_DAY(date):返回date所在月份最后一天的日期\n\tMAKEDATE(year,n):针对给定年份和该年份中的天数返回一个日期\n\tMAKETIME(hour,minute,second):将给定的小时、分钟和秒合成时间并返回\n\tPERIOD_ADD(time,n):返回time加上n后的时间\n\t\n\t7.日期的格式化和解析\n\tDATE_FORMAT(date, fmt):按照字符串fmt格式化日期date值\n\tTIME_FORMAT(time, fmt):按照字符串fmt格式化时间time值\n\tGET_FORMAT(date_type, format_type):返回日期字符串的显示格式\n\tSTR_TO_DATE(str, fmt):按照字符串fmt对str进行解析，解析为一个日期\n\t\n\tfmt的格式：\n\t%S, %s 两位数字形式的秒（ 00,01, …, 59）\n    %I, %i 两位数字形式的分（ 00,01, …, 59）\n    %H 两位数字形式的小时，24 小时（00,01, …, 23）\n    %h 两位数字形式的小时，12 小时（01,02, …, 12）\n    %k 数字形式的小时，24 小时（0,1, …, 23）\n    %l 数字形式的小时，12 小时（1, 2, …, 12）\n    %T 24 小时的时间形式（hh:mm:ss）\n    %r 12 小时的时间形式（hh:mm:ss AM 或hh:mm:ss PM）\n    %p AM或PM\n    %W 一周中每一天的名称（Sunday, Monday, …, Saturday）\n    %a 一周中每一天名称的缩写（Sun, Mon, …, Sat）\n    %d 两位数字表示月中的天数（00, 01,…, 31）\n    %e 数字形式表示月中的天数（1, 2， …, 31）\n    %D 英文后缀表示月中的天数（1st, 2nd, 3rd,…）\n    %w 以数字形式表示周中的天数（ 0 = Sunday, 1=Monday, …, 6=Saturday）\n    %j 以三位数字表示年中的天数（ 001, 002, …, 366）\n    %U 周（0, 1, 52），其中Sunday 为周中的第一天\n    %u 周（0, 1, 52），其中Monday 为周中的第一天\n    %M 月名（January, February, …, December）\n    %b 缩写的月名（ January, February,…, December）\n    %m 两位数字表示的月份（01, 02, …, 12）\n    %c 数字表示的月份（1, 2, …, 12）\n    %Y 四位数字表示的年份\n    %y 两位数字表示的年份\n    %% 直接值“%”\n    \n    GET_FORMAT(date_type, format_type):返回日期字符串的显示格式:\n    GET_FORMAT(DATE,'USA')\t'%m.%d.%Y'\n    GET_FORMAT(DATE,'JIS')\t'%Y-%m-%d'\n    GET_FORMAT(DATE,'ISO')\t'%Y-%m-%d'\n    GET_FORMAT(DATE,'EUR')\t'%d.%m.%Y'\n    GET_FORMAT(DATE,'INTERNAL')\t'%Y%m%d'\n    GET_FORMAT(DATETIME,'USA')\t'%Y-%m-%d %H.%i.%s'\n    GET_FORMAT(DATETIME,'JIS')\t'%Y-%m-%d %H:%i:%s'\n    GET_FORMAT(DATETIME,'ISO')\t'%Y-%m-%d %H:%i:%s'\n    GET_FORMAT(DATETIME,'EUR')\t'%Y-%m-%d %H.%i.%s'\n    GET_FORMAT(DATETIME,'INTERNAL')\t'%Y%m%d%H%i%s'\n    GET_FORMAT(TIME,'USA')\t'%h:%i:%s %p'\n    GET_FORMAT(TIME,'JIS')\t'%H:%i:%s'\n    GET_FORMAT(TIME,'ISO')\t'%H:%i:%s'\n    GET_FORMAT(TIME,'EUR')\t'%H.%i.%s'\n    GET_FORMAT(TIME,'INTERNAL')\t'%H%i%s'\n*/</span></code></pre>\n\n<h3 id=\"流程控制函数\"><a href=\"#流程控制函数\" class=\"headerlink\" title=\"流程控制函数\"></a>流程控制函数</h3><pre class=\"language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token comment\">/*\n\tIF(value, value1, value2):如果value的值为TRUE，返回value1，否则返回value2\n\tIFNULL(value1, value2):如果value1不为NULL，返回value1，否则返回value2\n\tCASE WHEN 条件1 THEN 结果1 WHEN 条件2 THEN 结果2 ... ELSE END  相当于if else\n\tCASE expr WHEN 常量值1 THEN 值1 WHEN 常量值2 THEN 值2 ... END  相当于switch case\n*/</span></code></pre>\n\n<h3 id=\"加密与解密函数\"><a href=\"#加密与解密函数\" class=\"headerlink\" title=\"加密与解密函数\"></a>加密与解密函数</h3><pre class=\"language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token comment\">/*\n\tPASSWORD(str):返回字符串str的加密版本，41位长的字符串。加密结果不可逆，常用于用户的密码加密（MySQL8.0中无法使用）\n\tMD5(str):返回字符串str的md5加密后的值，也是一种加密方式。若参数为NULL，则会返回NULL\n\tSHA(str):从原明文密码str计算并返回加密后的密码字符串，当参数为NULL时，返回NULL。SHA比MD5更安全。\n\tENCODE(value, password_seed):返回使用password_seed作为加密密码加密value\n\tDECODE(value, password_seed):返回使用password_seed作为加密密码解密value\n*/</span></code></pre>\n\n<h3 id=\"其他函数\"><a href=\"#其他函数\" class=\"headerlink\" title=\"其他函数\"></a>其他函数</h3><pre class=\"language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token comment\">/*\n\tFORMAT(\tvalue, n):返回对数字value进行格式化后的结果数据。n表示四舍五入后保留小数点后n位\n\tCONV(value, from, to):将value的值进行不同进制之间的转换\n\tINET_ATON(ipvalue):将以点分隔的ip地址转化为一个数字\n\tINET_NTOA(value):将数字形式的ip地址转化为以点分隔的ip地址\n\tBENCHMARK(n, expr):将表达式expr重复执行n次，用于测试MySQL处理expr表达式所需要的时间\n\tCONVERT(value USING char_code):将value所使用的字符编码修改为char_code\n*/</span></code></pre>\n\n<h2 id=\"多行函数\"><a href=\"#多行函数\" class=\"headerlink\" title=\"多行函数\"></a>多行函数</h2><h3 id=\"多行函数的特征\"><a href=\"#多行函数的特征\" class=\"headerlink\" title=\"多行函数的特征\"></a>多行函数的特征</h3><ul>\n<li>对一组数据进行汇总</li>\n<li>输入是一组数据的集合</li>\n<li>输出是单个值</li>\n<li>**不能嵌套使用！ **</li>\n</ul>\n<h3 id=\"常用聚合函数\"><a href=\"#常用聚合函数\" class=\"headerlink\" title=\"常用聚合函数\"></a>常用聚合函数</h3><pre class=\"language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token comment\">/*\n\tAVG(column):平均值，只适用于数值类型\n\tSUM(column):求和，只适用于数值类型\n\tMAX(column):最大值,可用于数值、字符串、日期类型\n\tMIN(column):最小值,可用于数值、字符串、日期类型\n\tCOUNT(column):出现次数，统计次数时不统计空值\n*/</span></code></pre>\n\n<h3 id=\"GROUP-BY\"><a href=\"#GROUP-BY\" class=\"headerlink\" title=\"GROUP BY\"></a>GROUP BY</h3><p>按照某些字段进行分组，值相同的数据会被分成一组</p>\n<pre class=\"language-sql\" data-language=\"sql\"><code class=\"language-sql\"> <span class=\"token comment\"># 未指定分组，默认所有人一组，计算平均值</span>\n <span class=\"token keyword\">SELECT</span> <span class=\"token function\">AVG</span><span class=\"token punctuation\">(</span>salary<span class=\"token punctuation\">)</span>\n <span class=\"token keyword\">FROM</span> employees<span class=\"token punctuation\">;</span>\n\n<span class=\"token operator\">+</span><span class=\"token comment\">-------------+</span>\n<span class=\"token operator\">|</span> <span class=\"token function\">AVG</span><span class=\"token punctuation\">(</span>salary<span class=\"token punctuation\">)</span> <span class=\"token operator\">|</span>\n<span class=\"token operator\">+</span><span class=\"token comment\">-------------+</span>\n<span class=\"token operator\">|</span> <span class=\"token number\">6461.682243</span> <span class=\"token operator\">|</span>\n<span class=\"token operator\">+</span><span class=\"token comment\">-------------+</span>\n\n<span class=\"token comment\"># 按照department_id分组，department_id相同的人分为一组，计算每个组的平均值</span>\n<span class=\"token comment\"># GROUP BY声明在FROM后面、WHERE后面、ORDER BY前面、LIMIT前面</span>\n<span class=\"token keyword\">SELECT</span> <span class=\"token function\">AVG</span><span class=\"token punctuation\">(</span>salary<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">FROM</span> employees\n<span class=\"token keyword\">GROUP</span> <span class=\"token keyword\">BY</span> department_id<span class=\"token punctuation\">;</span>\n\n<span class=\"token operator\">+</span><span class=\"token comment\">--------------+</span>\n<span class=\"token operator\">|</span> <span class=\"token function\">AVG</span><span class=\"token punctuation\">(</span>salary<span class=\"token punctuation\">)</span>  <span class=\"token operator\">|</span>\n<span class=\"token operator\">+</span><span class=\"token comment\">--------------+</span>\n<span class=\"token operator\">|</span>  <span class=\"token number\">7000.000000</span> <span class=\"token operator\">|</span>\n<span class=\"token operator\">|</span>  <span class=\"token number\">4400.000000</span> <span class=\"token operator\">|</span>\n<span class=\"token operator\">|</span>  <span class=\"token number\">9500.000000</span> <span class=\"token operator\">|</span>\n<span class=\"token operator\">|</span>  <span class=\"token number\">4150.000000</span> <span class=\"token operator\">|</span>\n<span class=\"token operator\">|</span>  <span class=\"token number\">6500.000000</span> <span class=\"token operator\">|</span>\n<span class=\"token operator\">|</span>  <span class=\"token number\">3475.555556</span> <span class=\"token operator\">|</span>\n<span class=\"token operator\">|</span>  <span class=\"token number\">5760.000000</span> <span class=\"token operator\">|</span>\n<span class=\"token operator\">|</span> <span class=\"token number\">10000.000000</span> <span class=\"token operator\">|</span>\n<span class=\"token operator\">|</span>  <span class=\"token number\">8955.882353</span> <span class=\"token operator\">|</span>\n<span class=\"token operator\">|</span> <span class=\"token number\">19333.333333</span> <span class=\"token operator\">|</span>\n<span class=\"token operator\">|</span>  <span class=\"token number\">8600.000000</span> <span class=\"token operator\">|</span>\n<span class=\"token operator\">|</span> <span class=\"token number\">10150.000000</span> <span class=\"token operator\">|</span>\n<span class=\"token operator\">+</span><span class=\"token comment\">--------------+</span>\n\n<span class=\"token comment\"># 错误写法，GROUP BY分组后，其他字段（下面语句的job_id）结果会出现错误，但不会报错</span>\n<span class=\"token comment\"># 查询的非组函数字段一定要写在GROUP BY中</span>\n<span class=\"token keyword\">SELECT</span> department_id<span class=\"token punctuation\">,</span> job_id<span class=\"token punctuation\">,</span> <span class=\"token function\">AVG</span><span class=\"token punctuation\">(</span>salary<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">FROM</span> employees\n<span class=\"token keyword\">GROUP</span> <span class=\"token keyword\">BY</span> department_id<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\"># MySQL中GROUP BY使用WITH ROLLUP</span>\n<span class=\"token comment\"># WITH ROLLUP会在查询完成后，把所有数据分在一组再进行一次计算</span>\n<span class=\"token comment\"># 不能和ORDER BY同时使用</span>\n<span class=\"token keyword\">SELECT</span> department_id<span class=\"token punctuation\">,</span><span class=\"token function\">AVG</span><span class=\"token punctuation\">(</span>salary<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">FROM</span> employees\n<span class=\"token keyword\">GROUP</span> <span class=\"token keyword\">BY</span> department_id <span class=\"token keyword\">WITH ROLLUP</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token operator\">+</span><span class=\"token comment\">---------------+--------------+</span>\n<span class=\"token operator\">|</span> department_id <span class=\"token operator\">|</span> <span class=\"token function\">AVG</span><span class=\"token punctuation\">(</span>salary<span class=\"token punctuation\">)</span>  <span class=\"token operator\">|</span>\n<span class=\"token operator\">+</span><span class=\"token comment\">---------------+--------------+</span>\n<span class=\"token operator\">|</span>          <span class=\"token boolean\">NULL</span> <span class=\"token operator\">|</span>  <span class=\"token number\">7000.000000</span> <span class=\"token operator\">|</span> <span class=\"token comment\"># 这是一个部门为null的哥们</span>\n<span class=\"token operator\">|</span>            <span class=\"token number\">10</span> <span class=\"token operator\">|</span>  <span class=\"token number\">4400.000000</span> <span class=\"token operator\">|</span>\n<span class=\"token operator\">|</span>            <span class=\"token number\">20</span> <span class=\"token operator\">|</span>  <span class=\"token number\">9500.000000</span> <span class=\"token operator\">|</span>\n<span class=\"token operator\">|</span>            <span class=\"token number\">30</span> <span class=\"token operator\">|</span>  <span class=\"token number\">4150.000000</span> <span class=\"token operator\">|</span>\n<span class=\"token operator\">|</span>            <span class=\"token number\">40</span> <span class=\"token operator\">|</span>  <span class=\"token number\">6500.000000</span> <span class=\"token operator\">|</span>\n<span class=\"token operator\">|</span>            <span class=\"token number\">50</span> <span class=\"token operator\">|</span>  <span class=\"token number\">3475.555556</span> <span class=\"token operator\">|</span>\n<span class=\"token operator\">|</span>            <span class=\"token number\">60</span> <span class=\"token operator\">|</span>  <span class=\"token number\">5760.000000</span> <span class=\"token operator\">|</span>\n<span class=\"token operator\">|</span>            <span class=\"token number\">70</span> <span class=\"token operator\">|</span> <span class=\"token number\">10000.000000</span> <span class=\"token operator\">|</span>\n<span class=\"token operator\">|</span>            <span class=\"token number\">80</span> <span class=\"token operator\">|</span>  <span class=\"token number\">8955.882353</span> <span class=\"token operator\">|</span>\n<span class=\"token operator\">|</span>            <span class=\"token number\">90</span> <span class=\"token operator\">|</span> <span class=\"token number\">19333.333333</span> <span class=\"token operator\">|</span>\n<span class=\"token operator\">|</span>           <span class=\"token number\">100</span> <span class=\"token operator\">|</span>  <span class=\"token number\">8600.000000</span> <span class=\"token operator\">|</span>\n<span class=\"token operator\">|</span>           <span class=\"token number\">110</span> <span class=\"token operator\">|</span> <span class=\"token number\">10150.000000</span> <span class=\"token operator\">|</span>\n<span class=\"token operator\">|</span>          <span class=\"token boolean\">NULL</span> <span class=\"token operator\">|</span>  <span class=\"token number\">6461.682243</span> <span class=\"token operator\">|</span> <span class=\"token comment\"># 这是所有人的平均工资</span>\n<span class=\"token operator\">+</span><span class=\"token comment\">---------------+--------------+</span></code></pre>\n\n<h3 id=\"HAVING\"><a href=\"#HAVING\" class=\"headerlink\" title=\"HAVING\"></a>HAVING</h3><p>HAVING语句是用来过滤数据的，它和WHERE的区别在于：</p>\n<ul>\n<li>一旦过滤条件使用了聚合函数，必须使用HAVING来替换WHERE，否则报错</li>\n<li>当过滤条件中没有聚合函数是，则此过滤条件声明在WHERE和HAVING中均可，但WHERE执行效率更高</li>\n<li>HAVING必须声明在GROUP BY后面，而WHERE必须声明在FROM后面</li>\n</ul>\n<pre class=\"language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token comment\"># 查询各个部门中最高工资比10000高的部门信息</span>\n\n<span class=\"token comment\"># 错误写法</span>\n<span class=\"token keyword\">SELECT</span> department_id<span class=\"token punctuation\">,</span> <span class=\"token function\">MAX</span><span class=\"token punctuation\">(</span>salary<span class=\"token punctuation\">)</span> \n<span class=\"token keyword\">FROM</span> employees \n<span class=\"token keyword\">WHERE</span> <span class=\"token function\">MAX</span><span class=\"token punctuation\">(</span>salary<span class=\"token punctuation\">)</span><span class=\"token operator\">></span><span class=\"token number\">10000</span> \n<span class=\"token keyword\">GROUP</span> <span class=\"token keyword\">BY</span> department_id<span class=\"token punctuation\">;</span>\n\nERROR <span class=\"token number\">1111</span> <span class=\"token punctuation\">(</span>HY000<span class=\"token punctuation\">)</span>: Invalid <span class=\"token keyword\">use</span> <span class=\"token keyword\">of</span> <span class=\"token keyword\">group</span> <span class=\"token keyword\">function</span>\n\n<span class=\"token comment\"># 正确写法：</span>\n<span class=\"token keyword\">SELECT</span> department_id<span class=\"token punctuation\">,</span> <span class=\"token function\">MAX</span><span class=\"token punctuation\">(</span>salary<span class=\"token punctuation\">)</span> \n<span class=\"token keyword\">FROM</span> employees \n<span class=\"token keyword\">GROUP</span> <span class=\"token keyword\">BY</span> department_id \n<span class=\"token keyword\">HAVING</span> <span class=\"token function\">MAX</span><span class=\"token punctuation\">(</span>salary<span class=\"token punctuation\">)</span><span class=\"token operator\">></span><span class=\"token number\">10000</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token operator\">+</span><span class=\"token comment\">---------------+-------------+</span>\n<span class=\"token operator\">|</span> department_id <span class=\"token operator\">|</span> <span class=\"token function\">MAX</span><span class=\"token punctuation\">(</span>salary<span class=\"token punctuation\">)</span> <span class=\"token operator\">|</span>\n<span class=\"token operator\">+</span><span class=\"token comment\">---------------+-------------+</span>\n<span class=\"token operator\">|</span>            <span class=\"token number\">20</span> <span class=\"token operator\">|</span>    <span class=\"token number\">13000.00</span> <span class=\"token operator\">|</span>\n<span class=\"token operator\">|</span>            <span class=\"token number\">30</span> <span class=\"token operator\">|</span>    <span class=\"token number\">11000.00</span> <span class=\"token operator\">|</span>\n<span class=\"token operator\">|</span>            <span class=\"token number\">80</span> <span class=\"token operator\">|</span>    <span class=\"token number\">14000.00</span> <span class=\"token operator\">|</span>\n<span class=\"token operator\">|</span>            <span class=\"token number\">90</span> <span class=\"token operator\">|</span>    <span class=\"token number\">24000.00</span> <span class=\"token operator\">|</span>\n<span class=\"token operator\">|</span>           <span class=\"token number\">100</span> <span class=\"token operator\">|</span>    <span class=\"token number\">12000.00</span> <span class=\"token operator\">|</span>\n<span class=\"token operator\">|</span>           <span class=\"token number\">110</span> <span class=\"token operator\">|</span>    <span class=\"token number\">12000.00</span> <span class=\"token operator\">|</span>\n<span class=\"token operator\">+</span><span class=\"token comment\">---------------+-------------+</span>\n\n<span class=\"token comment\"># 查询部门id为10，20，30，40这四个部门中最高工资比10000高的部门信息</span>\n<span class=\"token comment\"># 方式一：推荐，执行效率高于方式二</span>\n<span class=\"token keyword\">SELECT</span> department_id<span class=\"token punctuation\">,</span> <span class=\"token function\">MAX</span><span class=\"token punctuation\">(</span>salary<span class=\"token punctuation\">)</span> \n<span class=\"token keyword\">FROM</span> employees \n<span class=\"token keyword\">WHERE</span> department_id <span class=\"token operator\">IN</span> <span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span><span class=\"token number\">20</span><span class=\"token punctuation\">,</span><span class=\"token number\">30</span><span class=\"token punctuation\">,</span><span class=\"token number\">40</span><span class=\"token punctuation\">)</span> \n<span class=\"token keyword\">GROUP</span> <span class=\"token keyword\">BY</span> department_id \n<span class=\"token keyword\">HAVING</span> <span class=\"token function\">MAX</span><span class=\"token punctuation\">(</span>salary<span class=\"token punctuation\">)</span><span class=\"token operator\">></span><span class=\"token number\">10000</span><span class=\"token punctuation\">;</span>\n<span class=\"token operator\">+</span><span class=\"token comment\">---------------+-------------+</span>\n<span class=\"token operator\">|</span> department_id <span class=\"token operator\">|</span> <span class=\"token function\">MAX</span><span class=\"token punctuation\">(</span>salary<span class=\"token punctuation\">)</span> <span class=\"token operator\">|</span>\n<span class=\"token operator\">+</span><span class=\"token comment\">---------------+-------------+</span>\n<span class=\"token operator\">|</span>            <span class=\"token number\">20</span> <span class=\"token operator\">|</span>    <span class=\"token number\">13000.00</span> <span class=\"token operator\">|</span>\n<span class=\"token operator\">|</span>            <span class=\"token number\">30</span> <span class=\"token operator\">|</span>    <span class=\"token number\">11000.00</span> <span class=\"token operator\">|</span>\n<span class=\"token operator\">+</span><span class=\"token comment\">---------------+-------------+</span>\n<span class=\"token number\">2</span> <span class=\"token keyword\">rows</span> <span class=\"token operator\">in</span> <span class=\"token keyword\">set</span> <span class=\"token punctuation\">(</span><span class=\"token number\">0.02</span> sec<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 方式二</span>\n <span class=\"token keyword\">SELECT</span> department_id<span class=\"token punctuation\">,</span> <span class=\"token function\">MAX</span><span class=\"token punctuation\">(</span>salary<span class=\"token punctuation\">)</span> \n <span class=\"token keyword\">FROM</span> employees \n <span class=\"token keyword\">GROUP</span> <span class=\"token keyword\">BY</span> department_id \n <span class=\"token keyword\">HAVING</span> <span class=\"token function\">MAX</span><span class=\"token punctuation\">(</span>salary<span class=\"token punctuation\">)</span><span class=\"token operator\">></span><span class=\"token number\">10000</span> <span class=\"token operator\">AND</span> department_id <span class=\"token operator\">IN</span> <span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span><span class=\"token number\">20</span><span class=\"token punctuation\">,</span><span class=\"token number\">30</span><span class=\"token punctuation\">,</span><span class=\"token number\">40</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token operator\">+</span><span class=\"token comment\">---------------+-------------+</span>\n<span class=\"token operator\">|</span> department_id <span class=\"token operator\">|</span> <span class=\"token function\">MAX</span><span class=\"token punctuation\">(</span>salary<span class=\"token punctuation\">)</span> <span class=\"token operator\">|</span>\n<span class=\"token operator\">+</span><span class=\"token comment\">---------------+-------------+</span>\n<span class=\"token operator\">|</span>            <span class=\"token number\">20</span> <span class=\"token operator\">|</span>    <span class=\"token number\">13000.00</span> <span class=\"token operator\">|</span>\n<span class=\"token operator\">|</span>            <span class=\"token number\">30</span> <span class=\"token operator\">|</span>    <span class=\"token number\">11000.00</span> <span class=\"token operator\">|</span>\n<span class=\"token operator\">+</span><span class=\"token comment\">---------------+-------------+</span>\n<span class=\"token number\">2</span> <span class=\"token keyword\">rows</span> <span class=\"token operator\">in</span> <span class=\"token keyword\">set</span> <span class=\"token punctuation\">(</span><span class=\"token number\">0.06</span> sec<span class=\"token punctuation\">)</span></code></pre>\n\n<h2 id=\"SQL底层执行原理\"><a href=\"#SQL底层执行原理\" class=\"headerlink\" title=\"SQL底层执行原理\"></a>SQL底层执行原理</h2><h3 id=\"SELECT语句的完整结构\"><a href=\"#SELECT语句的完整结构\" class=\"headerlink\" title=\"SELECT语句的完整结构\"></a>SELECT语句的完整结构</h3><pre class=\"language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token keyword\">SELECT</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> <span class=\"token punctuation\">,</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> <span class=\"token punctuation\">,</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> \n<span class=\"token keyword\">FROM</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> <span class=\"token punctuation\">,</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> <span class=\"token punctuation\">,</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">LEFT</span> <span class=\"token operator\">/</span> <span class=\"token keyword\">RIGHT</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">JOIN</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> <span class=\"token keyword\">ON</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n<span class=\"token keyword\">JOIN</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> <span class=\"token keyword\">ON</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n<span class=\"token keyword\">WHERE</span> 多表连接条件 <span class=\"token operator\">AND</span> 不包含聚合函数的过滤条件\n<span class=\"token keyword\">GROUP</span> <span class=\"token keyword\">BY</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> <span class=\"token punctuation\">,</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n<span class=\"token keyword\">HAVING</span> 包含聚合函数的过滤条件\n<span class=\"token keyword\">ORDER</span> <span class=\"token keyword\">BY</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> <span class=\"token punctuation\">,</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">DESC</span><span class=\"token operator\">/</span><span class=\"token keyword\">ASC</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">LIMIT</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> <span class=\"token punctuation\">,</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></code></pre>\n\n<h3 id=\"SELECT语句的执行过程\"><a href=\"#SELECT语句的执行过程\" class=\"headerlink\" title=\"SELECT语句的执行过程\"></a>SELECT语句的执行过程</h3><p>FROM … , … , … （多表连接会笛卡尔积） -&gt; ON（根据连接条件进行过滤） -&gt; (LEFT &#x2F; RIGHT  JOIN)  -&gt; WHERE -&gt; GROUP BY -&gt; HAVING  -&gt; SELECT  -&gt;  DISTINCT  -&gt; ORDER BY -&gt; LIMIT</p>\n<h2 id=\"子查询\"><a href=\"#子查询\" class=\"headerlink\" title=\"子查询\"></a>子查询</h2><h3 id=\"子查询的特点\"><a href=\"#子查询的特点\" class=\"headerlink\" title=\"子查询的特点\"></a>子查询的特点</h3><p>子查询指一个查询语句嵌套在另一个查询语句内部的查询</p>\n<ul>\n<li>子查询先于主查询运行</li>\n<li>子查询结果被主查询使用</li>\n<li>子查询要包含在括号内</li>\n<li>子查询放在比较条件的右侧</li>\n<li>单行操作符对应单行子查询，多行操作符对应多行子查询</li>\n<li>SELECT中，除了GROUP BY和LIMIT以外，都可以声明子查询</li>\n</ul>\n<pre class=\"language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token comment\"># 查询谁的工资比Abel高？</span>\n<span class=\"token comment\"># 方式一：</span>\n<span class=\"token keyword\">SELECT</span> salary\n<span class=\"token keyword\">FROM</span> employees\n<span class=\"token keyword\">WHERE</span> last_name <span class=\"token operator\">=</span> <span class=\"token string\">'Abel'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">SELECT</span> last_name<span class=\"token punctuation\">,</span>salary\n<span class=\"token keyword\">FROM</span> employees\n<span class=\"token keyword\">WHERE</span> salary <span class=\"token operator\">></span> <span class=\"token number\">11000</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\"># 方式二：</span>\n<span class=\"token keyword\">SELECT</span> e2<span class=\"token punctuation\">.</span>last_name<span class=\"token punctuation\">,</span> e2<span class=\"token punctuation\">.</span>salary\n<span class=\"token keyword\">FROM</span> employees e1<span class=\"token punctuation\">,</span>employees e2\n<span class=\"token keyword\">WHERE</span> e1<span class=\"token punctuation\">.</span>last_name <span class=\"token operator\">=</span> <span class=\"token string\">'Abel'</span>\n<span class=\"token operator\">AND</span> e2<span class=\"token punctuation\">.</span>salary <span class=\"token operator\">></span> e1<span class=\"token punctuation\">.</span>salary<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\"># 方式三：子查询</span>\n<span class=\"token keyword\">SELECT</span> last_name<span class=\"token punctuation\">,</span> salary\n<span class=\"token keyword\">FROM</span> employees\n<span class=\"token keyword\">WHERE</span> salary <span class=\"token operator\">></span> <span class=\"token punctuation\">(</span>\n    \t\t\t<span class=\"token keyword\">SELECT</span> salary\n    \t\t\t<span class=\"token keyword\">FROM</span> employees\n    \t\t\t<span class=\"token keyword\">WHERE</span> last_name <span class=\"token operator\">=</span> <span class=\"token string\">'Abel'</span>\n\t\t\t\t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n\n\n\n<h3 id=\"子查询的分类\"><a href=\"#子查询的分类\" class=\"headerlink\" title=\"子查询的分类\"></a>子查询的分类</h3><ol>\n<li>从内查询返回的结果的条目数：  单行子查询    多行子查询</li>\n<li>从内查询的执行次数：  相关子查询    不相关子查询</li>\n</ol>\n<h3 id=\"单行子查询\"><a href=\"#单行子查询\" class=\"headerlink\" title=\"单行子查询\"></a>单行子查询</h3><p>子查询返回单行数据，使用单行操作符</p>\n<p>单行操作符： &#x3D;  &gt;  &gt;&#x3D;  &lt;  &lt;&#x3D;  &lt;&gt;</p>\n<pre class=\"language-sql\" data-language=\"sql\"><code class=\"language-sql\">\n<span class=\"token comment\"># 查询工资大于149号员工工资的员工信息</span>\n<span class=\"token keyword\">SELECT</span> salary\n<span class=\"token keyword\">FROM</span> employees\n<span class=\"token keyword\">WHERE</span> salary <span class=\"token operator\">></span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">SELECT</span> salary\n\t\t\t\t<span class=\"token keyword\">FROM</span> employees\n\t\t\t\t<span class=\"token keyword\">WHERE</span> employee_id <span class=\"token operator\">=</span> <span class=\"token number\">149</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t\n<span class=\"token comment\"># 返回job_id与141号员工相同，salary比143号员工多的员工姓名，job_id和工资</span>\n<span class=\"token keyword\">SELECT</span> last_name<span class=\"token punctuation\">,</span> job_id<span class=\"token punctuation\">,</span> salary\n<span class=\"token keyword\">FROM</span> employees\n<span class=\"token keyword\">WHERE</span> job_id <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">SELECT</span> job_id\n                   <span class=\"token keyword\">FROM</span> employees\n                   <span class=\"token keyword\">WHERE</span> employee_id <span class=\"token operator\">=</span> <span class=\"token number\">141</span>\n                   <span class=\"token punctuation\">)</span>\n   <span class=\"token operator\">AND</span> salary <span class=\"token operator\">></span>   <span class=\"token punctuation\">(</span><span class=\"token keyword\">SELECT</span> salary\n                   <span class=\"token keyword\">FROM</span> employees\n                   <span class=\"token keyword\">WHERE</span> employee_id <span class=\"token operator\">=</span> <span class=\"token number\">143</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                   \n  <span class=\"token comment\"># 查询和141号员工的manager_id,department_id相同的其他员工的employee_id,manager_id,department_id</span>\n  <span class=\"token keyword\">SELECT</span> employee_id<span class=\"token punctuation\">,</span>manager_id<span class=\"token punctuation\">,</span>department_id\n  <span class=\"token keyword\">FROM</span> employees\n  <span class=\"token keyword\">WHERE</span> <span class=\"token punctuation\">(</span>manager_id<span class=\"token punctuation\">,</span> department_id<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>\n  \t\t\t\t\t\t\t\t\t\t<span class=\"token keyword\">SELECT</span> manager_id<span class=\"token punctuation\">,</span> department_id\n  \t\t\t\t\t\t\t\t\t\t<span class=\"token keyword\">FROM</span> employees\n  \t\t\t\t\t\t\t\t\t\t<span class=\"token keyword\">WHERE</span> employee_id <span class=\"token operator\">=</span> <span class=\"token number\">141</span>\n  \t\t\t\t\t\t\t\t\t\t<span class=\"token punctuation\">)</span>\n  <span class=\"token operator\">AND</span> employee_id <span class=\"token operator\">&lt;></span> <span class=\"token number\">141</span><span class=\"token punctuation\">;</span>\n</code></pre>\n\n<h3 id=\"多行子查询\"><a href=\"#多行子查询\" class=\"headerlink\" title=\"多行子查询\"></a>多行子查询</h3><p>子查询返回多行，使用多行操作符</p>\n<p>多行操作符： IN\tANY\tALL\tSOME(实际上是ANY的别名，和ANY相同)</p>\n<pre class=\"language-sql\" data-language=\"sql\"><code class=\"language-sql\"> <span class=\"token comment\"># 查询和141号或174号员工的manager_id,department_id相同的其他员工的employee_id,manager_id,department_id</span>\n<span class=\"token keyword\">SELECT</span> employee_id<span class=\"token punctuation\">,</span>manager_id<span class=\"token punctuation\">,</span>department_id\n<span class=\"token keyword\">FROM</span> employees\n<span class=\"token keyword\">WHERE</span> <span class=\"token punctuation\">(</span>manager_id<span class=\"token punctuation\">,</span> department_id<span class=\"token punctuation\">)</span> <span class=\"token operator\">in</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token keyword\">SELECT</span> manager_id<span class=\"token punctuation\">,</span> department_id\n    <span class=\"token keyword\">FROM</span> employees\n    <span class=\"token keyword\">WHERE</span> employee_id <span class=\"token operator\">in</span> <span class=\"token punctuation\">(</span><span class=\"token number\">141</span><span class=\"token punctuation\">,</span><span class=\"token number\">174</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span>\n  <span class=\"token operator\">AND</span> employee_id <span class=\"token operator\">not</span> <span class=\"token operator\">in</span> <span class=\"token punctuation\">(</span><span class=\"token number\">141</span><span class=\"token punctuation\">,</span><span class=\"token number\">174</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\"># 查询其他job_id中比job_id为'IT_PROG'部门任意工资低的员工的员工号</span>\n<span class=\"token keyword\">SELECT</span> employee_id<span class=\"token punctuation\">,</span> last_name<span class=\"token punctuation\">,</span> job_id<span class=\"token punctuation\">,</span>salary\n<span class=\"token keyword\">FROM</span> employees\n<span class=\"token keyword\">WHERE</span> job_id <span class=\"token operator\">&lt;></span> <span class=\"token string\">'IT_PROG'</span>\n<span class=\"token operator\">AND</span> salary <span class=\"token operator\">&lt;</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">SELECT</span> <span class=\"token function\">MAX</span><span class=\"token punctuation\">(</span>salary<span class=\"token punctuation\">)</span>\n                <span class=\"token keyword\">FROM</span> employees\n                <span class=\"token keyword\">WHERE</span> job_id <span class=\"token operator\">=</span> <span class=\"token string\">'IT_PROG'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                \n<span class=\"token keyword\">SELECT</span> employee_id<span class=\"token punctuation\">,</span> last_name<span class=\"token punctuation\">,</span> job_id<span class=\"token punctuation\">,</span>salary\n<span class=\"token keyword\">FROM</span> employees\n<span class=\"token keyword\">WHERE</span> job_id <span class=\"token operator\">&lt;></span> <span class=\"token string\">'IT_PROG'</span>\n<span class=\"token operator\">AND</span> salary <span class=\"token operator\">&lt;</span> <span class=\"token keyword\">ANY</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">SELECT</span> salary\n                <span class=\"token keyword\">FROM</span> employees\n                <span class=\"token keyword\">WHERE</span> job_id <span class=\"token operator\">=</span> <span class=\"token string\">'IT_PROG'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\"># 查询平均工资最低的部门id</span>\n<span class=\"token comment\"># 方法一：</span>\n<span class=\"token keyword\">SELECT</span> department_id<span class=\"token punctuation\">,</span> <span class=\"token function\">AVG</span><span class=\"token punctuation\">(</span>salary<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">FROM</span> employees\n<span class=\"token keyword\">GROUP</span> <span class=\"token keyword\">BY</span> department_id\n<span class=\"token keyword\">HAVING</span> <span class=\"token function\">AVG</span><span class=\"token punctuation\">(</span>salary<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;=</span> <span class=\"token keyword\">ALL</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token keyword\">SELECT</span> <span class=\"token function\">AVG</span><span class=\"token punctuation\">(</span>salary<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">FROM</span> employees\n    <span class=\"token keyword\">GROUP</span> <span class=\"token keyword\">BY</span> department_id\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\"># 方法二：把子查询当成一个表，该临时表必须有一个别名</span>\n\n<span class=\"token keyword\">SELECT</span> department_id\n<span class=\"token keyword\">FROM</span> employees\n<span class=\"token keyword\">GROUP</span> <span class=\"token keyword\">BY</span> department_id\n<span class=\"token keyword\">HAVING</span> <span class=\"token function\">AVG</span><span class=\"token punctuation\">(</span>salary<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>\n                    <span class=\"token keyword\">SELECT</span> <span class=\"token function\">MIN</span><span class=\"token punctuation\">(</span>avg_sal<span class=\"token punctuation\">)</span>\n                \t<span class=\"token keyword\">FROM</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">SELECT</span> <span class=\"token function\">AVG</span><span class=\"token punctuation\">(</span>salary<span class=\"token punctuation\">)</span> avg_sal\n                    \t\t<span class=\"token keyword\">FROM</span> employees\n                    \t\t<span class=\"token keyword\">GROUP</span> <span class=\"token keyword\">BY</span> department_id<span class=\"token punctuation\">)</span> dept\n                \t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n\n<h3 id=\"相关子查询\"><a href=\"#相关子查询\" class=\"headerlink\" title=\"相关子查询\"></a>相关子查询</h3><p>如果子查询的执行依赖于外部查询，通常情况下都是因为子查询中的表用到了外部的表，并进行了条件关联，因此每执行一次外部查询，子查询都要重新计算一次，这样的子查询就称之为关联子查询。</p>\n<pre class=\"language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token comment\"># 查询员工中工资大于本部门平均工资的员工的last_name, salary和其department_id</span>\n<span class=\"token comment\"># 方式一：相关子查询</span>\n<span class=\"token keyword\">SELECT</span> last_name<span class=\"token punctuation\">,</span> salary<span class=\"token punctuation\">,</span> department_id\n<span class=\"token keyword\">FROM</span> employees e1\n<span class=\"token keyword\">WHERE</span> salary <span class=\"token operator\">></span> <span class=\"token punctuation\">(</span>\n\t\t\t\t<span class=\"token keyword\">SELECT</span> <span class=\"token function\">AVG</span><span class=\"token punctuation\">(</span>salary<span class=\"token punctuation\">)</span>\n    \t\t\t<span class=\"token keyword\">FROM</span> employees e2\n    \t\t\t<span class=\"token keyword\">WHERE</span> department_id <span class=\"token operator\">=</span> e1<span class=\"token punctuation\">.</span>department_id\n\t\t\t\t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\"># 方式二：在FROM中声明子查询</span>\n<span class=\"token keyword\">SELECT</span> e<span class=\"token punctuation\">.</span>last_name<span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">.</span>salary<span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">.</span>department_id\n<span class=\"token keyword\">FROM</span> employees e<span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span>\n    <span class=\"token keyword\">SELECT</span> department_id<span class=\"token punctuation\">,</span><span class=\"token function\">AVG</span><span class=\"token punctuation\">(</span>salary<span class=\"token punctuation\">)</span> avg_sal\n\t<span class=\"token keyword\">FROM</span> employees\n\t<span class=\"token keyword\">GROUP</span> <span class=\"token keyword\">BY</span> department_id\n<span class=\"token punctuation\">)</span> t_dept_avg_sal\n<span class=\"token keyword\">WHERE</span> e<span class=\"token punctuation\">.</span>department_id <span class=\"token operator\">=</span> t_dept_avg_sal<span class=\"token punctuation\">.</span>department_id\n<span class=\"token operator\">AND</span> e<span class=\"token punctuation\">.</span>salary <span class=\"token operator\">></span> t_dept_avg_sal<span class=\"token punctuation\">.</span>avg_sal\n\n<span class=\"token comment\"># 查询员工的id, salary, 按照department_name排序</span>\n<span class=\"token keyword\">SELECT</span> e<span class=\"token punctuation\">.</span>employee_id<span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">.</span>salary\n<span class=\"token keyword\">FROM</span> employees e \n<span class=\"token keyword\">ORDER</span> <span class=\"token keyword\">BY</span> <span class=\"token punctuation\">(</span>\n\t<span class=\"token keyword\">SELECT</span> department_name\n    <span class=\"token keyword\">FROM</span> departments d\n    <span class=\"token keyword\">WHERE</span> e<span class=\"token punctuation\">.</span>department_id <span class=\"token operator\">=</span> d<span class=\"token punctuation\">.</span>department_id\n<span class=\"token punctuation\">)</span>\n</code></pre>\n\n<h3 id=\"EXISTS-和-NOT-EXISTS\"><a href=\"#EXISTS-和-NOT-EXISTS\" class=\"headerlink\" title=\"EXISTS 和 NOT EXISTS\"></a>EXISTS 和 NOT EXISTS</h3><p>关联子查询通常也会和EXISTS操作符一起来使用，用来检查在子查询中是否存在满足条件的行。·</p>\n<p>如果在子查询中不存在满足条件的行:</p>\n<ul>\n<li>条件返回FALSE</li>\n<li>继续在子查询中查找</li>\n</ul>\n<p>如果在子查询中存在满足条件的行:</p>\n<ul>\n<li>不在子查询中继续查找</li>\n<li>条件返回TRUE</li>\n</ul>\n<p>NOT EXISTS关键字表示如果不存在某种条件，则返回TRUE，否则返回FALSE。</p>\n<pre class=\"language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token comment\"># 查询公司管理者的employee_id, last_name, job_id, department_id</span>\n<span class=\"token comment\"># 方式一</span>\n<span class=\"token keyword\">SELECT</span> <span class=\"token keyword\">DISTINCT</span>  m<span class=\"token punctuation\">.</span>employee_id<span class=\"token punctuation\">,</span> m<span class=\"token punctuation\">.</span>last_name<span class=\"token punctuation\">,</span> m<span class=\"token punctuation\">.</span>job_id<span class=\"token punctuation\">,</span> m<span class=\"token punctuation\">.</span>department_id<span class=\"token punctuation\">,</span> m<span class=\"token punctuation\">.</span>manager_id\n<span class=\"token keyword\">FROM</span> employees e <span class=\"token keyword\">JOIN</span> employees m\n<span class=\"token keyword\">ON</span> e<span class=\"token punctuation\">.</span>manager_id <span class=\"token operator\">=</span> m<span class=\"token punctuation\">.</span>employee_id\n\n<span class=\"token comment\"># 方式二</span>\n<span class=\"token keyword\">SELECT</span> employee_id<span class=\"token punctuation\">,</span> last_name<span class=\"token punctuation\">,</span> job_id<span class=\"token punctuation\">,</span> department_id\n<span class=\"token keyword\">FROM</span> employees\n<span class=\"token keyword\">WHERE</span> employee_id <span class=\"token operator\">IN</span> <span class=\"token punctuation\">(</span>\n\t<span class=\"token keyword\">SELECT</span> <span class=\"token keyword\">DISTINCT</span> manager_id\n    <span class=\"token keyword\">FROM</span> employees\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\"># 方式三 使用EXISTS</span>\n<span class=\"token keyword\">SELECT</span> e1<span class=\"token punctuation\">.</span>employee_id<span class=\"token punctuation\">,</span> e1<span class=\"token punctuation\">.</span>last_name<span class=\"token punctuation\">,</span> e1<span class=\"token punctuation\">.</span>job_id<span class=\"token punctuation\">,</span> e1<span class=\"token punctuation\">.</span>department_id\n<span class=\"token keyword\">FROM</span> employees e1\n<span class=\"token keyword\">WHERE</span> <span class=\"token keyword\">EXISTS</span> <span class=\"token punctuation\">(</span>\n\t<span class=\"token keyword\">SELECT</span> <span class=\"token operator\">*</span>\n    <span class=\"token keyword\">FROM</span> employees e2\n    <span class=\"token keyword\">WHERE</span> e1<span class=\"token punctuation\">.</span>employee_id <span class=\"token operator\">=</span> e2<span class=\"token punctuation\">.</span>manager_id\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n\n<h2 id=\"增删改\"><a href=\"#增删改\" class=\"headerlink\" title=\"增删改\"></a>增删改</h2><h3 id=\"插入数据\"><a href=\"#插入数据\" class=\"headerlink\" title=\"插入数据\"></a>插入数据</h3><ul>\n<li><p>预处理</p>\n<pre class=\"language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">TABLE</span> <span class=\"token keyword\">IF</span> <span class=\"token operator\">NOT</span> <span class=\"token keyword\">EXISTS</span> emp1<span class=\"token punctuation\">(</span>\n\tid <span class=\"token keyword\">INT</span><span class=\"token punctuation\">,</span>\n    <span class=\"token identifier\"><span class=\"token punctuation\">`</span>name<span class=\"token punctuation\">`</span></span> <span class=\"token keyword\">VARCHAR</span><span class=\"token punctuation\">(</span><span class=\"token number\">15</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    hire_date <span class=\"token keyword\">DATE</span><span class=\"token punctuation\">,</span>\n    salary <span class=\"token keyword\">DOUBLE</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n\n\n</li>\n<li><p>方式一：一条一条添加数据</p>\n<pre class=\"language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token comment\"># 不指定添加的字段，要严格按照表的字段来匹配</span>\n<span class=\"token keyword\">INSERT</span> <span class=\"token keyword\">INTO</span> emp1\n<span class=\"token keyword\">VALUES</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token string\">'Tom'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'2000-12-21'</span><span class=\"token punctuation\">,</span><span class=\"token number\">3400</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\"># 按照顺序匹配id , name, hire_date, salary</span>\n\n<span class=\"token comment\"># 指定添加的字段</span>\n<span class=\"token comment\"># 指定表的全部字段，按照自己指定的顺序匹配</span>\n<span class=\"token keyword\">INSERT</span> <span class=\"token keyword\">INTO</span> emp1<span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">,</span> hire_date<span class=\"token punctuation\">,</span> salary<span class=\"token punctuation\">,</span> <span class=\"token identifier\"><span class=\"token punctuation\">`</span>name<span class=\"token punctuation\">`</span></span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">VALUES</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token string\">'1999-09-09'</span><span class=\"token punctuation\">,</span><span class=\"token number\">4000</span><span class=\"token punctuation\">,</span><span class=\"token string\">'Jerry'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\"># 指定表的部分字段，没有知名的字段默认为NULL值</span>\n<span class=\"token keyword\">INSERT</span> <span class=\"token keyword\">INTO</span> emp1<span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">,</span> salary<span class=\"token punctuation\">,</span> <span class=\"token identifier\"><span class=\"token punctuation\">`</span>name<span class=\"token punctuation\">`</span></span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">VALUES</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3500</span> <span class=\"token punctuation\">,</span> <span class=\"token string\">'David'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\"># 插入多条记录</span>\n<span class=\"token keyword\">INSERT</span> <span class=\"token keyword\">INTO</span> emp1<span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">,</span> salary<span class=\"token punctuation\">,</span> <span class=\"token identifier\"><span class=\"token punctuation\">`</span>name<span class=\"token punctuation\">`</span></span><span class=\"token punctuation\">)</span> \n<span class=\"token keyword\">VALUES</span>\n<span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5000</span><span class=\"token punctuation\">,</span><span class=\"token string\">'Jim'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">6000</span><span class=\"token punctuation\">,</span><span class=\"token string\">'Jelinal'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n</li>\n<li><p>方式二：将查询结果插入到表中</p>\n<pre class=\"language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token keyword\">INSERT</span> <span class=\"token keyword\">INTO</span> emp1<span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">,</span> <span class=\"token identifier\"><span class=\"token punctuation\">`</span>name<span class=\"token punctuation\">`</span></span><span class=\"token punctuation\">,</span> salary<span class=\"token punctuation\">,</span> hire_date<span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># 查询语句， 查询的字段要和要插入的表字段一一对应</span>\n<span class=\"token comment\"># 从查询结果插入时，要注意两个表的字段长度，查询的表的字段长度不能高于要插入的表的字段长度，如果一定要插入，需要先修改一下表</span>\n<span class=\"token keyword\">SELECT</span> employee_id<span class=\"token punctuation\">,</span> last_name<span class=\"token punctuation\">,</span> salary<span class=\"token punctuation\">,</span> hire_date\n<span class=\"token keyword\">FROM</span> employees\n<span class=\"token keyword\">WHERE</span> department_id <span class=\"token operator\">IN</span> <span class=\"token punctuation\">(</span><span class=\"token number\">50</span><span class=\"token punctuation\">,</span><span class=\"token number\">60</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></li>\n</ul>\n<h3 id=\"更新数据\"><a href=\"#更新数据\" class=\"headerlink\" title=\"更新数据\"></a>更新数据</h3><pre class=\"language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token comment\"># UPDATE ... SET ... WHERE ...</span>\n<span class=\"token keyword\">UPDATE</span> emp1\n<span class=\"token keyword\">SET</span> hire_date <span class=\"token operator\">=</span> CURDATE<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">WHERE</span> id <span class=\"token operator\">=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span><span class=\"token comment\"># WHERE一般情况下必须要加，如果不加，会改整张表的所有记录</span>\n\n<span class=\"token comment\"># 修改数据时存在不成功的情况，可能是由于约束的影响</span></code></pre>\n\n<h3 id=\"删除数据\"><a href=\"#删除数据\" class=\"headerlink\" title=\"删除数据\"></a>删除数据</h3><pre class=\"language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token comment\"># DELETE FROM ... WHERE ...</span>\n<span class=\"token comment\"># 删除数据时也存在不成功的情况，可能是由于约束的影响</span>\n<span class=\"token keyword\">DELETE</span> <span class=\"token keyword\">FROM</span> emp1\n<span class=\"token keyword\">WHERE</span> id <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></code></pre>\n\n\n\n<h2 id=\"创建和管理数据库和表\"><a href=\"#创建和管理数据库和表\" class=\"headerlink\" title=\"创建和管理数据库和表\"></a>创建和管理数据库和表</h2><h3 id=\"标识符命名规则\"><a href=\"#标识符命名规则\" class=\"headerlink\" title=\"标识符命名规则\"></a>标识符命名规则</h3><ul>\n<li>数据库名、表名不得超过30个字符，变量名限制为29个。必须只能包含A-Z,a-z,0-9，共63个字符</li>\n<li>数据库名、表名、字段名等对象名中间不要包含空格</li>\n<li>同一个MySQL软件中，数据库不能同名；同一个库中，表不能重名；同一个表中，字段不能重名</li>\n<li>必须保证你的字段没有和保留字、数据库系统或常用方法冲突。如果坚持使用，请在SQL语句中使用&#96;(着重号)引起来</li>\n<li>保持字段名和类型的一致性：在命名字段并为其指定数据类型的时候一定要保证一致性，假如数据类型在一个表里是整数，那在另一个表里可就别变成字符型了</li>\n</ul>\n<h3 id=\"创建数据库\"><a href=\"#创建数据库\" class=\"headerlink\" title=\"创建数据库\"></a>创建数据库</h3><ul>\n<li><p>方式一：创建数据库</p>\n<pre class=\"language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">DATABASE</span> mytest1<span class=\"token punctuation\">;</span></code></pre>\n</li>\n<li><p>方式二：指定字符集</p>\n<pre class=\"language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">DATABASE</span> mytest1 <span class=\"token keyword\">CHARACTER</span> <span class=\"token keyword\">SET</span> <span class=\"token string\">'utf8mb4'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\"># 查看数据库的创建信息</span>\n<span class=\"token keyword\">SHOW</span> <span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">DATABASE</span> mytest1<span class=\"token punctuation\">;</span></code></pre>\n</li>\n<li><p>方式三：创建之前判断是否存在，如果要创建的数据库已经存在，创建不成功，不会报错：</p>\n<pre class=\"language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">DATABASE</span> <span class=\"token keyword\">IF</span> <span class=\"token operator\">NOT</span> <span class=\"token keyword\">EXISTS</span> mytest1<span class=\"token punctuation\">;</span></code></pre></li>\n</ul>\n<h3 id=\"管理数据库\"><a href=\"#管理数据库\" class=\"headerlink\" title=\"管理数据库\"></a>管理数据库</h3><ul>\n<li><p>查看当前连接中的数据库有哪些</p>\n<pre class=\"language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token keyword\">SHOW</span> <span class=\"token keyword\">DATABASES</span><span class=\"token punctuation\">;</span></code></pre>\n</li>\n<li><p>切换数据库</p>\n<pre class=\"language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token keyword\">USE</span> mytest2<span class=\"token punctuation\">;</span></code></pre>\n</li>\n<li><p>查看当前数据库中保存的数据表</p>\n<pre class=\"language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token keyword\">SHOW</span> <span class=\"token keyword\">TABLES</span><span class=\"token punctuation\">;</span></code></pre>\n</li>\n<li><p>查看当前使用的数据库</p>\n<pre class=\"language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token keyword\">SELECT</span> <span class=\"token keyword\">DATABASE</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">FROM</span> DUAL<span class=\"token punctuation\">;</span></code></pre>\n</li>\n<li><p>查看指定数据库下保存的数据表</p>\n<pre class=\"language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token keyword\">SHOW</span> <span class=\"token keyword\">TABLES</span> <span class=\"token keyword\">FROM</span> 数据库名<span class=\"token punctuation\">;</span></code></pre></li>\n</ul>\n<h3 id=\"修改数据库\"><a href=\"#修改数据库\" class=\"headerlink\" title=\"修改数据库\"></a>修改数据库</h3><ul>\n<li><p>更改数据库字符集</p>\n<pre class=\"language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token keyword\">ALTER</span> <span class=\"token keyword\">DATABASE</span> mytest1 <span class=\"token keyword\">CHARACTER</span> <span class=\"token keyword\">SET</span> <span class=\"token string\">'utf8'</span><span class=\"token punctuation\">;</span></code></pre></li>\n</ul>\n<h3 id=\"删除数据库\"><a href=\"#删除数据库\" class=\"headerlink\" title=\"删除数据库\"></a>删除数据库</h3><ul>\n<li><p>方式一：</p>\n<pre class=\"language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token keyword\">DROP</span> <span class=\"token keyword\">DATABASE</span> mytest1<span class=\"token punctuation\">;</span></code></pre>\n</li>\n<li><p>方式二：</p>\n<pre class=\"language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token keyword\">DROP</span> <span class=\"token keyword\">DATABASE</span> <span class=\"token keyword\">IF</span> <span class=\"token keyword\">EXISTS</span> mytest1<span class=\"token punctuation\">;</span></code></pre></li>\n</ul>\n<h3 id=\"创建数据表\"><a href=\"#创建数据表\" class=\"headerlink\" title=\"创建数据表\"></a>创建数据表</h3><ul>\n<li><p>方式一：</p>\n<pre class=\"language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token keyword\">USE</span> mytest1<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">TABLE</span> <span class=\"token keyword\">IF</span> <span class=\"token operator\">NOT</span> <span class=\"token keyword\">EXISTS</span> myemp1<span class=\"token punctuation\">(</span> <span class=\"token comment\"># 需要用户具有创建表的权限</span>\n\tid <span class=\"token keyword\">INT</span><span class=\"token punctuation\">,</span>\n    emp_name <span class=\"token keyword\">VARCHAR</span><span class=\"token punctuation\">(</span><span class=\"token number\">15</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token comment\"># 使用VARCHAR字符串必须指定长度</span>\n    hire_date <span class=\"token keyword\">DATE</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n\n<span class=\"token comment\"># 查看表的创建信息</span>\n<span class=\"token keyword\">SHOW</span> <span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">TABLE</span> myemp1<span class=\"token punctuation\">;</span><span class=\"token comment\"># 如果创建表时没有指定字符集，默认使用表所在的数据库的字符集</span></code></pre>\n</li>\n<li><p>方式二：基于现有的表，同时导入数据</p>\n<pre class=\"language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">TABLE</span> myemp2\n<span class=\"token keyword\">AS</span>\n<span class=\"token keyword\">SELECT</span> employee_id<span class=\"token punctuation\">,</span> last_name <span class=\"token punctuation\">,</span>salary\n<span class=\"token keyword\">FROM</span> employees<span class=\"token punctuation\">;</span></code></pre>\n</li>\n<li><p>MySQL8新特性：计算列</p>\n<pre class=\"language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token comment\"># 计算列，是某一列的值是通过其他列计算得来的，其他列变化时计算列会随之更新。</span>\n<span class=\"token comment\"># 创建表时声明计算列：</span>\n<span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">TABLE</span> tb1<span class=\"token punctuation\">(</span>\n    id <span class=\"token keyword\">INT</span><span class=\"token punctuation\">,</span>\n\ta <span class=\"token keyword\">INT</span><span class=\"token punctuation\">,</span>\n    b <span class=\"token keyword\">INT</span><span class=\"token punctuation\">,</span>\n    c <span class=\"token keyword\">INT</span> GENERATED ALWAYS <span class=\"token keyword\">AS</span> <span class=\"token punctuation\">(</span>a <span class=\"token operator\">+</span> b<span class=\"token punctuation\">)</span> VIRTUAL <span class=\"token comment\"># c就是计算列，它的值总等于a+b</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\"># 向表中插入值</span>\n<span class=\"token keyword\">INSERT</span> <span class=\"token keyword\">INTO</span> tb1<span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">,</span>a<span class=\"token punctuation\">,</span>b<span class=\"token punctuation\">)</span> <span class=\"token comment\"># 这里只插入了a=11和b=22</span>\n<span class=\"token keyword\">VALUES</span>\n<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">11</span><span class=\"token punctuation\">,</span><span class=\"token number\">22</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\"># 查询</span>\n<span class=\"token keyword\">SELECT</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">FROM</span> tb1<span class=\"token punctuation\">;</span>\n<span class=\"token comment\"># c已经被同步成了11+22=33</span>\n<span class=\"token operator\">+</span><span class=\"token comment\">------+------+------+------+</span>\n<span class=\"token operator\">|</span> id   <span class=\"token operator\">|</span> a    <span class=\"token operator\">|</span> b    <span class=\"token operator\">|</span> c    <span class=\"token operator\">|</span>\n<span class=\"token operator\">+</span><span class=\"token comment\">------+------+------+------+</span>\n<span class=\"token operator\">|</span>    <span class=\"token number\">1</span> <span class=\"token operator\">|</span>   <span class=\"token number\">11</span> <span class=\"token operator\">|</span>   <span class=\"token number\">22</span> <span class=\"token operator\">|</span>   <span class=\"token number\">33</span> <span class=\"token operator\">|</span>\n<span class=\"token operator\">+</span><span class=\"token comment\">------+------+------+------+</span>\n<span class=\"token number\">1</span> <span class=\"token keyword\">row</span> <span class=\"token operator\">in</span> <span class=\"token keyword\">set</span> <span class=\"token punctuation\">(</span><span class=\"token number\">0.02</span> sec<span class=\"token punctuation\">)</span></code></pre></li>\n</ul>\n<h3 id=\"查看表结构\"><a href=\"#查看表结构\" class=\"headerlink\" title=\"查看表结构\"></a>查看表结构</h3><pre class=\"language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token keyword\">DESC</span> myemp1<span class=\"token punctuation\">;</span></code></pre>\n\n<h3 id=\"修改表\"><a href=\"#修改表\" class=\"headerlink\" title=\"修改表\"></a>修改表</h3><ul>\n<li><p>添加字段</p>\n<pre class=\"language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token keyword\">ALTER</span> <span class=\"token keyword\">TABLE</span> myemp1\n<span class=\"token keyword\">ADD</span> salary <span class=\"token keyword\">DOUBLE</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 一共十位数字，小数点后两位，默认添加到表的最后面</span>\n\n<span class=\"token keyword\">ALTER</span> <span class=\"token keyword\">TABLE</span> myemp1\n<span class=\"token keyword\">ADD</span> phone_number <span class=\"token keyword\">VARCHAR</span><span class=\"token punctuation\">(</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">FIRST</span><span class=\"token punctuation\">;</span> <span class=\"token comment\"># 把phone_number添加到第一个字段的位置</span>\n\n<span class=\"token keyword\">ALTER</span> <span class=\"token keyword\">TABLE</span> myemp1\n<span class=\"token keyword\">ADD</span> email <span class=\"token keyword\">VARCHAR</span><span class=\"token punctuation\">(</span><span class=\"token number\">45</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">AFTER</span> emp_name<span class=\"token punctuation\">;</span> <span class=\"token comment\"># 把email放到emp_name后面</span></code></pre>\n\n\n</li>\n<li><p>修改字段</p>\n<pre class=\"language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token keyword\">ALTER</span> <span class=\"token keyword\">TABLE</span> myemp1\n<span class=\"token keyword\">MODIFY</span> emp_name <span class=\"token keyword\">VARCHAR</span><span class=\"token punctuation\">(</span><span class=\"token number\">35</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">DEFAULT</span> <span class=\"token string\">'AAA'</span><span class=\"token punctuation\">;</span></code></pre>\n\n\n</li>\n<li><p>重命名一个字段</p>\n<pre class=\"language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token keyword\">ALTER</span> <span class=\"token keyword\">TABLE</span> myemp1\nCHANGE salary monthly_salary <span class=\"token keyword\">DOUBLE</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">ALTER</span> <span class=\"token keyword\">TABLE</span> myemp1\nCHANGE email my_email <span class=\"token keyword\">VARCHAR</span><span class=\"token punctuation\">(</span><span class=\"token number\">50</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n\n\n</li>\n<li><p>删除一个字段</p>\n<pre class=\"language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token keyword\">ALTER</span> <span class=\"token keyword\">TABLE</span> myemp1\n<span class=\"token keyword\">DROP</span> <span class=\"token keyword\">COLUMN</span> my_email<span class=\"token punctuation\">;</span></code></pre></li>\n</ul>\n<h3 id=\"重命名表\"><a href=\"#重命名表\" class=\"headerlink\" title=\"重命名表\"></a>重命名表</h3><ul>\n<li><p>方式一：</p>\n<pre class=\"language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token keyword\">RENAME</span> <span class=\"token keyword\">TABLE</span> emp1\n<span class=\"token keyword\">TO</span> myemp11<span class=\"token punctuation\">;</span></code></pre>\n</li>\n<li><p>方式二：</p>\n<pre class=\"language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token keyword\">ALTER</span> <span class=\"token keyword\">TABLE</span> myemp2\n<span class=\"token keyword\">RENAME</span> <span class=\"token keyword\">TO</span> myemp12<span class=\"token punctuation\">;</span></code></pre></li>\n</ul>\n<h3 id=\"删除表\"><a href=\"#删除表\" class=\"headerlink\" title=\"删除表\"></a>删除表</h3><pre class=\"language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token keyword\">DROP</span> <span class=\"token keyword\">TABLE</span> <span class=\"token keyword\">IF</span> <span class=\"token keyword\">EXISTS</span> 表名<span class=\"token punctuation\">;</span></code></pre>\n\n<h3 id=\"清空表\"><a href=\"#清空表\" class=\"headerlink\" title=\"清空表\"></a>清空表</h3><pre class=\"language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token comment\"># 清空表中的数据，但是结构还在</span>\n<span class=\"token keyword\">TRUNCATE</span> <span class=\"token keyword\">TABLE</span> 表名<span class=\"token punctuation\">;</span></code></pre>\n\n<h3 id=\"COMMIT-和-ROLLBACK\"><a href=\"#COMMIT-和-ROLLBACK\" class=\"headerlink\" title=\"COMMIT 和 ROLLBACK\"></a>COMMIT 和 ROLLBACK</h3><ul>\n<li>COMMIT: 提交数据， 一旦执行，数据就被永久保存到了数据库中，不可以回滚。</li>\n<li>ROLLBACK：回滚数据，一旦执行，可以实现数据的回滚。回滚到最近的一次COMMIT之后。</li>\n</ul>\n<h3 id=\"对比TRUNCATE-和-DELETE\"><a href=\"#对比TRUNCATE-和-DELETE\" class=\"headerlink\" title=\"对比TRUNCATE 和 DELETE\"></a>对比TRUNCATE 和 DELETE</h3><ul>\n<li>相同点：都可以实现对表中所有数据的删除，同时保留表结构</li>\n<li>不同点：一旦执行TRUNCATE，表数据全部清除，不可以回滚；DELETE 可以全部清除（不带WHERE），数据可以实现回滚</li>\n</ul>\n<h3 id=\"DDL和DML的说明\"><a href=\"#DDL和DML的说明\" class=\"headerlink\" title=\"DDL和DML的说明\"></a>DDL和DML的说明</h3><ol>\n<li>DDL的操作一旦执行，就不可以回滚，<code>SET autocommit = FALSE</code>对DDL无效，因为在执行完DDL之后，一定会执行一次COMMIT。MySQL8.0以后，DDL的操作引入了原子性，要么都执行，要么都不执行、</li>\n<li>DML操作默认情况也是不可以回滚的，但是如果在执行DML之前，执行了<code>SET autocommit = FALSE</code>，则执行的DML操作就可以回滚。</li>\n</ol>\n<p>演示：</p>\n<pre class=\"language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token comment\"># 创建一个备份表，在备份表里面操作</span>\n<span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">TABLE</span> employee_copy\n<span class=\"token keyword\">AS</span>\n<span class=\"token keyword\">SELECT</span> <span class=\"token operator\">*</span>\n<span class=\"token keyword\">FROM</span> employees<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\"># 看一下备份表里面的数据</span>\n<span class=\"token keyword\">SELECT</span> employee_id<span class=\"token punctuation\">,</span>last_name<span class=\"token punctuation\">,</span> salary\n<span class=\"token keyword\">FROM</span> employee_copy<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\"># 和employee表一样，共107条数据</span>\n<span class=\"token operator\">+</span><span class=\"token comment\">-------------+-------------+----------+</span>\n<span class=\"token operator\">|</span> employee_id <span class=\"token operator\">|</span> last_name   <span class=\"token operator\">|</span> salary   <span class=\"token operator\">|</span>\n<span class=\"token operator\">+</span><span class=\"token comment\">-------------+-------------+----------+</span>\n<span class=\"token operator\">|</span>         <span class=\"token number\">100</span> <span class=\"token operator\">|</span> King        <span class=\"token operator\">|</span> <span class=\"token number\">24000.00</span> <span class=\"token operator\">|</span>\n<span class=\"token operator\">|</span>         <span class=\"token number\">101</span> <span class=\"token operator\">|</span> Kochhar     <span class=\"token operator\">|</span> <span class=\"token number\">17000.00</span> <span class=\"token operator\">|</span>\n<span class=\"token operator\">|</span>         <span class=\"token number\">102</span> <span class=\"token operator\">|</span> De Haan     <span class=\"token operator\">|</span> <span class=\"token number\">17000.00</span> <span class=\"token operator\">|</span>\n<span class=\"token operator\">|</span>         <span class=\"token number\">103</span> <span class=\"token operator\">|</span> Hunold      <span class=\"token operator\">|</span>  <span class=\"token number\">9000.00</span> <span class=\"token operator\">|</span>\n<span class=\"token operator\">|</span>         <span class=\"token number\">104</span> <span class=\"token operator\">|</span> Ernst       <span class=\"token operator\">|</span>  <span class=\"token number\">6000.00</span> <span class=\"token operator\">|</span>\n<span class=\"token operator\">|</span>         <span class=\"token number\">105</span> <span class=\"token operator\">|</span> Austin      <span class=\"token operator\">|</span>  <span class=\"token number\">4800.00</span> <span class=\"token operator\">|</span>\n<span class=\"token operator\">|</span>         <span class=\"token number\">106</span> <span class=\"token operator\">|</span> Pataballa   <span class=\"token operator\">|</span>  <span class=\"token number\">4800.00</span> <span class=\"token operator\">|</span>\n<span class=\"token operator\">|</span>         <span class=\"token number\">107</span> <span class=\"token operator\">|</span> Lorentz     <span class=\"token operator\">|</span>  <span class=\"token number\">4200.00</span> <span class=\"token operator\">|</span>\n<span class=\"token operator\">|</span>         <span class=\"token number\">108</span> <span class=\"token operator\">|</span> Greenberg   <span class=\"token operator\">|</span> <span class=\"token number\">12000.00</span> <span class=\"token operator\">|</span>\n<span class=\"token operator\">|</span>         <span class=\"token number\">109</span> <span class=\"token operator\">|</span> Faviet      <span class=\"token operator\">|</span>  <span class=\"token number\">9000.00</span> <span class=\"token operator\">|</span>\n<span class=\"token operator\">|</span>         <span class=\"token number\">110</span> <span class=\"token operator\">|</span> Chen        <span class=\"token operator\">|</span>  <span class=\"token number\">8200.00</span> <span class=\"token operator\">|</span>\n<span class=\"token operator\">|</span>         <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token operator\">|</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>         <span class=\"token operator\">|</span>       <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token operator\">|</span>\n<span class=\"token operator\">+</span><span class=\"token comment\">-------------+-------------+----------+</span>\n<span class=\"token number\">107</span> <span class=\"token keyword\">rows</span> <span class=\"token operator\">in</span> <span class=\"token keyword\">set</span> <span class=\"token punctuation\">(</span><span class=\"token number\">0.11</span> sec<span class=\"token punctuation\">)</span>\n\n\n<span class=\"token comment\"># 先提交，相当于存档，保证能够回滚</span>\n<span class=\"token keyword\">COMMIT</span><span class=\"token punctuation\">;</span>\n <span class=\"token comment\">-- Query OK, 0 rows affected (0.09 sec)</span>\n\n<span class=\"token comment\"># 关闭自动提交事务</span>\n<span class=\"token keyword\">SET</span> autocommit <span class=\"token operator\">=</span> <span class=\"token boolean\">FALSE</span><span class=\"token punctuation\">;</span>\n <span class=\"token comment\">-- Query OK, 0 rows affected (0.02 sec)</span>\n\n<span class=\"token comment\"># 删除所有表数据</span>\n<span class=\"token keyword\">DELETE</span> <span class=\"token keyword\">FROM</span> employee_copy<span class=\"token punctuation\">;</span>\n <span class=\"token comment\">-- Query OK, 107 rows affected (0.02 sec)</span>\n \n<span class=\"token comment\"># 查看表数据，确定已经删掉了</span>\n<span class=\"token keyword\">SELECT</span> employee_id<span class=\"token punctuation\">,</span>last_name<span class=\"token punctuation\">,</span> salary\n<span class=\"token keyword\">FROM</span> employee_copy<span class=\"token punctuation\">;</span>\n <span class=\"token comment\">-- Empty set (0.02 sec)</span>\n \n<span class=\"token comment\"># 回滚</span>\n<span class=\"token keyword\">ROLLBACK</span><span class=\"token punctuation\">;</span>\n <span class=\"token comment\">-- Query OK, 0 rows affected (0.02 sec)</span>\n\n<span class=\"token comment\"># 查看表数据，发现已经回来了</span>\n<span class=\"token keyword\">SELECT</span> employee_id<span class=\"token punctuation\">,</span>last_name<span class=\"token punctuation\">,</span> salary\n<span class=\"token keyword\">FROM</span> employee_copy<span class=\"token punctuation\">;</span>\n<span class=\"token operator\">+</span><span class=\"token comment\">-------------+-------------+----------+</span>\n<span class=\"token operator\">|</span> employee_id <span class=\"token operator\">|</span> last_name   <span class=\"token operator\">|</span> salary   <span class=\"token operator\">|</span>\n<span class=\"token operator\">+</span><span class=\"token comment\">-------------+-------------+----------+</span>\n<span class=\"token operator\">|</span>         <span class=\"token number\">100</span> <span class=\"token operator\">|</span> King        <span class=\"token operator\">|</span> <span class=\"token number\">24000.00</span> <span class=\"token operator\">|</span>\n<span class=\"token operator\">|</span>         <span class=\"token number\">101</span> <span class=\"token operator\">|</span> Kochhar     <span class=\"token operator\">|</span> <span class=\"token number\">17000.00</span> <span class=\"token operator\">|</span>\n<span class=\"token operator\">|</span>         <span class=\"token number\">102</span> <span class=\"token operator\">|</span> De Haan     <span class=\"token operator\">|</span> <span class=\"token number\">17000.00</span> <span class=\"token operator\">|</span>\n<span class=\"token operator\">|</span>         <span class=\"token number\">103</span> <span class=\"token operator\">|</span> Hunold      <span class=\"token operator\">|</span>  <span class=\"token number\">9000.00</span> <span class=\"token operator\">|</span>\n<span class=\"token operator\">|</span>         <span class=\"token number\">104</span> <span class=\"token operator\">|</span> Ernst       <span class=\"token operator\">|</span>  <span class=\"token number\">6000.00</span> <span class=\"token operator\">|</span>\n<span class=\"token operator\">|</span>         <span class=\"token number\">105</span> <span class=\"token operator\">|</span> Austin      <span class=\"token operator\">|</span>  <span class=\"token number\">4800.00</span> <span class=\"token operator\">|</span>\n<span class=\"token operator\">|</span>         <span class=\"token number\">106</span> <span class=\"token operator\">|</span> Pataballa   <span class=\"token operator\">|</span>  <span class=\"token number\">4800.00</span> <span class=\"token operator\">|</span>\n<span class=\"token operator\">|</span>         <span class=\"token number\">107</span> <span class=\"token operator\">|</span> Lorentz     <span class=\"token operator\">|</span>  <span class=\"token number\">4200.00</span> <span class=\"token operator\">|</span>\n<span class=\"token operator\">|</span>         <span class=\"token number\">108</span> <span class=\"token operator\">|</span> Greenberg   <span class=\"token operator\">|</span> <span class=\"token number\">12000.00</span> <span class=\"token operator\">|</span>\n<span class=\"token operator\">|</span>         <span class=\"token number\">109</span> <span class=\"token operator\">|</span> Faviet      <span class=\"token operator\">|</span>  <span class=\"token number\">9000.00</span> <span class=\"token operator\">|</span>\n<span class=\"token operator\">|</span>         <span class=\"token number\">110</span> <span class=\"token operator\">|</span> Chen        <span class=\"token operator\">|</span>  <span class=\"token number\">8200.00</span> <span class=\"token operator\">|</span>\n<span class=\"token operator\">|</span>         <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token operator\">|</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>         <span class=\"token operator\">|</span>       <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token operator\">|</span>\n<span class=\"token operator\">+</span><span class=\"token comment\">-------------+-------------+----------+</span>\n<span class=\"token number\">107</span> <span class=\"token keyword\">rows</span> <span class=\"token operator\">in</span> <span class=\"token keyword\">set</span> <span class=\"token punctuation\">(</span><span class=\"token number\">0.11</span> sec<span class=\"token punctuation\">)</span></code></pre>\n\n\n\n\n\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"SQL分类\"><a href=\"#SQL分类\" class=\"headerlink\" title=\"SQL分类\"></a>SQL分类</h2><ol>\n<li><p>DDL：数据定义语言</p>\n<ul>\n<li>CREATE</li>\n<li>ALTER</li>\n<li>DROP</li>\n<li>RENAME</li>\n<li>TRUNCATE</li>\n</ul>\n</li>\n<li><p>DML：数据操作语言</p>\n<ul>\n<li>INSERT</li>\n<li>DELETE</li>\n<li>UPDATE</li>\n<li>SELECT</li>\n</ul>\n</li>\n<li><p>DCL：数据控制语言</p>\n<ul>\n<li>COMMIT</li>\n<li>ROLLBACK</li>\n<li>SAVEPOINT</li>\n<li>GRANT</li>\n<li>REVOKE</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"SELECT语句\"><a href=\"#SELECT语句\" class=\"headerlink\" title=\"SELECT语句\"></a>SELECT语句</h2><h3 id=\"查询常量\"><a href=\"#查询常量\" class=\"headerlink\" title=\"查询常量\"></a>查询常量</h3><pre class=\"language-SQL\" data-language=\"SQL\"><code class=\"language-SQL\">SELECT 19;\n\nSELECT 1+1 FROM DUAL;  # dual：伪表\n\nSELECT 0, 123, employee_id, last_name\nFROM employees;</code></pre>\n\n<h3 id=\"查询所有字段\"><a href=\"#查询所有字段\" class=\"headerlink\" title=\"查询所有字段\"></a>查询所有字段</h3><pre class=\"language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token keyword\">SELECT</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">FROM</span> employees<span class=\"token punctuation\">;</span></code></pre>\n\n<h3 id=\"查询部分字段\"><a href=\"#查询部分字段\" class=\"headerlink\" title=\"查询部分字段\"></a>查询部分字段</h3><pre class=\"language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token keyword\">SELECT</span> employee_id<span class=\"token punctuation\">,</span> last_name<span class=\"token punctuation\">,</span> salary\n<span class=\"token keyword\">FROM</span> employees<span class=\"token punctuation\">;</span></code></pre>\n\n<h3 id=\"列的别名\"><a href=\"#列的别名\" class=\"headerlink\" title=\"列的别名\"></a>列的别名</h3><pre class=\"language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token comment\">/*\n\t两种方式：\n\t1.列原名 别名，如下面语句的employee_id emp_id\n\t2.列原名 AS 别名，如下面语句中的last_name AS lname\n\t3.基于前两种方式，可以用双引号括起别名，用于别名有空格的情况，如下面语句的salary*12 “annual sal”，但不要使用单引号\n*/</span>\n<span class=\"token keyword\">SELECT</span> employee_id emp_id<span class=\"token punctuation\">,</span> last_name <span class=\"token keyword\">AS</span> lname<span class=\"token punctuation\">,</span> salary<span class=\"token operator\">*</span><span class=\"token number\">12</span> “annual sal”\n<span class=\"token keyword\">FROM</span> employees<span class=\"token punctuation\">;</span></code></pre>\n\n<h3 id=\"去除重复行\"><a href=\"#去除重复行\" class=\"headerlink\" title=\"去除重复行\"></a>去除重复行</h3><pre class=\"language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token comment\"># 正确用法</span>\n<span class=\"token keyword\">SELECT</span> \t<span class=\"token keyword\">DISTINCT</span> department_id\n<span class=\"token keyword\">FROM</span> employees<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\"># 错误用法</span>\n<span class=\"token keyword\">SELECT</span> salary<span class=\"token punctuation\">,</span> <span class=\"token keyword\">DISTINCT</span> department_id\n<span class=\"token keyword\">FROM</span> employees<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\"># 不会报错，department_id 和 salary 作为整体</span>\n<span class=\"token keyword\">SELECT</span> <span class=\"token keyword\">DISTINCT</span> department_id， salary\n<span class=\"token keyword\">FROM</span> employees<span class=\"token punctuation\">;</span></code></pre>\n\n<h3 id=\"空值参与运算\"><a href=\"#空值参与运算\" class=\"headerlink\" title=\"空值参与运算\"></a>空值参与运算</h3><pre class=\"language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token comment\"># 空值：null</span>\n<span class=\"token comment\"># null不等于0，'',’null'</span>\n<span class=\"token comment\"># null值参与运算， 结果一定也为空</span>\n<span class=\"token comment\"># 绩效比例commission_pct为null时，年工资也为null</span>\n<span class=\"token keyword\">SELECT</span> employee_id salary <span class=\"token string\">\"月工资\"</span><span class=\"token punctuation\">,</span> salary <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token operator\">+</span> commission_pct<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">12</span> <span class=\"token string\">\"年工资\"</span>\n\n<span class=\"token comment\"># 把null当成0</span>\n<span class=\"token keyword\">SELECT</span> employee_id salary <span class=\"token string\">\"月工资\"</span><span class=\"token punctuation\">,</span> salary <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token operator\">+</span> IFNULL<span class=\"token punctuation\">(</span>commission_pct<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">12</span> <span class=\"token string\">\"年工资\"</span></code></pre>\n\n<h3 id=\"着重号-96\"><a href=\"#着重号-96\" class=\"headerlink\" title=\"着重号 &#96;\"></a>着重号 &#96;</h3><pre class=\"language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token comment\"># 用于表名和关键字相同时</span>\n<span class=\"token keyword\">SELECT</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">FROM</span> <span class=\"token keyword\">ORDER</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">SELECT</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">FROM</span> <span class=\"token identifier\"><span class=\"token punctuation\">`</span>order<span class=\"token punctuation\">`</span></span><span class=\"token punctuation\">;</span></code></pre>\n\n<h3 id=\"过滤条件\"><a href=\"#过滤条件\" class=\"headerlink\" title=\"过滤条件\"></a>过滤条件</h3><pre class=\"language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token comment\"># WHERE 紧跟在 FROM 子句后</span>\n<span class=\"token comment\"># WHERE 筛选后面的条件为1的数据， 0和NULL会被过滤</span>\n<span class=\"token comment\"># WHERE 不能使用类的别名</span>\n<span class=\"token keyword\">SELECT</span> <span class=\"token operator\">*</span> \n<span class=\"token keyword\">FROM</span> employees\n<span class=\"token keyword\">WHERE</span> last_name <span class=\"token operator\">=</span> <span class=\"token string\">'King'</span><span class=\"token punctuation\">;</span></code></pre>\n\n<h3 id=\"排序\"><a href=\"#排序\" class=\"headerlink\" title=\"排序\"></a>排序</h3><pre class=\"language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token comment\"># 如果没有使用排序，查询返回的数据默认按照添加数据的顺序</span>\n<span class=\"token comment\"># 使用ORDER BY对数据进行排序，升序ASC， 降序DESC，默认升序</span>\n\n<span class=\"token comment\"># 按照salary从高到低顺序显示员工信息</span>\n<span class=\"token keyword\">SELECT</span> employee_id<span class=\"token punctuation\">,</span> last_name<span class=\"token punctuation\">,</span> salary\n<span class=\"token keyword\">FROM</span> employees\n<span class=\"token keyword\">ORDER</span> <span class=\"token keyword\">BY</span> salary <span class=\"token keyword\">DESC</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\"># 按照salary从低到高顺序显示员工信息</span>\n<span class=\"token keyword\">SELECT</span> employee_id<span class=\"token punctuation\">,</span> last_name<span class=\"token punctuation\">,</span> salary\n<span class=\"token keyword\">FROM</span> employees\n<span class=\"token keyword\">ORDER</span> <span class=\"token keyword\">BY</span> salary <span class=\"token keyword\">ASC</span><span class=\"token punctuation\">;</span> <span class=\"token comment\"># ASC可以不写</span>\n\n<span class=\"token keyword\">SELECT</span> employee_id<span class=\"token punctuation\">,</span> last_name<span class=\"token punctuation\">,</span> salary\n<span class=\"token keyword\">FROM</span> employees\n<span class=\"token keyword\">ORDER</span> <span class=\"token keyword\">BY</span> salary<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\"># 使用类的别名排序</span>\n<span class=\"token keyword\">SELECT</span> employee_id emp_id<span class=\"token punctuation\">,</span> last_name <span class=\"token keyword\">AS</span> lname<span class=\"token punctuation\">,</span> salary<span class=\"token operator\">*</span><span class=\"token number\">12</span> “annual sal”\n<span class=\"token keyword\">FROM</span> employees<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">ORDER</span> <span class=\"token keyword\">BY</span> annual_sal<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\"># 二级排序</span>\n<span class=\"token comment\"># 显示员工信息，按照department_id降序排序，salary升序排序</span>\n<span class=\"token keyword\">SELECT</span> employee_id<span class=\"token punctuation\">,</span> last_name<span class=\"token punctuation\">,</span> salary\n<span class=\"token keyword\">FROM</span> employees\n<span class=\"token keyword\">ORDER</span> <span class=\"token keyword\">BY</span> department_id <span class=\"token keyword\">DESC</span><span class=\"token punctuation\">,</span> salary <span class=\"token keyword\">ASC</span><span class=\"token punctuation\">;</span></code></pre>\n\n<h3 id=\"分页\"><a href=\"#分页\" class=\"headerlink\" title=\"分页\"></a>分页</h3><pre class=\"language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token comment\"># 使用LIMIT使用分页操作</span>\n<span class=\"token comment\"># LIMIT 偏移量,条目数</span>\n<span class=\"token comment\"># LIMIT 0,20  表示偏移量为0，显示20条数据</span>\n\n<span class=\"token keyword\">SELECT</span> employee_id<span class=\"token punctuation\">,</span> last_name\n<span class=\"token keyword\">FROM</span> employees\n<span class=\"token keyword\">LIMIT</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">20</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\"># MySQL 8.0新特性</span>\n<span class=\"token comment\"># LIMIT 条目数 OFFSET 偏移量</span>\n<span class=\"token keyword\">SELECT</span> employee_id<span class=\"token punctuation\">,</span> last_name\n<span class=\"token keyword\">FROM</span> employees\n<span class=\"token keyword\">LIMIT</span> <span class=\"token number\">20</span> <span class=\"token keyword\">OFFSET</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></code></pre>\n\n\n\n<h2 id=\"显示表结构\"><a href=\"#显示表结构\" class=\"headerlink\" title=\"显示表结构\"></a>显示表结构</h2><pre class=\"language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token keyword\">DESCRIBE</span> employees<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">DESC</span> employees<span class=\"token punctuation\">;</span></code></pre>\n\n<h2 id=\"运算符\"><a href=\"#运算符\" class=\"headerlink\" title=\"运算符\"></a>运算符</h2><h3 id=\"算术运算符\"><a href=\"#算术运算符\" class=\"headerlink\" title=\"算术运算符\"></a>算术运算符</h3><p>+、-、*、&#x2F;或DIV、%或MOD</p>\n<pre class=\"language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token keyword\">SELECT</span> <span class=\"token number\">100</span> <span class=\"token operator\">+</span> <span class=\"token string\">'1'</span> <span class=\"token keyword\">FROM</span> DUAL<span class=\"token punctuation\">;</span> <span class=\"token comment\"># 返回101， 会将字符串转换为数值</span>\n<span class=\"token keyword\">SELECT</span> <span class=\"token number\">100</span> <span class=\"token operator\">+</span> <span class=\"token string\">'a'</span> <span class=\"token keyword\">FROM</span> DUAL<span class=\"token punctuation\">;</span> <span class=\"token comment\"># 返回100，将非数字字符串当作0</span>\n\n<span class=\"token keyword\">SELECT</span> <span class=\"token number\">100</span><span class=\"token operator\">/</span><span class=\"token number\">0</span> <span class=\"token keyword\">FROM</span> DUAL<span class=\"token punctuation\">;</span> <span class=\"token comment\"># 返回NULL</span></code></pre>\n\n<h3 id=\"比较运算符\"><a href=\"#比较运算符\" class=\"headerlink\" title=\"比较运算符\"></a>比较运算符</h3><p>比较结果为真返回1， 为假返回0， 其他情况返回NULL</p>\n<p>&#x3D;  \t&lt;&#x3D;&gt;（安全等于） \t&lt;&gt;（不等于） \t!&#x3D;\t&lt;\t&lt;&#x3D;\t&gt;\t&gt;&#x3D;</p>\n<pre class=\"language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token comment\"># 两边都是字符串，按照ANSI进行比较</span>\n<span class=\"token comment\"># 两边都是数字，按照数值比较</span>\n<span class=\"token comment\"># 数字和字符串相比，会产生字符串的隐形转换</span>\n<span class=\"token comment\"># null参与运算返回null</span>\n<span class=\"token keyword\">SELECT</span> <span class=\"token number\">1</span> <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span> <span class=\"token operator\">!=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span> <span class=\"token operator\">=</span> <span class=\"token string\">'1'</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span> <span class=\"token operator\">=</span> <span class=\"token string\">'A'</span> <span class=\"token keyword\">FROM</span> DUAL<span class=\"token punctuation\">;</span><span class=\"token comment\"># 返回0，1，1，1</span>\n<span class=\"token keyword\">SELECT</span> <span class=\"token string\">'A'</span> <span class=\"token operator\">=</span> <span class=\"token string\">'A'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'A'</span> <span class=\"token operator\">=</span> <span class=\"token string\">'B'</span> <span class=\"token keyword\">FROM</span> DUAL<span class=\"token punctuation\">;</span><span class=\"token comment\"># 返回1，0</span>\n<span class=\"token keyword\">SELECT</span> <span class=\"token number\">1</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">NULL</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">NULL</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">NULL</span> <span class=\"token keyword\">FROM</span> DUAL<span class=\"token punctuation\">;</span><span class=\"token comment\"># 返回NULL, NULL</span>\n\n<span class=\"token comment\"># &lt;=> 安全等于 在无NULL时等同于= ， 在有NULL时，两边都是NULL为1， 只有一个NULL为0</span>\n<span class=\"token keyword\">SELECT</span> <span class=\"token number\">1</span> <span class=\"token operator\">&lt;=></span> <span class=\"token boolean\">NULL</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">NULL</span> <span class=\"token operator\">&lt;=></span> <span class=\"token boolean\">NULL</span> <span class=\"token keyword\">FROM</span> DUAL<span class=\"token punctuation\">;</span><span class=\"token comment\"># 返回0，1</span>\n\n<span class=\"token keyword\">SELECT</span> employee_id<span class=\"token punctuation\">,</span> last_name<span class=\"token punctuation\">,</span> salary\n<span class=\"token keyword\">FROM</span> employees<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">WHERE</span> commission_pct <span class=\"token operator\">&lt;=></span> <span class=\"token boolean\">NULL</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">SELECT</span> employee_id<span class=\"token punctuation\">,</span> last_name<span class=\"token punctuation\">,</span> salary\n<span class=\"token keyword\">FROM</span> employees<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">WHERE</span> <span class=\"token operator\">NOT</span> commission_pct <span class=\"token operator\">&lt;=></span> <span class=\"token boolean\">NULL</span><span class=\"token punctuation\">;</span></code></pre>\n\n<h3 id=\"非符号类型运算符\"><a href=\"#非符号类型运算符\" class=\"headerlink\" title=\"非符号类型运算符\"></a>非符号类型运算符</h3><pre class=\"language-Sql\" data-language=\"Sql\"><code class=\"language-Sql\"># IS NULL &#x2F; IS NOT NULL &#x2F; ISNULL 判断字段是否为NULL\nSELECT employee_id, last_name, salary\nFROM employees;\nWHERE commission_pct IS NOT NULL;\n\n\n# LEAST() 求最小值&#x2F; GREATEST() 求最大值\nSELECT LEAST(&#39;A&#39;, &#39;B&#39;, &#39;E&#39;), GREATEST(&#39;A&#39;, &#39;B&#39;, &#39;E&#39;) FROM DUAL; # 返回A  E\n\n# BETWEEN 条件一 AND 条件二  包含条件一和条件二,要求条件一为下界， 条件二为上界，不能交换\n# 查询工资在6000和8000的员工信息\nSELECT employee_id, last_name, salary\nFROM employees\nWHERE salary BETWEEN 6000 AND 8000;\n\nSELECT employee_id, last_name, salary\nFROM employees\nWHERE salary &gt;&#x3D; 6000 &amp;&amp; SALARY &lt;&#x3D; 8000;\n\n# IN \\ NOT IN\n# 查询部门为10，20，30的员工信息\nSELECT last_name, salary, department_id\nFROM employees\nWHERE department_id &#x3D; 10 OR department_id &#x3D; 20 OR department_id &#x3D; 30\n\nSELECT last_name, salary, department_id\nFROM employees\nWHERE department_id IN (10,20,30);\n\n# LIKE 模糊查询\n# 查询last_name中包含字符a的元素信息\nSELECT last_name, salary, department_id\nFROM employees\nWHERE last_name LIKE &#39;%a%&#39;; # &#39;%&#39;代表不确定个数的字符\n\n# 查询last_name中包含字符a和e的元素信息\nSELECT last_name, salary, department_id\nFROM employees\nWHERE last_name LIKE &#39;%a%&#39; AND last_name LIKE &#39;%e%&#39;; # &#39;%&#39;代表不确定个数的字符\n\n# 查询last_name中包含第二个字符是a的元素信息\nSELECT last_name, salary, department_id\nFROM employees\nWHERE last_name LIKE &#39;_a%&#39;; # &#39;_&#39;代表一个字符\n\n# 正则表达式\n# REGEXP \\ RLIKE: 正则表达式\nSELECT &#39;shlstart&#39; REGEXP &#39;^s&#39;,&#39;shlstart&#39; REGEXP &#39;t$&#39;,&#39;shlstart&#39; REGEXP &#39;hk&#39;\nFROM DUAL;</code></pre>\n\n<h3 id=\"逻辑运算符\"><a href=\"#逻辑运算符\" class=\"headerlink\" title=\"逻辑运算符\"></a>逻辑运算符</h3><p>! &#x2F; NOT  \t&amp;&amp; &#x2F; AND  \t || &#x2F; OR   \tXOR（异或）</p>\n<h2 id=\"多表查询\"><a href=\"#多表查询\" class=\"headerlink\" title=\"多表查询\"></a>多表查询</h2><h3 id=\"等值连接和非等值连接\"><a href=\"#等值连接和非等值连接\" class=\"headerlink\" title=\"等值连接和非等值连接\"></a>等值连接和非等值连接</h3><pre class=\"language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token comment\"># 错误写法，缺少了连接条件，会出现笛卡尔积</span>\n<span class=\"token keyword\">SELECT</span> employee_id<span class=\"token punctuation\">,</span> department_name\n<span class=\"token keyword\">FROM</span> employees<span class=\"token punctuation\">,</span> departments<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">SELECT</span> employee_id<span class=\"token punctuation\">,</span> department_name\n<span class=\"token keyword\">FROM</span> employees <span class=\"token keyword\">CROSS</span> <span class=\"token keyword\">JOIN</span> departments<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\"># 正确写法</span>\n<span class=\"token comment\"># 等值连接</span>\n<span class=\"token comment\"># 如果查询语句中出现了多个表中都存在的字段，则必须指明字段所在的表</span>\n<span class=\"token keyword\">SELECT</span> employee_id<span class=\"token punctuation\">,</span> department_name<span class=\"token punctuation\">,</span>employees<span class=\"token punctuation\">.</span>department_id\n<span class=\"token keyword\">FROM</span> employees<span class=\"token punctuation\">,</span> departments<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">WHERE</span> employees<span class=\"token punctuation\">.</span>department_id <span class=\"token operator\">=</span> departments<span class=\"token punctuation\">.</span>department_id<span class=\"token punctuation\">;</span>\n\n\n<span class=\"token comment\"># 给表起别名,起了别名必须用</span>\n<span class=\"token keyword\">SELECT</span> emp<span class=\"token punctuation\">.</span>employee_id<span class=\"token punctuation\">,</span> dept<span class=\"token punctuation\">.</span>department_name<span class=\"token punctuation\">,</span>emp<span class=\"token punctuation\">.</span>department_id\n<span class=\"token keyword\">FROM</span> employees emp<span class=\"token punctuation\">,</span> departments dept<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">WHERE</span> emp<span class=\"token punctuation\">.</span>department_id <span class=\"token operator\">=</span> dept<span class=\"token punctuation\">.</span>department_id<span class=\"token punctuation\">;</span>\n\n\n<span class=\"token comment\"># 非等值连接</span>\n<span class=\"token keyword\">SELECT</span> last_name<span class=\"token punctuation\">,</span> salary<span class=\"token punctuation\">,</span> grade_level\n<span class=\"token keyword\">FROM</span> employees e<span class=\"token punctuation\">,</span> job_grades\n<span class=\"token keyword\">WHERE</span> e<span class=\"token punctuation\">.</span><span class=\"token identifier\"><span class=\"token punctuation\">`</span>salary<span class=\"token punctuation\">`</span></span> <span class=\"token operator\">BETWEEN</span> j<span class=\"token punctuation\">.</span><span class=\"token identifier\"><span class=\"token punctuation\">`</span>lowest_sal<span class=\"token punctuation\">`</span></span> <span class=\"token operator\">AND</span> j<span class=\"token punctuation\">.</span><span class=\"token identifier\"><span class=\"token punctuation\">`</span>highest_sal<span class=\"token punctuation\">`</span></span><span class=\"token punctuation\">;</span></code></pre>\n\n<h3 id=\"自连接和非自连接\"><a href=\"#自连接和非自连接\" class=\"headerlink\" title=\"自连接和非自连接\"></a>自连接和非自连接</h3><pre class=\"language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token comment\"># 自连接</span>\n<span class=\"token comment\"># 查询员工id、名称last_name及其上级id、名称</span>\n<span class=\"token keyword\">SELECT</span> emp<span class=\"token punctuation\">.</span>empployee_id<span class=\"token punctuation\">,</span> emp<span class=\"token punctuation\">.</span>last_name<span class=\"token punctuation\">,</span> man<span class=\"token punctuation\">.</span>employee_id<span class=\"token punctuation\">,</span> man<span class=\"token punctuation\">.</span>last_name\n<span class=\"token keyword\">FROM</span> employees emp<span class=\"token punctuation\">,</span> employees man\n<span class=\"token keyword\">WHERE</span> emp<span class=\"token punctuation\">.</span>manager_id <span class=\"token operator\">=</span> man<span class=\"token punctuation\">.</span>employee_id</code></pre>\n\n<h3 id=\"内连接和外连接\"><a href=\"#内连接和外连接\" class=\"headerlink\" title=\"内连接和外连接\"></a>内连接和外连接</h3><pre class=\"language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token comment\"># 内连接：合并具有同一列的两个以上的表的行，结果集中不包含一个表与另一个表不匹配的行</span>\n<span class=\"token comment\"># SQL92(MySQL不支持)实现内连接</span>\n<span class=\"token keyword\">SELECT</span> employee_id<span class=\"token punctuation\">,</span> department_name<span class=\"token punctuation\">,</span>employees<span class=\"token punctuation\">.</span>department_id\n<span class=\"token keyword\">FROM</span> employees<span class=\"token punctuation\">,</span> departments<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">WHERE</span> employees<span class=\"token punctuation\">.</span>department_id <span class=\"token operator\">=</span> departments<span class=\"token punctuation\">.</span>department_id<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\"># SQL99实现外连接JOIN ON</span>\n<span class=\"token keyword\">SELECT</span> emp<span class=\"token punctuation\">.</span>last_name<span class=\"token punctuation\">,</span> dept<span class=\"token punctuation\">.</span>department_name\n<span class=\"token keyword\">FROM</span> employees emp <span class=\"token keyword\">INNER</span> <span class=\"token keyword\">JOIN</span> departments dept\n<span class=\"token keyword\">ON</span> emp<span class=\"token punctuation\">.</span>department_id <span class=\"token operator\">=</span> dept<span class=\"token punctuation\">.</span>department_id<span class=\"token punctuation\">;</span><span class=\"token comment\"># INNER可以省略</span>\n\n<span class=\"token comment\"># 外连接：合并具有同一列的两个以上的表的行，结果集中不仅包含一个表与另一个表不匹配的行，还包含左表 或 右表中不匹配的行</span>\n\n<span class=\"token comment\"># 左外连接：合并具有同一列的两个以上的表的行，结果集中不仅包含一个表与另一个表不匹配的行，还包含左表中不匹配的行</span>\n\n<span class=\"token comment\"># 右外连接：合并具有同一列的两个以上的表的行，结果集中不仅包含一个表与另一个表不匹配的行，还包含右表中不匹配的行</span>\n\n<span class=\"token comment\"># 满外连接：合并具有同一列的两个以上的表的行，结果集中不仅包含一个表与另一个表不匹配的行，还包含左表 和 右表中不匹配的行</span>\n\n\n<span class=\"token comment\"># 左外连接</span>\n<span class=\"token comment\"># 查询所有员工的last_name和department_name</span>\n<span class=\"token comment\"># SQL92（MySQL不支持）语法实现外连接：使用+</span>\n<span class=\"token keyword\">SELECT</span> emp<span class=\"token punctuation\">.</span>last_name<span class=\"token punctuation\">,</span> dept<span class=\"token punctuation\">.</span>department_name\n<span class=\"token keyword\">FROM</span> employees emp<span class=\"token punctuation\">,</span> departments dept\n<span class=\"token keyword\">WHERE</span> emp<span class=\"token punctuation\">.</span>department_id <span class=\"token operator\">=</span> dept<span class=\"token punctuation\">.</span>department_id<span class=\"token punctuation\">(</span><span class=\"token operator\">+</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\"># SQL99语法实现外连接：使用OUTER JOIN ON</span>\n<span class=\"token keyword\">SELECT</span> emp<span class=\"token punctuation\">.</span>last_name<span class=\"token punctuation\">,</span> dept<span class=\"token punctuation\">.</span>department_name\n<span class=\"token keyword\">FROM</span> employees emp <span class=\"token keyword\">LEFT</span> <span class=\"token keyword\">OUTER</span> <span class=\"token keyword\">JOIN</span> departments dept\n<span class=\"token keyword\">ON</span> emp<span class=\"token punctuation\">.</span>department_id <span class=\"token operator\">=</span> dept<span class=\"token punctuation\">.</span>department_id<span class=\"token punctuation\">;</span><span class=\"token comment\"># OUTER可以省略</span>\n\n<span class=\"token comment\"># 右外连接</span>\n<span class=\"token comment\"># SQL92（MySQL不支持）语法实现外连接：使用+</span>\n<span class=\"token keyword\">SELECT</span> emp<span class=\"token punctuation\">.</span>last_name<span class=\"token punctuation\">,</span> dept<span class=\"token punctuation\">.</span>department_name\n<span class=\"token keyword\">FROM</span> employees emp<span class=\"token punctuation\">,</span> departments dept\n<span class=\"token keyword\">WHERE</span> emp<span class=\"token punctuation\">.</span>department_id<span class=\"token punctuation\">(</span><span class=\"token operator\">+</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> dept<span class=\"token punctuation\">.</span>department_id<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\"># SQL99语法实现外连接：使用OUTER JOIN ON</span>\n<span class=\"token keyword\">SELECT</span> emp<span class=\"token punctuation\">.</span>last_name<span class=\"token punctuation\">,</span> dept<span class=\"token punctuation\">.</span>department_name\n<span class=\"token keyword\">FROM</span> employees emp <span class=\"token keyword\">RIGHT</span> <span class=\"token keyword\">OUTER</span> <span class=\"token keyword\">JOIN</span> departments dept\n<span class=\"token keyword\">ON</span> emp<span class=\"token punctuation\">.</span>department_id <span class=\"token operator\">=</span> dept<span class=\"token punctuation\">.</span>department_id<span class=\"token punctuation\">;</span><span class=\"token comment\"># OUTER可以省略</span>\n\n<span class=\"token comment\"># 满外连接</span>\n<span class=\"token comment\"># SQL99语法实现外连接：使用FULL OUTER JOIN ON</span>\n<span class=\"token comment\"># MySQL不支持FULL OUTER JOIN ON，满外连接使用UNION实现</span>\n<span class=\"token keyword\">SELECT</span> emp<span class=\"token punctuation\">.</span>last_name<span class=\"token punctuation\">,</span> dept<span class=\"token punctuation\">.</span>department_name\n<span class=\"token keyword\">FROM</span> employees emp <span class=\"token keyword\">FULL</span> <span class=\"token keyword\">OUTER</span> <span class=\"token keyword\">JOIN</span> departments dept\n<span class=\"token keyword\">ON</span> emp<span class=\"token punctuation\">.</span>department_id <span class=\"token operator\">=</span> dept<span class=\"token punctuation\">.</span>department_id<span class=\"token punctuation\">;</span><span class=\"token comment\"># OUTER可以省略</span></code></pre>\n\n<p>SQL99中实现七种JOIN操作的方法：</p>\n<p><img src=\"/@JOIN.png\" alt=\"MySQL中七种JOIN实现\"></p>\n<h3 id=\"UNION-和-UNION-ALL的使用\"><a href=\"#UNION-和-UNION-ALL的使用\" class=\"headerlink\" title=\"UNION 和 UNION ALL的使用\"></a>UNION 和 UNION ALL的使用</h3><p><strong>UNION</strong> 和 <strong>UNION ALL</strong>用于合并两个查询的结果集，取并集</p>\n<p>区别在于 <strong>UNION</strong> 会对结果集去重， 而 <strong>UNION ALL</strong> 不会去重</p>\n<p>因此 <strong>UNION ALL</strong> 速度更快，更推荐使用</p>\n<pre class=\"language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token comment\"># 使用 UNION 和 UNION ALL 实现满外连接</span>\n<span class=\"token keyword\">SELECT</span> e<span class=\"token punctuation\">.</span>employee_id<span class=\"token punctuation\">,</span> d<span class=\"token punctuation\">.</span>department_name\n<span class=\"token keyword\">FROM</span> employees e <span class=\"token keyword\">LEFT</span> <span class=\"token keyword\">JOIN</span> departments d\n<span class=\"token keyword\">ON</span> e<span class=\"token punctuation\">.</span>employee_id <span class=\"token operator\">=</span> d<span class=\"token punctuation\">.</span>department_id\n<span class=\"token keyword\">UNION</span> <span class=\"token keyword\">ALL</span>\n<span class=\"token keyword\">SELECT</span> e<span class=\"token punctuation\">.</span>employee_id<span class=\"token punctuation\">,</span> d<span class=\"token punctuation\">.</span>department_name\n<span class=\"token keyword\">FROM</span> employees e <span class=\"token keyword\">RIGHT</span> <span class=\"token keyword\">JOIN</span> departments d\n<span class=\"token keyword\">ON</span> e<span class=\"token punctuation\">.</span>employee_id <span class=\"token operator\">=</span> d<span class=\"token punctuation\">.</span>department_id\n<span class=\"token keyword\">WHERE</span> e<span class=\"token punctuation\">.</span>department_id <span class=\"token operator\">IS</span> <span class=\"token boolean\">NULL</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">SELECT</span> e<span class=\"token punctuation\">.</span>employee_id<span class=\"token punctuation\">,</span> d<span class=\"token punctuation\">.</span>department_name\n<span class=\"token keyword\">FROM</span> employees e <span class=\"token keyword\">LEFT</span> <span class=\"token keyword\">JOIN</span> departments d\n<span class=\"token keyword\">ON</span> e<span class=\"token punctuation\">.</span>employee_id <span class=\"token operator\">=</span> d<span class=\"token punctuation\">.</span>department_id\n<span class=\"token keyword\">WHERE</span> d<span class=\"token punctuation\">.</span>department_id <span class=\"token operator\">IS</span> <span class=\"token boolean\">NULL</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">UNION</span> <span class=\"token keyword\">ALL</span>\n<span class=\"token keyword\">SELECT</span> e<span class=\"token punctuation\">.</span>employee_id<span class=\"token punctuation\">,</span> d<span class=\"token punctuation\">.</span>department_name\n<span class=\"token keyword\">FROM</span> employees e <span class=\"token keyword\">RIGHT</span> <span class=\"token keyword\">JOIN</span> departments d\n<span class=\"token keyword\">ON</span> e<span class=\"token punctuation\">.</span>employee_id <span class=\"token operator\">=</span> d<span class=\"token punctuation\">.</span>department_id</code></pre>\n\n<h3 id=\"SQL99新特性\"><a href=\"#SQL99新特性\" class=\"headerlink\" title=\"SQL99新特性\"></a>SQL99新特性</h3><ol>\n<li><p>自然连接</p>\n<p>NATURAL JOIN表示自然连接，自然连接其实是等值连接，自动查询两张表中相同的字段进行等值连接</p>\n<pre class=\"language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token comment\"># 自然连接</span>\n<span class=\"token keyword\">SELECT</span> e<span class=\"token punctuation\">.</span>employee_id<span class=\"token punctuation\">,</span> d<span class=\"token punctuation\">.</span>department_name<span class=\"token punctuation\">,</span>e<span class=\"token punctuation\">.</span>department_id\n<span class=\"token keyword\">FROM</span> employees e<span class=\"token punctuation\">,</span> departments d<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">WHERE</span> e<span class=\"token punctuation\">.</span>department_id <span class=\"token operator\">=</span> d<span class=\"token punctuation\">.</span>department_id<span class=\"token punctuation\">;</span>\n<span class=\"token operator\">AND</span> e<span class=\"token punctuation\">.</span>manager_id <span class=\"token operator\">=</span> d<span class=\"token punctuation\">.</span>manager_id<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">SELECT</span> e<span class=\"token punctuation\">.</span>employee_id<span class=\"token punctuation\">,</span> d<span class=\"token punctuation\">.</span>department_name<span class=\"token punctuation\">,</span>e<span class=\"token punctuation\">.</span>department_id\n<span class=\"token keyword\">FROM</span> employees e <span class=\"token keyword\">NATURAL</span> <span class=\"token keyword\">JOIN</span> departments d<span class=\"token punctuation\">;</span>\n</code></pre>\n</li>\n<li><p><strong>USING</strong></p>\n<p>用于替换连接条件</p>\n<pre class=\"language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token keyword\">SELECT</span> e<span class=\"token punctuation\">.</span>employee_id<span class=\"token punctuation\">,</span> d<span class=\"token punctuation\">.</span>department_name<span class=\"token punctuation\">,</span>e<span class=\"token punctuation\">.</span>department_id\n<span class=\"token keyword\">FROM</span> employees e<span class=\"token punctuation\">,</span> departments d<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">WHERE</span> e<span class=\"token punctuation\">.</span>department_id <span class=\"token operator\">=</span> d<span class=\"token punctuation\">.</span>department_id<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">SELECT</span> e<span class=\"token punctuation\">.</span>employee_id<span class=\"token punctuation\">,</span> d<span class=\"token punctuation\">.</span>department_name<span class=\"token punctuation\">,</span>e<span class=\"token punctuation\">.</span>department_id\n<span class=\"token keyword\">FROM</span> employees e<span class=\"token punctuation\">,</span> departments d<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">USING</span> <span class=\"token punctuation\">(</span>department_id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\"># 必须写两张表中同名的字段单行函数数的特点</span>\n</code></pre></li>\n</ol>\n<h2 id=\"单行函数\"><a href=\"#单行函数\" class=\"headerlink\" title=\"单行函数\"></a>单行函数</h2><h3 id=\"单行函数的特点\"><a href=\"#单行函数的特点\" class=\"headerlink\" title=\"单行函数的特点\"></a>单行函数的特点</h3><ul>\n<li>操作数据对象</li>\n<li>接收参数返回一个结果</li>\n<li><strong>只对一行进行变换</strong></li>\n<li><strong>每行返回一个结果</strong></li>\n<li>可以嵌套</li>\n<li>参数可以是一列（字段）或一个值</li>\n</ul>\n<h3 id=\"数值函数\"><a href=\"#数值函数\" class=\"headerlink\" title=\"数值函数\"></a>数值函数</h3><pre class=\"language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token comment\">/*\n\tABS(x):返回x的绝对值\n\tSIGN(x):符号函数，x大于0返回1，小于0返回-1，等于0返回0\n\tPI():返回圆周率的值\n\tCEIL(x), CEILING(x)：返回不小于x的最小整数\n\tFLOOR(x)：返回不大于x的最大整数\n\tMOD(x,y):返回x除以y的余数\n\tLEAST(e1,e2,e3...):返回列表中的最小值\n\tGREATEST(e1,e2,e3...):返回列表中的最大值\n\tRAND():返回0-1的随机数\n\tRAND(x):返回0-1的随机值，其中x为种子，相同的x会产生相同的随机数\n\tROUND(x):返回x四舍五入后的最接近x的整数\n\tROUND(x,y):返回x四舍五入后最接近x的值，并保留到小数点后面y位\n\tTRUNCATE(x,y):返回数字x截断为y位小数的结果\n\tSQRT(x):返回x的平方根，当x小于0时返回null\n\tPOW(x,y):返回x的y次方\n\tPOWER(x,y):返回x的y次方\n\tEXP(x):返回e的x次方\n\tLN(x):返回x的自然对数\n\tLOG(x):返回x的自然对数\n\tLOG10(x):返回以10为底x的对数\n\tLOG2(x):返回以2为底x的对数\n\t\n\t三角函数：默认弧度制\n\tSIN(x):正弦值\n\tASIN(x):反正弦值\n\tCOS(x):余弦值\n\tACOS(x):反余弦值\n\tTAN(x):正切值\n\tATAN(x):反正切值\n\tATAN2(x,y):返回两个参数的反正切值\n\tCOT(x):余切值\n\t\n\t角度与弧度互换函数\n\tRADIANS(x):将角度转化为弧度，其中，参数x为角度值\n\tDEGREES(x):将弧度转化为角度，其中，参数x为弧度制\n\t\n\t进制间的转换\n\tBIN(x):二进制\n\tHEX(x):十六进制\n\tOCT(x):八进制\n\tCONV(x, f1, f2):返回f1进制变成f2进制\n*/</span></code></pre>\n\n<h3 id=\"字符串函数\"><a href=\"#字符串函数\" class=\"headerlink\" title=\"字符串函数\"></a>字符串函数</h3><pre class=\"language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token comment\">/*\n    注意：字符串的索引是从1开始的！\n\n\tASCII(s):返回字符串s中的第一个字符的ASCII码\n\tCHAR_LENGTH(s):返回字符串s的字符数\n\tLENGTH(s):返回字符串s的字节数\n\tCONCAT(s1,s2,...,sn):连接s1,s2,...,sn为一个字符串\n\tCONCAT_WS(x,s1,s2,...,sn):同CONCAT(s1,s2,...,sn)函数，但是每个字符串之间要加上x\n\tINSERT(str, idx, len, replacestr):将字符串str从第idx位置开始，len个字符长的子串替换为字符串replacestr\n\tREPLACE(str,a,b):用字符串b替换字符串str中所有出现的字符串a\n\tUPPER(s) / UCASE(s):将字符串s中所有字母转成大写字母\n\tLOWER(s) / LCASE(s):将字符串s中所有字母转成小写字母\n\tLEFT(str,n):返回字符串str最左边的n个字符\n\tRIGHT(str,n):返回字符串str最右边的n个字符\n\tLPAD(str, len, pad):用字符串pad对str最左边进行填充，直到str长度为len个字符\n\tRPAD(str, len, pad):用字符串pad对str最右边进行填充，直到str长度为len个字符\n\tLTRIM(s):去掉字符串s左侧的空格\n\tRTRIM(s):去掉字符串s右侧的空格\n\tTRIM(s):去掉字符串s开头和结尾的空格\n\tTRIM(s1 FROM s):去掉字符串s开始与结尾的s1\n\tTRIM(LEADING s1 FROM s):去掉字符串s开始的s1\n\tTRIM(TRAILING s1 FROM s):去掉字符串s结尾的s1\n\tREPEAT(str, n):返回str重复n次的结果\n\tSPACE(n):返回n个空格\n\tSTRCMP(s1, s2):比较s1、s2的ASCII码的大小\n\tSUBSTR(s, index, len):返回从字符串s的index位置起n个字符， 作用与SUBSTRING(s,n,len),MID(s,n,len)相同\n\tLOCATE(substr, str):返回字符串substr在字符串str中首次出现的位置，作用与POSITION(substr In str),INSTR(str, substr)相同。未找到返回0\n\tELT(m, s1, s2, ..., sn):返回指定位置的字符串，如果m=1，则返回s1，如果m=2，则返回s2，如果m=n，则返回sn\n\tFIELD(s,s1,s2,...,sn):返回字符串s在字符串列表中第一次出现的位置\n\tFIND_IN_SET(s1,s2):返回字符串s1在字符串s2中出现的位置，其中s2是一个以逗号分隔的字符串\n\tREVERSE(s):返回s反转后的字符串\n\tNULLIF(value1, value2):比较两个字符串，如果value1和value2相等，则返回NULL，否则返回value1\n*/</span></code></pre>\n\n<h3 id=\"日期函数\"><a href=\"#日期函数\" class=\"headerlink\" title=\"日期函数\"></a>日期函数</h3><pre class=\"language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token comment\">/*\n\t1.获取日期、时间\n\tCURDATE(),CURRENT_DATE():返回当前日期，只包含年月日，格式'yyyy-MM-dd'\n\tCURTIME(),CURRENT_TIME():返回当前时间，只包含时分秒，格式'HH:mm:ss'\n\tNOW()/SYSDATE()/CURRENT_TIMESTAMP()/LOCALTIME()/LOCALTIMESTAMP():返回当前系统日期和时间，格式'yyyy-MM-dd HH:mm:ss'\n\tUTC_DATE():返回UTC（世界标准时间）日期\n\tUTC_TIME():返回UTC（世界标准时间）时间\n\t\n\t2.日期和时间戳的转换\n\tUNIX_TIMESTAMP():以UNIX时间戳的形式返回当前时间\n\tUNIX_TIMESTAMP(date):将时间date以UNIX时间戳的形式返回\n\tFROM_UNIXTIME(timestamp):将UNIX时间戳的时间转换为普通格式的时间\n\t\n\t3.获取月份、星期、星期数、天数等函数\n\tYEAR(date)/MONTH(date)/DAY(date):返回具体的日期值\n\tHOUR(time)/MINUTE(time)/SECOND(time):返回具体的时间值\n\tMONTHNAME(date):返回月份：January...\n\tDAYNAME(date):返回星期几：MONDAY...\n\tWEEKDAY(date):返回周几，周一是0，周二是1，...，周日是6\n\tQUARTER(date):返回日期对应的季度，范围为1-4\n\tWEEK(date),WEEKOFYEAR(date):返回一年中的第几周\n\tDAYOFYEAR(date):返回日期是一年中的第几天\n\tDAYOFMONTH(date):返回日期位于所在月份的第几天\n\tDAYOFWEEK(date):返回周几，周一是1，周二是2，...，周日是7\n\t\n\t4.日期的操作函数\n\tEXTRACT(type FROM date):返回指定日期中特定的部分，type指定返回的值\n\ttype的取值如下：\n\tMICROSECOND:毫秒数\n\tSECOND:秒数\n\tMINUTE:分钟数\n\tHOUR:小时数\n\tDAY:天数\n\tWEEK:一年中的第几个星期\n\tMONTH:一年中的第几个月\n\tQUARTER:季度\n\tYEAR:年份\n\tSECOND_MICROSECOND:秒和毫秒值\n\t两个返回值的取值用下划线连接组合，如上面的SECOND_MICROSECOND。\n\t\n\t5.时间和秒钟的转换函数\n\tTIME_TO_SEC(time):将time转化为秒并返回结果值，转化的公式为：小时*3600+分钟*60+秒\n\tSEC_TO_TIME(seconds):将second描述转化为包含小时、分钟和秒的时间\n\t\n\t6.计算日期和时间的函数\n\tDATE_ADD(datetime, INTERVAL expr type):返回与给定日期时间相差INTERVAL时间段的日期时间\n\tDATE_SUB(date, INTERVAL expr type):返回与date相差INTERVAL时间间隔的日期\n\ttype的取值和EXTRACT函数一致，示例：DATE_ADD(NOW(), INTERVAL 1 YEAR),DATE_ADD(NOW(), INTERVAL -1 YEAR),DATE_ADD('2021-10-21 23:32:12', INTERVAL '1_1' YEAR_MONTH)\n\t\n\tADDTIME(time1, time2):返回time1加上time2的时间。当time2为一个数字时，代表的是秒，可以是负数\n\tSUBTIME(time1,time2):返回time1减去time2的时间。当time2为一个数字时，代表的是秒，可以是负数\n\tDATEDIFF(date1, date2):返回date1-date2的日期间隔天数\n\tTIMEDIFF(time1,time2):返回time1-time2的时间间隔\n\tFROM_DAYS(N):返回从0000年1月1日起，N天以后的日期\n\tTO_DAYS(date):返回日期距离0000年1月1日的天数\n\tLAST_DAY(date):返回date所在月份最后一天的日期\n\tMAKEDATE(year,n):针对给定年份和该年份中的天数返回一个日期\n\tMAKETIME(hour,minute,second):将给定的小时、分钟和秒合成时间并返回\n\tPERIOD_ADD(time,n):返回time加上n后的时间\n\t\n\t7.日期的格式化和解析\n\tDATE_FORMAT(date, fmt):按照字符串fmt格式化日期date值\n\tTIME_FORMAT(time, fmt):按照字符串fmt格式化时间time值\n\tGET_FORMAT(date_type, format_type):返回日期字符串的显示格式\n\tSTR_TO_DATE(str, fmt):按照字符串fmt对str进行解析，解析为一个日期\n\t\n\tfmt的格式：\n\t%S, %s 两位数字形式的秒（ 00,01, …, 59）\n    %I, %i 两位数字形式的分（ 00,01, …, 59）\n    %H 两位数字形式的小时，24 小时（00,01, …, 23）\n    %h 两位数字形式的小时，12 小时（01,02, …, 12）\n    %k 数字形式的小时，24 小时（0,1, …, 23）\n    %l 数字形式的小时，12 小时（1, 2, …, 12）\n    %T 24 小时的时间形式（hh:mm:ss）\n    %r 12 小时的时间形式（hh:mm:ss AM 或hh:mm:ss PM）\n    %p AM或PM\n    %W 一周中每一天的名称（Sunday, Monday, …, Saturday）\n    %a 一周中每一天名称的缩写（Sun, Mon, …, Sat）\n    %d 两位数字表示月中的天数（00, 01,…, 31）\n    %e 数字形式表示月中的天数（1, 2， …, 31）\n    %D 英文后缀表示月中的天数（1st, 2nd, 3rd,…）\n    %w 以数字形式表示周中的天数（ 0 = Sunday, 1=Monday, …, 6=Saturday）\n    %j 以三位数字表示年中的天数（ 001, 002, …, 366）\n    %U 周（0, 1, 52），其中Sunday 为周中的第一天\n    %u 周（0, 1, 52），其中Monday 为周中的第一天\n    %M 月名（January, February, …, December）\n    %b 缩写的月名（ January, February,…, December）\n    %m 两位数字表示的月份（01, 02, …, 12）\n    %c 数字表示的月份（1, 2, …, 12）\n    %Y 四位数字表示的年份\n    %y 两位数字表示的年份\n    %% 直接值“%”\n    \n    GET_FORMAT(date_type, format_type):返回日期字符串的显示格式:\n    GET_FORMAT(DATE,'USA')\t'%m.%d.%Y'\n    GET_FORMAT(DATE,'JIS')\t'%Y-%m-%d'\n    GET_FORMAT(DATE,'ISO')\t'%Y-%m-%d'\n    GET_FORMAT(DATE,'EUR')\t'%d.%m.%Y'\n    GET_FORMAT(DATE,'INTERNAL')\t'%Y%m%d'\n    GET_FORMAT(DATETIME,'USA')\t'%Y-%m-%d %H.%i.%s'\n    GET_FORMAT(DATETIME,'JIS')\t'%Y-%m-%d %H:%i:%s'\n    GET_FORMAT(DATETIME,'ISO')\t'%Y-%m-%d %H:%i:%s'\n    GET_FORMAT(DATETIME,'EUR')\t'%Y-%m-%d %H.%i.%s'\n    GET_FORMAT(DATETIME,'INTERNAL')\t'%Y%m%d%H%i%s'\n    GET_FORMAT(TIME,'USA')\t'%h:%i:%s %p'\n    GET_FORMAT(TIME,'JIS')\t'%H:%i:%s'\n    GET_FORMAT(TIME,'ISO')\t'%H:%i:%s'\n    GET_FORMAT(TIME,'EUR')\t'%H.%i.%s'\n    GET_FORMAT(TIME,'INTERNAL')\t'%H%i%s'\n*/</span></code></pre>\n\n<h3 id=\"流程控制函数\"><a href=\"#流程控制函数\" class=\"headerlink\" title=\"流程控制函数\"></a>流程控制函数</h3><pre class=\"language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token comment\">/*\n\tIF(value, value1, value2):如果value的值为TRUE，返回value1，否则返回value2\n\tIFNULL(value1, value2):如果value1不为NULL，返回value1，否则返回value2\n\tCASE WHEN 条件1 THEN 结果1 WHEN 条件2 THEN 结果2 ... ELSE END  相当于if else\n\tCASE expr WHEN 常量值1 THEN 值1 WHEN 常量值2 THEN 值2 ... END  相当于switch case\n*/</span></code></pre>\n\n<h3 id=\"加密与解密函数\"><a href=\"#加密与解密函数\" class=\"headerlink\" title=\"加密与解密函数\"></a>加密与解密函数</h3><pre class=\"language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token comment\">/*\n\tPASSWORD(str):返回字符串str的加密版本，41位长的字符串。加密结果不可逆，常用于用户的密码加密（MySQL8.0中无法使用）\n\tMD5(str):返回字符串str的md5加密后的值，也是一种加密方式。若参数为NULL，则会返回NULL\n\tSHA(str):从原明文密码str计算并返回加密后的密码字符串，当参数为NULL时，返回NULL。SHA比MD5更安全。\n\tENCODE(value, password_seed):返回使用password_seed作为加密密码加密value\n\tDECODE(value, password_seed):返回使用password_seed作为加密密码解密value\n*/</span></code></pre>\n\n<h3 id=\"其他函数\"><a href=\"#其他函数\" class=\"headerlink\" title=\"其他函数\"></a>其他函数</h3><pre class=\"language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token comment\">/*\n\tFORMAT(\tvalue, n):返回对数字value进行格式化后的结果数据。n表示四舍五入后保留小数点后n位\n\tCONV(value, from, to):将value的值进行不同进制之间的转换\n\tINET_ATON(ipvalue):将以点分隔的ip地址转化为一个数字\n\tINET_NTOA(value):将数字形式的ip地址转化为以点分隔的ip地址\n\tBENCHMARK(n, expr):将表达式expr重复执行n次，用于测试MySQL处理expr表达式所需要的时间\n\tCONVERT(value USING char_code):将value所使用的字符编码修改为char_code\n*/</span></code></pre>\n\n<h2 id=\"多行函数\"><a href=\"#多行函数\" class=\"headerlink\" title=\"多行函数\"></a>多行函数</h2><h3 id=\"多行函数的特征\"><a href=\"#多行函数的特征\" class=\"headerlink\" title=\"多行函数的特征\"></a>多行函数的特征</h3><ul>\n<li>对一组数据进行汇总</li>\n<li>输入是一组数据的集合</li>\n<li>输出是单个值</li>\n<li>**不能嵌套使用！ **</li>\n</ul>\n<h3 id=\"常用聚合函数\"><a href=\"#常用聚合函数\" class=\"headerlink\" title=\"常用聚合函数\"></a>常用聚合函数</h3><pre class=\"language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token comment\">/*\n\tAVG(column):平均值，只适用于数值类型\n\tSUM(column):求和，只适用于数值类型\n\tMAX(column):最大值,可用于数值、字符串、日期类型\n\tMIN(column):最小值,可用于数值、字符串、日期类型\n\tCOUNT(column):出现次数，统计次数时不统计空值\n*/</span></code></pre>\n\n<h3 id=\"GROUP-BY\"><a href=\"#GROUP-BY\" class=\"headerlink\" title=\"GROUP BY\"></a>GROUP BY</h3><p>按照某些字段进行分组，值相同的数据会被分成一组</p>\n<pre class=\"language-sql\" data-language=\"sql\"><code class=\"language-sql\"> <span class=\"token comment\"># 未指定分组，默认所有人一组，计算平均值</span>\n <span class=\"token keyword\">SELECT</span> <span class=\"token function\">AVG</span><span class=\"token punctuation\">(</span>salary<span class=\"token punctuation\">)</span>\n <span class=\"token keyword\">FROM</span> employees<span class=\"token punctuation\">;</span>\n\n<span class=\"token operator\">+</span><span class=\"token comment\">-------------+</span>\n<span class=\"token operator\">|</span> <span class=\"token function\">AVG</span><span class=\"token punctuation\">(</span>salary<span class=\"token punctuation\">)</span> <span class=\"token operator\">|</span>\n<span class=\"token operator\">+</span><span class=\"token comment\">-------------+</span>\n<span class=\"token operator\">|</span> <span class=\"token number\">6461.682243</span> <span class=\"token operator\">|</span>\n<span class=\"token operator\">+</span><span class=\"token comment\">-------------+</span>\n\n<span class=\"token comment\"># 按照department_id分组，department_id相同的人分为一组，计算每个组的平均值</span>\n<span class=\"token comment\"># GROUP BY声明在FROM后面、WHERE后面、ORDER BY前面、LIMIT前面</span>\n<span class=\"token keyword\">SELECT</span> <span class=\"token function\">AVG</span><span class=\"token punctuation\">(</span>salary<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">FROM</span> employees\n<span class=\"token keyword\">GROUP</span> <span class=\"token keyword\">BY</span> department_id<span class=\"token punctuation\">;</span>\n\n<span class=\"token operator\">+</span><span class=\"token comment\">--------------+</span>\n<span class=\"token operator\">|</span> <span class=\"token function\">AVG</span><span class=\"token punctuation\">(</span>salary<span class=\"token punctuation\">)</span>  <span class=\"token operator\">|</span>\n<span class=\"token operator\">+</span><span class=\"token comment\">--------------+</span>\n<span class=\"token operator\">|</span>  <span class=\"token number\">7000.000000</span> <span class=\"token operator\">|</span>\n<span class=\"token operator\">|</span>  <span class=\"token number\">4400.000000</span> <span class=\"token operator\">|</span>\n<span class=\"token operator\">|</span>  <span class=\"token number\">9500.000000</span> <span class=\"token operator\">|</span>\n<span class=\"token operator\">|</span>  <span class=\"token number\">4150.000000</span> <span class=\"token operator\">|</span>\n<span class=\"token operator\">|</span>  <span class=\"token number\">6500.000000</span> <span class=\"token operator\">|</span>\n<span class=\"token operator\">|</span>  <span class=\"token number\">3475.555556</span> <span class=\"token operator\">|</span>\n<span class=\"token operator\">|</span>  <span class=\"token number\">5760.000000</span> <span class=\"token operator\">|</span>\n<span class=\"token operator\">|</span> <span class=\"token number\">10000.000000</span> <span class=\"token operator\">|</span>\n<span class=\"token operator\">|</span>  <span class=\"token number\">8955.882353</span> <span class=\"token operator\">|</span>\n<span class=\"token operator\">|</span> <span class=\"token number\">19333.333333</span> <span class=\"token operator\">|</span>\n<span class=\"token operator\">|</span>  <span class=\"token number\">8600.000000</span> <span class=\"token operator\">|</span>\n<span class=\"token operator\">|</span> <span class=\"token number\">10150.000000</span> <span class=\"token operator\">|</span>\n<span class=\"token operator\">+</span><span class=\"token comment\">--------------+</span>\n\n<span class=\"token comment\"># 错误写法，GROUP BY分组后，其他字段（下面语句的job_id）结果会出现错误，但不会报错</span>\n<span class=\"token comment\"># 查询的非组函数字段一定要写在GROUP BY中</span>\n<span class=\"token keyword\">SELECT</span> department_id<span class=\"token punctuation\">,</span> job_id<span class=\"token punctuation\">,</span> <span class=\"token function\">AVG</span><span class=\"token punctuation\">(</span>salary<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">FROM</span> employees\n<span class=\"token keyword\">GROUP</span> <span class=\"token keyword\">BY</span> department_id<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\"># MySQL中GROUP BY使用WITH ROLLUP</span>\n<span class=\"token comment\"># WITH ROLLUP会在查询完成后，把所有数据分在一组再进行一次计算</span>\n<span class=\"token comment\"># 不能和ORDER BY同时使用</span>\n<span class=\"token keyword\">SELECT</span> department_id<span class=\"token punctuation\">,</span><span class=\"token function\">AVG</span><span class=\"token punctuation\">(</span>salary<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">FROM</span> employees\n<span class=\"token keyword\">GROUP</span> <span class=\"token keyword\">BY</span> department_id <span class=\"token keyword\">WITH ROLLUP</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token operator\">+</span><span class=\"token comment\">---------------+--------------+</span>\n<span class=\"token operator\">|</span> department_id <span class=\"token operator\">|</span> <span class=\"token function\">AVG</span><span class=\"token punctuation\">(</span>salary<span class=\"token punctuation\">)</span>  <span class=\"token operator\">|</span>\n<span class=\"token operator\">+</span><span class=\"token comment\">---------------+--------------+</span>\n<span class=\"token operator\">|</span>          <span class=\"token boolean\">NULL</span> <span class=\"token operator\">|</span>  <span class=\"token number\">7000.000000</span> <span class=\"token operator\">|</span> <span class=\"token comment\"># 这是一个部门为null的哥们</span>\n<span class=\"token operator\">|</span>            <span class=\"token number\">10</span> <span class=\"token operator\">|</span>  <span class=\"token number\">4400.000000</span> <span class=\"token operator\">|</span>\n<span class=\"token operator\">|</span>            <span class=\"token number\">20</span> <span class=\"token operator\">|</span>  <span class=\"token number\">9500.000000</span> <span class=\"token operator\">|</span>\n<span class=\"token operator\">|</span>            <span class=\"token number\">30</span> <span class=\"token operator\">|</span>  <span class=\"token number\">4150.000000</span> <span class=\"token operator\">|</span>\n<span class=\"token operator\">|</span>            <span class=\"token number\">40</span> <span class=\"token operator\">|</span>  <span class=\"token number\">6500.000000</span> <span class=\"token operator\">|</span>\n<span class=\"token operator\">|</span>            <span class=\"token number\">50</span> <span class=\"token operator\">|</span>  <span class=\"token number\">3475.555556</span> <span class=\"token operator\">|</span>\n<span class=\"token operator\">|</span>            <span class=\"token number\">60</span> <span class=\"token operator\">|</span>  <span class=\"token number\">5760.000000</span> <span class=\"token operator\">|</span>\n<span class=\"token operator\">|</span>            <span class=\"token number\">70</span> <span class=\"token operator\">|</span> <span class=\"token number\">10000.000000</span> <span class=\"token operator\">|</span>\n<span class=\"token operator\">|</span>            <span class=\"token number\">80</span> <span class=\"token operator\">|</span>  <span class=\"token number\">8955.882353</span> <span class=\"token operator\">|</span>\n<span class=\"token operator\">|</span>            <span class=\"token number\">90</span> <span class=\"token operator\">|</span> <span class=\"token number\">19333.333333</span> <span class=\"token operator\">|</span>\n<span class=\"token operator\">|</span>           <span class=\"token number\">100</span> <span class=\"token operator\">|</span>  <span class=\"token number\">8600.000000</span> <span class=\"token operator\">|</span>\n<span class=\"token operator\">|</span>           <span class=\"token number\">110</span> <span class=\"token operator\">|</span> <span class=\"token number\">10150.000000</span> <span class=\"token operator\">|</span>\n<span class=\"token operator\">|</span>          <span class=\"token boolean\">NULL</span> <span class=\"token operator\">|</span>  <span class=\"token number\">6461.682243</span> <span class=\"token operator\">|</span> <span class=\"token comment\"># 这是所有人的平均工资</span>\n<span class=\"token operator\">+</span><span class=\"token comment\">---------------+--------------+</span></code></pre>\n\n<h3 id=\"HAVING\"><a href=\"#HAVING\" class=\"headerlink\" title=\"HAVING\"></a>HAVING</h3><p>HAVING语句是用来过滤数据的，它和WHERE的区别在于：</p>\n<ul>\n<li>一旦过滤条件使用了聚合函数，必须使用HAVING来替换WHERE，否则报错</li>\n<li>当过滤条件中没有聚合函数是，则此过滤条件声明在WHERE和HAVING中均可，但WHERE执行效率更高</li>\n<li>HAVING必须声明在GROUP BY后面，而WHERE必须声明在FROM后面</li>\n</ul>\n<pre class=\"language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token comment\"># 查询各个部门中最高工资比10000高的部门信息</span>\n\n<span class=\"token comment\"># 错误写法</span>\n<span class=\"token keyword\">SELECT</span> department_id<span class=\"token punctuation\">,</span> <span class=\"token function\">MAX</span><span class=\"token punctuation\">(</span>salary<span class=\"token punctuation\">)</span> \n<span class=\"token keyword\">FROM</span> employees \n<span class=\"token keyword\">WHERE</span> <span class=\"token function\">MAX</span><span class=\"token punctuation\">(</span>salary<span class=\"token punctuation\">)</span><span class=\"token operator\">></span><span class=\"token number\">10000</span> \n<span class=\"token keyword\">GROUP</span> <span class=\"token keyword\">BY</span> department_id<span class=\"token punctuation\">;</span>\n\nERROR <span class=\"token number\">1111</span> <span class=\"token punctuation\">(</span>HY000<span class=\"token punctuation\">)</span>: Invalid <span class=\"token keyword\">use</span> <span class=\"token keyword\">of</span> <span class=\"token keyword\">group</span> <span class=\"token keyword\">function</span>\n\n<span class=\"token comment\"># 正确写法：</span>\n<span class=\"token keyword\">SELECT</span> department_id<span class=\"token punctuation\">,</span> <span class=\"token function\">MAX</span><span class=\"token punctuation\">(</span>salary<span class=\"token punctuation\">)</span> \n<span class=\"token keyword\">FROM</span> employees \n<span class=\"token keyword\">GROUP</span> <span class=\"token keyword\">BY</span> department_id \n<span class=\"token keyword\">HAVING</span> <span class=\"token function\">MAX</span><span class=\"token punctuation\">(</span>salary<span class=\"token punctuation\">)</span><span class=\"token operator\">></span><span class=\"token number\">10000</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token operator\">+</span><span class=\"token comment\">---------------+-------------+</span>\n<span class=\"token operator\">|</span> department_id <span class=\"token operator\">|</span> <span class=\"token function\">MAX</span><span class=\"token punctuation\">(</span>salary<span class=\"token punctuation\">)</span> <span class=\"token operator\">|</span>\n<span class=\"token operator\">+</span><span class=\"token comment\">---------------+-------------+</span>\n<span class=\"token operator\">|</span>            <span class=\"token number\">20</span> <span class=\"token operator\">|</span>    <span class=\"token number\">13000.00</span> <span class=\"token operator\">|</span>\n<span class=\"token operator\">|</span>            <span class=\"token number\">30</span> <span class=\"token operator\">|</span>    <span class=\"token number\">11000.00</span> <span class=\"token operator\">|</span>\n<span class=\"token operator\">|</span>            <span class=\"token number\">80</span> <span class=\"token operator\">|</span>    <span class=\"token number\">14000.00</span> <span class=\"token operator\">|</span>\n<span class=\"token operator\">|</span>            <span class=\"token number\">90</span> <span class=\"token operator\">|</span>    <span class=\"token number\">24000.00</span> <span class=\"token operator\">|</span>\n<span class=\"token operator\">|</span>           <span class=\"token number\">100</span> <span class=\"token operator\">|</span>    <span class=\"token number\">12000.00</span> <span class=\"token operator\">|</span>\n<span class=\"token operator\">|</span>           <span class=\"token number\">110</span> <span class=\"token operator\">|</span>    <span class=\"token number\">12000.00</span> <span class=\"token operator\">|</span>\n<span class=\"token operator\">+</span><span class=\"token comment\">---------------+-------------+</span>\n\n<span class=\"token comment\"># 查询部门id为10，20，30，40这四个部门中最高工资比10000高的部门信息</span>\n<span class=\"token comment\"># 方式一：推荐，执行效率高于方式二</span>\n<span class=\"token keyword\">SELECT</span> department_id<span class=\"token punctuation\">,</span> <span class=\"token function\">MAX</span><span class=\"token punctuation\">(</span>salary<span class=\"token punctuation\">)</span> \n<span class=\"token keyword\">FROM</span> employees \n<span class=\"token keyword\">WHERE</span> department_id <span class=\"token operator\">IN</span> <span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span><span class=\"token number\">20</span><span class=\"token punctuation\">,</span><span class=\"token number\">30</span><span class=\"token punctuation\">,</span><span class=\"token number\">40</span><span class=\"token punctuation\">)</span> \n<span class=\"token keyword\">GROUP</span> <span class=\"token keyword\">BY</span> department_id \n<span class=\"token keyword\">HAVING</span> <span class=\"token function\">MAX</span><span class=\"token punctuation\">(</span>salary<span class=\"token punctuation\">)</span><span class=\"token operator\">></span><span class=\"token number\">10000</span><span class=\"token punctuation\">;</span>\n<span class=\"token operator\">+</span><span class=\"token comment\">---------------+-------------+</span>\n<span class=\"token operator\">|</span> department_id <span class=\"token operator\">|</span> <span class=\"token function\">MAX</span><span class=\"token punctuation\">(</span>salary<span class=\"token punctuation\">)</span> <span class=\"token operator\">|</span>\n<span class=\"token operator\">+</span><span class=\"token comment\">---------------+-------------+</span>\n<span class=\"token operator\">|</span>            <span class=\"token number\">20</span> <span class=\"token operator\">|</span>    <span class=\"token number\">13000.00</span> <span class=\"token operator\">|</span>\n<span class=\"token operator\">|</span>            <span class=\"token number\">30</span> <span class=\"token operator\">|</span>    <span class=\"token number\">11000.00</span> <span class=\"token operator\">|</span>\n<span class=\"token operator\">+</span><span class=\"token comment\">---------------+-------------+</span>\n<span class=\"token number\">2</span> <span class=\"token keyword\">rows</span> <span class=\"token operator\">in</span> <span class=\"token keyword\">set</span> <span class=\"token punctuation\">(</span><span class=\"token number\">0.02</span> sec<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 方式二</span>\n <span class=\"token keyword\">SELECT</span> department_id<span class=\"token punctuation\">,</span> <span class=\"token function\">MAX</span><span class=\"token punctuation\">(</span>salary<span class=\"token punctuation\">)</span> \n <span class=\"token keyword\">FROM</span> employees \n <span class=\"token keyword\">GROUP</span> <span class=\"token keyword\">BY</span> department_id \n <span class=\"token keyword\">HAVING</span> <span class=\"token function\">MAX</span><span class=\"token punctuation\">(</span>salary<span class=\"token punctuation\">)</span><span class=\"token operator\">></span><span class=\"token number\">10000</span> <span class=\"token operator\">AND</span> department_id <span class=\"token operator\">IN</span> <span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span><span class=\"token number\">20</span><span class=\"token punctuation\">,</span><span class=\"token number\">30</span><span class=\"token punctuation\">,</span><span class=\"token number\">40</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token operator\">+</span><span class=\"token comment\">---------------+-------------+</span>\n<span class=\"token operator\">|</span> department_id <span class=\"token operator\">|</span> <span class=\"token function\">MAX</span><span class=\"token punctuation\">(</span>salary<span class=\"token punctuation\">)</span> <span class=\"token operator\">|</span>\n<span class=\"token operator\">+</span><span class=\"token comment\">---------------+-------------+</span>\n<span class=\"token operator\">|</span>            <span class=\"token number\">20</span> <span class=\"token operator\">|</span>    <span class=\"token number\">13000.00</span> <span class=\"token operator\">|</span>\n<span class=\"token operator\">|</span>            <span class=\"token number\">30</span> <span class=\"token operator\">|</span>    <span class=\"token number\">11000.00</span> <span class=\"token operator\">|</span>\n<span class=\"token operator\">+</span><span class=\"token comment\">---------------+-------------+</span>\n<span class=\"token number\">2</span> <span class=\"token keyword\">rows</span> <span class=\"token operator\">in</span> <span class=\"token keyword\">set</span> <span class=\"token punctuation\">(</span><span class=\"token number\">0.06</span> sec<span class=\"token punctuation\">)</span></code></pre>\n\n<h2 id=\"SQL底层执行原理\"><a href=\"#SQL底层执行原理\" class=\"headerlink\" title=\"SQL底层执行原理\"></a>SQL底层执行原理</h2><h3 id=\"SELECT语句的完整结构\"><a href=\"#SELECT语句的完整结构\" class=\"headerlink\" title=\"SELECT语句的完整结构\"></a>SELECT语句的完整结构</h3><pre class=\"language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token keyword\">SELECT</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> <span class=\"token punctuation\">,</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> <span class=\"token punctuation\">,</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> \n<span class=\"token keyword\">FROM</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> <span class=\"token punctuation\">,</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> <span class=\"token punctuation\">,</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">LEFT</span> <span class=\"token operator\">/</span> <span class=\"token keyword\">RIGHT</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">JOIN</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> <span class=\"token keyword\">ON</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n<span class=\"token keyword\">JOIN</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> <span class=\"token keyword\">ON</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n<span class=\"token keyword\">WHERE</span> 多表连接条件 <span class=\"token operator\">AND</span> 不包含聚合函数的过滤条件\n<span class=\"token keyword\">GROUP</span> <span class=\"token keyword\">BY</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> <span class=\"token punctuation\">,</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n<span class=\"token keyword\">HAVING</span> 包含聚合函数的过滤条件\n<span class=\"token keyword\">ORDER</span> <span class=\"token keyword\">BY</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> <span class=\"token punctuation\">,</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">DESC</span><span class=\"token operator\">/</span><span class=\"token keyword\">ASC</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">LIMIT</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> <span class=\"token punctuation\">,</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></code></pre>\n\n<h3 id=\"SELECT语句的执行过程\"><a href=\"#SELECT语句的执行过程\" class=\"headerlink\" title=\"SELECT语句的执行过程\"></a>SELECT语句的执行过程</h3><p>FROM … , … , … （多表连接会笛卡尔积） -&gt; ON（根据连接条件进行过滤） -&gt; (LEFT &#x2F; RIGHT  JOIN)  -&gt; WHERE -&gt; GROUP BY -&gt; HAVING  -&gt; SELECT  -&gt;  DISTINCT  -&gt; ORDER BY -&gt; LIMIT</p>\n<h2 id=\"子查询\"><a href=\"#子查询\" class=\"headerlink\" title=\"子查询\"></a>子查询</h2><h3 id=\"子查询的特点\"><a href=\"#子查询的特点\" class=\"headerlink\" title=\"子查询的特点\"></a>子查询的特点</h3><p>子查询指一个查询语句嵌套在另一个查询语句内部的查询</p>\n<ul>\n<li>子查询先于主查询运行</li>\n<li>子查询结果被主查询使用</li>\n<li>子查询要包含在括号内</li>\n<li>子查询放在比较条件的右侧</li>\n<li>单行操作符对应单行子查询，多行操作符对应多行子查询</li>\n<li>SELECT中，除了GROUP BY和LIMIT以外，都可以声明子查询</li>\n</ul>\n<pre class=\"language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token comment\"># 查询谁的工资比Abel高？</span>\n<span class=\"token comment\"># 方式一：</span>\n<span class=\"token keyword\">SELECT</span> salary\n<span class=\"token keyword\">FROM</span> employees\n<span class=\"token keyword\">WHERE</span> last_name <span class=\"token operator\">=</span> <span class=\"token string\">'Abel'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">SELECT</span> last_name<span class=\"token punctuation\">,</span>salary\n<span class=\"token keyword\">FROM</span> employees\n<span class=\"token keyword\">WHERE</span> salary <span class=\"token operator\">></span> <span class=\"token number\">11000</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\"># 方式二：</span>\n<span class=\"token keyword\">SELECT</span> e2<span class=\"token punctuation\">.</span>last_name<span class=\"token punctuation\">,</span> e2<span class=\"token punctuation\">.</span>salary\n<span class=\"token keyword\">FROM</span> employees e1<span class=\"token punctuation\">,</span>employees e2\n<span class=\"token keyword\">WHERE</span> e1<span class=\"token punctuation\">.</span>last_name <span class=\"token operator\">=</span> <span class=\"token string\">'Abel'</span>\n<span class=\"token operator\">AND</span> e2<span class=\"token punctuation\">.</span>salary <span class=\"token operator\">></span> e1<span class=\"token punctuation\">.</span>salary<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\"># 方式三：子查询</span>\n<span class=\"token keyword\">SELECT</span> last_name<span class=\"token punctuation\">,</span> salary\n<span class=\"token keyword\">FROM</span> employees\n<span class=\"token keyword\">WHERE</span> salary <span class=\"token operator\">></span> <span class=\"token punctuation\">(</span>\n    \t\t\t<span class=\"token keyword\">SELECT</span> salary\n    \t\t\t<span class=\"token keyword\">FROM</span> employees\n    \t\t\t<span class=\"token keyword\">WHERE</span> last_name <span class=\"token operator\">=</span> <span class=\"token string\">'Abel'</span>\n\t\t\t\t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n\n\n\n<h3 id=\"子查询的分类\"><a href=\"#子查询的分类\" class=\"headerlink\" title=\"子查询的分类\"></a>子查询的分类</h3><ol>\n<li>从内查询返回的结果的条目数：  单行子查询    多行子查询</li>\n<li>从内查询的执行次数：  相关子查询    不相关子查询</li>\n</ol>\n<h3 id=\"单行子查询\"><a href=\"#单行子查询\" class=\"headerlink\" title=\"单行子查询\"></a>单行子查询</h3><p>子查询返回单行数据，使用单行操作符</p>\n<p>单行操作符： &#x3D;  &gt;  &gt;&#x3D;  &lt;  &lt;&#x3D;  &lt;&gt;</p>\n<pre class=\"language-sql\" data-language=\"sql\"><code class=\"language-sql\">\n<span class=\"token comment\"># 查询工资大于149号员工工资的员工信息</span>\n<span class=\"token keyword\">SELECT</span> salary\n<span class=\"token keyword\">FROM</span> employees\n<span class=\"token keyword\">WHERE</span> salary <span class=\"token operator\">></span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">SELECT</span> salary\n\t\t\t\t<span class=\"token keyword\">FROM</span> employees\n\t\t\t\t<span class=\"token keyword\">WHERE</span> employee_id <span class=\"token operator\">=</span> <span class=\"token number\">149</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t\n<span class=\"token comment\"># 返回job_id与141号员工相同，salary比143号员工多的员工姓名，job_id和工资</span>\n<span class=\"token keyword\">SELECT</span> last_name<span class=\"token punctuation\">,</span> job_id<span class=\"token punctuation\">,</span> salary\n<span class=\"token keyword\">FROM</span> employees\n<span class=\"token keyword\">WHERE</span> job_id <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">SELECT</span> job_id\n                   <span class=\"token keyword\">FROM</span> employees\n                   <span class=\"token keyword\">WHERE</span> employee_id <span class=\"token operator\">=</span> <span class=\"token number\">141</span>\n                   <span class=\"token punctuation\">)</span>\n   <span class=\"token operator\">AND</span> salary <span class=\"token operator\">></span>   <span class=\"token punctuation\">(</span><span class=\"token keyword\">SELECT</span> salary\n                   <span class=\"token keyword\">FROM</span> employees\n                   <span class=\"token keyword\">WHERE</span> employee_id <span class=\"token operator\">=</span> <span class=\"token number\">143</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                   \n  <span class=\"token comment\"># 查询和141号员工的manager_id,department_id相同的其他员工的employee_id,manager_id,department_id</span>\n  <span class=\"token keyword\">SELECT</span> employee_id<span class=\"token punctuation\">,</span>manager_id<span class=\"token punctuation\">,</span>department_id\n  <span class=\"token keyword\">FROM</span> employees\n  <span class=\"token keyword\">WHERE</span> <span class=\"token punctuation\">(</span>manager_id<span class=\"token punctuation\">,</span> department_id<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>\n  \t\t\t\t\t\t\t\t\t\t<span class=\"token keyword\">SELECT</span> manager_id<span class=\"token punctuation\">,</span> department_id\n  \t\t\t\t\t\t\t\t\t\t<span class=\"token keyword\">FROM</span> employees\n  \t\t\t\t\t\t\t\t\t\t<span class=\"token keyword\">WHERE</span> employee_id <span class=\"token operator\">=</span> <span class=\"token number\">141</span>\n  \t\t\t\t\t\t\t\t\t\t<span class=\"token punctuation\">)</span>\n  <span class=\"token operator\">AND</span> employee_id <span class=\"token operator\">&lt;></span> <span class=\"token number\">141</span><span class=\"token punctuation\">;</span>\n</code></pre>\n\n<h3 id=\"多行子查询\"><a href=\"#多行子查询\" class=\"headerlink\" title=\"多行子查询\"></a>多行子查询</h3><p>子查询返回多行，使用多行操作符</p>\n<p>多行操作符： IN\tANY\tALL\tSOME(实际上是ANY的别名，和ANY相同)</p>\n<pre class=\"language-sql\" data-language=\"sql\"><code class=\"language-sql\"> <span class=\"token comment\"># 查询和141号或174号员工的manager_id,department_id相同的其他员工的employee_id,manager_id,department_id</span>\n<span class=\"token keyword\">SELECT</span> employee_id<span class=\"token punctuation\">,</span>manager_id<span class=\"token punctuation\">,</span>department_id\n<span class=\"token keyword\">FROM</span> employees\n<span class=\"token keyword\">WHERE</span> <span class=\"token punctuation\">(</span>manager_id<span class=\"token punctuation\">,</span> department_id<span class=\"token punctuation\">)</span> <span class=\"token operator\">in</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token keyword\">SELECT</span> manager_id<span class=\"token punctuation\">,</span> department_id\n    <span class=\"token keyword\">FROM</span> employees\n    <span class=\"token keyword\">WHERE</span> employee_id <span class=\"token operator\">in</span> <span class=\"token punctuation\">(</span><span class=\"token number\">141</span><span class=\"token punctuation\">,</span><span class=\"token number\">174</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span>\n  <span class=\"token operator\">AND</span> employee_id <span class=\"token operator\">not</span> <span class=\"token operator\">in</span> <span class=\"token punctuation\">(</span><span class=\"token number\">141</span><span class=\"token punctuation\">,</span><span class=\"token number\">174</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\"># 查询其他job_id中比job_id为'IT_PROG'部门任意工资低的员工的员工号</span>\n<span class=\"token keyword\">SELECT</span> employee_id<span class=\"token punctuation\">,</span> last_name<span class=\"token punctuation\">,</span> job_id<span class=\"token punctuation\">,</span>salary\n<span class=\"token keyword\">FROM</span> employees\n<span class=\"token keyword\">WHERE</span> job_id <span class=\"token operator\">&lt;></span> <span class=\"token string\">'IT_PROG'</span>\n<span class=\"token operator\">AND</span> salary <span class=\"token operator\">&lt;</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">SELECT</span> <span class=\"token function\">MAX</span><span class=\"token punctuation\">(</span>salary<span class=\"token punctuation\">)</span>\n                <span class=\"token keyword\">FROM</span> employees\n                <span class=\"token keyword\">WHERE</span> job_id <span class=\"token operator\">=</span> <span class=\"token string\">'IT_PROG'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                \n<span class=\"token keyword\">SELECT</span> employee_id<span class=\"token punctuation\">,</span> last_name<span class=\"token punctuation\">,</span> job_id<span class=\"token punctuation\">,</span>salary\n<span class=\"token keyword\">FROM</span> employees\n<span class=\"token keyword\">WHERE</span> job_id <span class=\"token operator\">&lt;></span> <span class=\"token string\">'IT_PROG'</span>\n<span class=\"token operator\">AND</span> salary <span class=\"token operator\">&lt;</span> <span class=\"token keyword\">ANY</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">SELECT</span> salary\n                <span class=\"token keyword\">FROM</span> employees\n                <span class=\"token keyword\">WHERE</span> job_id <span class=\"token operator\">=</span> <span class=\"token string\">'IT_PROG'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\"># 查询平均工资最低的部门id</span>\n<span class=\"token comment\"># 方法一：</span>\n<span class=\"token keyword\">SELECT</span> department_id<span class=\"token punctuation\">,</span> <span class=\"token function\">AVG</span><span class=\"token punctuation\">(</span>salary<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">FROM</span> employees\n<span class=\"token keyword\">GROUP</span> <span class=\"token keyword\">BY</span> department_id\n<span class=\"token keyword\">HAVING</span> <span class=\"token function\">AVG</span><span class=\"token punctuation\">(</span>salary<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;=</span> <span class=\"token keyword\">ALL</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token keyword\">SELECT</span> <span class=\"token function\">AVG</span><span class=\"token punctuation\">(</span>salary<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">FROM</span> employees\n    <span class=\"token keyword\">GROUP</span> <span class=\"token keyword\">BY</span> department_id\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\"># 方法二：把子查询当成一个表，该临时表必须有一个别名</span>\n\n<span class=\"token keyword\">SELECT</span> department_id\n<span class=\"token keyword\">FROM</span> employees\n<span class=\"token keyword\">GROUP</span> <span class=\"token keyword\">BY</span> department_id\n<span class=\"token keyword\">HAVING</span> <span class=\"token function\">AVG</span><span class=\"token punctuation\">(</span>salary<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>\n                    <span class=\"token keyword\">SELECT</span> <span class=\"token function\">MIN</span><span class=\"token punctuation\">(</span>avg_sal<span class=\"token punctuation\">)</span>\n                \t<span class=\"token keyword\">FROM</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">SELECT</span> <span class=\"token function\">AVG</span><span class=\"token punctuation\">(</span>salary<span class=\"token punctuation\">)</span> avg_sal\n                    \t\t<span class=\"token keyword\">FROM</span> employees\n                    \t\t<span class=\"token keyword\">GROUP</span> <span class=\"token keyword\">BY</span> department_id<span class=\"token punctuation\">)</span> dept\n                \t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n\n<h3 id=\"相关子查询\"><a href=\"#相关子查询\" class=\"headerlink\" title=\"相关子查询\"></a>相关子查询</h3><p>如果子查询的执行依赖于外部查询，通常情况下都是因为子查询中的表用到了外部的表，并进行了条件关联，因此每执行一次外部查询，子查询都要重新计算一次，这样的子查询就称之为关联子查询。</p>\n<pre class=\"language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token comment\"># 查询员工中工资大于本部门平均工资的员工的last_name, salary和其department_id</span>\n<span class=\"token comment\"># 方式一：相关子查询</span>\n<span class=\"token keyword\">SELECT</span> last_name<span class=\"token punctuation\">,</span> salary<span class=\"token punctuation\">,</span> department_id\n<span class=\"token keyword\">FROM</span> employees e1\n<span class=\"token keyword\">WHERE</span> salary <span class=\"token operator\">></span> <span class=\"token punctuation\">(</span>\n\t\t\t\t<span class=\"token keyword\">SELECT</span> <span class=\"token function\">AVG</span><span class=\"token punctuation\">(</span>salary<span class=\"token punctuation\">)</span>\n    \t\t\t<span class=\"token keyword\">FROM</span> employees e2\n    \t\t\t<span class=\"token keyword\">WHERE</span> department_id <span class=\"token operator\">=</span> e1<span class=\"token punctuation\">.</span>department_id\n\t\t\t\t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\"># 方式二：在FROM中声明子查询</span>\n<span class=\"token keyword\">SELECT</span> e<span class=\"token punctuation\">.</span>last_name<span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">.</span>salary<span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">.</span>department_id\n<span class=\"token keyword\">FROM</span> employees e<span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span>\n    <span class=\"token keyword\">SELECT</span> department_id<span class=\"token punctuation\">,</span><span class=\"token function\">AVG</span><span class=\"token punctuation\">(</span>salary<span class=\"token punctuation\">)</span> avg_sal\n\t<span class=\"token keyword\">FROM</span> employees\n\t<span class=\"token keyword\">GROUP</span> <span class=\"token keyword\">BY</span> department_id\n<span class=\"token punctuation\">)</span> t_dept_avg_sal\n<span class=\"token keyword\">WHERE</span> e<span class=\"token punctuation\">.</span>department_id <span class=\"token operator\">=</span> t_dept_avg_sal<span class=\"token punctuation\">.</span>department_id\n<span class=\"token operator\">AND</span> e<span class=\"token punctuation\">.</span>salary <span class=\"token operator\">></span> t_dept_avg_sal<span class=\"token punctuation\">.</span>avg_sal\n\n<span class=\"token comment\"># 查询员工的id, salary, 按照department_name排序</span>\n<span class=\"token keyword\">SELECT</span> e<span class=\"token punctuation\">.</span>employee_id<span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">.</span>salary\n<span class=\"token keyword\">FROM</span> employees e \n<span class=\"token keyword\">ORDER</span> <span class=\"token keyword\">BY</span> <span class=\"token punctuation\">(</span>\n\t<span class=\"token keyword\">SELECT</span> department_name\n    <span class=\"token keyword\">FROM</span> departments d\n    <span class=\"token keyword\">WHERE</span> e<span class=\"token punctuation\">.</span>department_id <span class=\"token operator\">=</span> d<span class=\"token punctuation\">.</span>department_id\n<span class=\"token punctuation\">)</span>\n</code></pre>\n\n<h3 id=\"EXISTS-和-NOT-EXISTS\"><a href=\"#EXISTS-和-NOT-EXISTS\" class=\"headerlink\" title=\"EXISTS 和 NOT EXISTS\"></a>EXISTS 和 NOT EXISTS</h3><p>关联子查询通常也会和EXISTS操作符一起来使用，用来检查在子查询中是否存在满足条件的行。·</p>\n<p>如果在子查询中不存在满足条件的行:</p>\n<ul>\n<li>条件返回FALSE</li>\n<li>继续在子查询中查找</li>\n</ul>\n<p>如果在子查询中存在满足条件的行:</p>\n<ul>\n<li>不在子查询中继续查找</li>\n<li>条件返回TRUE</li>\n</ul>\n<p>NOT EXISTS关键字表示如果不存在某种条件，则返回TRUE，否则返回FALSE。</p>\n<pre class=\"language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token comment\"># 查询公司管理者的employee_id, last_name, job_id, department_id</span>\n<span class=\"token comment\"># 方式一</span>\n<span class=\"token keyword\">SELECT</span> <span class=\"token keyword\">DISTINCT</span>  m<span class=\"token punctuation\">.</span>employee_id<span class=\"token punctuation\">,</span> m<span class=\"token punctuation\">.</span>last_name<span class=\"token punctuation\">,</span> m<span class=\"token punctuation\">.</span>job_id<span class=\"token punctuation\">,</span> m<span class=\"token punctuation\">.</span>department_id<span class=\"token punctuation\">,</span> m<span class=\"token punctuation\">.</span>manager_id\n<span class=\"token keyword\">FROM</span> employees e <span class=\"token keyword\">JOIN</span> employees m\n<span class=\"token keyword\">ON</span> e<span class=\"token punctuation\">.</span>manager_id <span class=\"token operator\">=</span> m<span class=\"token punctuation\">.</span>employee_id\n\n<span class=\"token comment\"># 方式二</span>\n<span class=\"token keyword\">SELECT</span> employee_id<span class=\"token punctuation\">,</span> last_name<span class=\"token punctuation\">,</span> job_id<span class=\"token punctuation\">,</span> department_id\n<span class=\"token keyword\">FROM</span> employees\n<span class=\"token keyword\">WHERE</span> employee_id <span class=\"token operator\">IN</span> <span class=\"token punctuation\">(</span>\n\t<span class=\"token keyword\">SELECT</span> <span class=\"token keyword\">DISTINCT</span> manager_id\n    <span class=\"token keyword\">FROM</span> employees\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\"># 方式三 使用EXISTS</span>\n<span class=\"token keyword\">SELECT</span> e1<span class=\"token punctuation\">.</span>employee_id<span class=\"token punctuation\">,</span> e1<span class=\"token punctuation\">.</span>last_name<span class=\"token punctuation\">,</span> e1<span class=\"token punctuation\">.</span>job_id<span class=\"token punctuation\">,</span> e1<span class=\"token punctuation\">.</span>department_id\n<span class=\"token keyword\">FROM</span> employees e1\n<span class=\"token keyword\">WHERE</span> <span class=\"token keyword\">EXISTS</span> <span class=\"token punctuation\">(</span>\n\t<span class=\"token keyword\">SELECT</span> <span class=\"token operator\">*</span>\n    <span class=\"token keyword\">FROM</span> employees e2\n    <span class=\"token keyword\">WHERE</span> e1<span class=\"token punctuation\">.</span>employee_id <span class=\"token operator\">=</span> e2<span class=\"token punctuation\">.</span>manager_id\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n\n<h2 id=\"增删改\"><a href=\"#增删改\" class=\"headerlink\" title=\"增删改\"></a>增删改</h2><h3 id=\"插入数据\"><a href=\"#插入数据\" class=\"headerlink\" title=\"插入数据\"></a>插入数据</h3><ul>\n<li><p>预处理</p>\n<pre class=\"language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">TABLE</span> <span class=\"token keyword\">IF</span> <span class=\"token operator\">NOT</span> <span class=\"token keyword\">EXISTS</span> emp1<span class=\"token punctuation\">(</span>\n\tid <span class=\"token keyword\">INT</span><span class=\"token punctuation\">,</span>\n    <span class=\"token identifier\"><span class=\"token punctuation\">`</span>name<span class=\"token punctuation\">`</span></span> <span class=\"token keyword\">VARCHAR</span><span class=\"token punctuation\">(</span><span class=\"token number\">15</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    hire_date <span class=\"token keyword\">DATE</span><span class=\"token punctuation\">,</span>\n    salary <span class=\"token keyword\">DOUBLE</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n\n\n</li>\n<li><p>方式一：一条一条添加数据</p>\n<pre class=\"language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token comment\"># 不指定添加的字段，要严格按照表的字段来匹配</span>\n<span class=\"token keyword\">INSERT</span> <span class=\"token keyword\">INTO</span> emp1\n<span class=\"token keyword\">VALUES</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token string\">'Tom'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'2000-12-21'</span><span class=\"token punctuation\">,</span><span class=\"token number\">3400</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\"># 按照顺序匹配id , name, hire_date, salary</span>\n\n<span class=\"token comment\"># 指定添加的字段</span>\n<span class=\"token comment\"># 指定表的全部字段，按照自己指定的顺序匹配</span>\n<span class=\"token keyword\">INSERT</span> <span class=\"token keyword\">INTO</span> emp1<span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">,</span> hire_date<span class=\"token punctuation\">,</span> salary<span class=\"token punctuation\">,</span> <span class=\"token identifier\"><span class=\"token punctuation\">`</span>name<span class=\"token punctuation\">`</span></span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">VALUES</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token string\">'1999-09-09'</span><span class=\"token punctuation\">,</span><span class=\"token number\">4000</span><span class=\"token punctuation\">,</span><span class=\"token string\">'Jerry'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\"># 指定表的部分字段，没有知名的字段默认为NULL值</span>\n<span class=\"token keyword\">INSERT</span> <span class=\"token keyword\">INTO</span> emp1<span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">,</span> salary<span class=\"token punctuation\">,</span> <span class=\"token identifier\"><span class=\"token punctuation\">`</span>name<span class=\"token punctuation\">`</span></span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">VALUES</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3500</span> <span class=\"token punctuation\">,</span> <span class=\"token string\">'David'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\"># 插入多条记录</span>\n<span class=\"token keyword\">INSERT</span> <span class=\"token keyword\">INTO</span> emp1<span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">,</span> salary<span class=\"token punctuation\">,</span> <span class=\"token identifier\"><span class=\"token punctuation\">`</span>name<span class=\"token punctuation\">`</span></span><span class=\"token punctuation\">)</span> \n<span class=\"token keyword\">VALUES</span>\n<span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5000</span><span class=\"token punctuation\">,</span><span class=\"token string\">'Jim'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">6000</span><span class=\"token punctuation\">,</span><span class=\"token string\">'Jelinal'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n</li>\n<li><p>方式二：将查询结果插入到表中</p>\n<pre class=\"language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token keyword\">INSERT</span> <span class=\"token keyword\">INTO</span> emp1<span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">,</span> <span class=\"token identifier\"><span class=\"token punctuation\">`</span>name<span class=\"token punctuation\">`</span></span><span class=\"token punctuation\">,</span> salary<span class=\"token punctuation\">,</span> hire_date<span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># 查询语句， 查询的字段要和要插入的表字段一一对应</span>\n<span class=\"token comment\"># 从查询结果插入时，要注意两个表的字段长度，查询的表的字段长度不能高于要插入的表的字段长度，如果一定要插入，需要先修改一下表</span>\n<span class=\"token keyword\">SELECT</span> employee_id<span class=\"token punctuation\">,</span> last_name<span class=\"token punctuation\">,</span> salary<span class=\"token punctuation\">,</span> hire_date\n<span class=\"token keyword\">FROM</span> employees\n<span class=\"token keyword\">WHERE</span> department_id <span class=\"token operator\">IN</span> <span class=\"token punctuation\">(</span><span class=\"token number\">50</span><span class=\"token punctuation\">,</span><span class=\"token number\">60</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></li>\n</ul>\n<h3 id=\"更新数据\"><a href=\"#更新数据\" class=\"headerlink\" title=\"更新数据\"></a>更新数据</h3><pre class=\"language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token comment\"># UPDATE ... SET ... WHERE ...</span>\n<span class=\"token keyword\">UPDATE</span> emp1\n<span class=\"token keyword\">SET</span> hire_date <span class=\"token operator\">=</span> CURDATE<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">WHERE</span> id <span class=\"token operator\">=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span><span class=\"token comment\"># WHERE一般情况下必须要加，如果不加，会改整张表的所有记录</span>\n\n<span class=\"token comment\"># 修改数据时存在不成功的情况，可能是由于约束的影响</span></code></pre>\n\n<h3 id=\"删除数据\"><a href=\"#删除数据\" class=\"headerlink\" title=\"删除数据\"></a>删除数据</h3><pre class=\"language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token comment\"># DELETE FROM ... WHERE ...</span>\n<span class=\"token comment\"># 删除数据时也存在不成功的情况，可能是由于约束的影响</span>\n<span class=\"token keyword\">DELETE</span> <span class=\"token keyword\">FROM</span> emp1\n<span class=\"token keyword\">WHERE</span> id <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></code></pre>\n\n\n\n<h2 id=\"创建和管理数据库和表\"><a href=\"#创建和管理数据库和表\" class=\"headerlink\" title=\"创建和管理数据库和表\"></a>创建和管理数据库和表</h2><h3 id=\"标识符命名规则\"><a href=\"#标识符命名规则\" class=\"headerlink\" title=\"标识符命名规则\"></a>标识符命名规则</h3><ul>\n<li>数据库名、表名不得超过30个字符，变量名限制为29个。必须只能包含A-Z,a-z,0-9，共63个字符</li>\n<li>数据库名、表名、字段名等对象名中间不要包含空格</li>\n<li>同一个MySQL软件中，数据库不能同名；同一个库中，表不能重名；同一个表中，字段不能重名</li>\n<li>必须保证你的字段没有和保留字、数据库系统或常用方法冲突。如果坚持使用，请在SQL语句中使用&#96;(着重号)引起来</li>\n<li>保持字段名和类型的一致性：在命名字段并为其指定数据类型的时候一定要保证一致性，假如数据类型在一个表里是整数，那在另一个表里可就别变成字符型了</li>\n</ul>\n<h3 id=\"创建数据库\"><a href=\"#创建数据库\" class=\"headerlink\" title=\"创建数据库\"></a>创建数据库</h3><ul>\n<li><p>方式一：创建数据库</p>\n<pre class=\"language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">DATABASE</span> mytest1<span class=\"token punctuation\">;</span></code></pre>\n</li>\n<li><p>方式二：指定字符集</p>\n<pre class=\"language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">DATABASE</span> mytest1 <span class=\"token keyword\">CHARACTER</span> <span class=\"token keyword\">SET</span> <span class=\"token string\">'utf8mb4'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\"># 查看数据库的创建信息</span>\n<span class=\"token keyword\">SHOW</span> <span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">DATABASE</span> mytest1<span class=\"token punctuation\">;</span></code></pre>\n</li>\n<li><p>方式三：创建之前判断是否存在，如果要创建的数据库已经存在，创建不成功，不会报错：</p>\n<pre class=\"language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">DATABASE</span> <span class=\"token keyword\">IF</span> <span class=\"token operator\">NOT</span> <span class=\"token keyword\">EXISTS</span> mytest1<span class=\"token punctuation\">;</span></code></pre></li>\n</ul>\n<h3 id=\"管理数据库\"><a href=\"#管理数据库\" class=\"headerlink\" title=\"管理数据库\"></a>管理数据库</h3><ul>\n<li><p>查看当前连接中的数据库有哪些</p>\n<pre class=\"language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token keyword\">SHOW</span> <span class=\"token keyword\">DATABASES</span><span class=\"token punctuation\">;</span></code></pre>\n</li>\n<li><p>切换数据库</p>\n<pre class=\"language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token keyword\">USE</span> mytest2<span class=\"token punctuation\">;</span></code></pre>\n</li>\n<li><p>查看当前数据库中保存的数据表</p>\n<pre class=\"language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token keyword\">SHOW</span> <span class=\"token keyword\">TABLES</span><span class=\"token punctuation\">;</span></code></pre>\n</li>\n<li><p>查看当前使用的数据库</p>\n<pre class=\"language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token keyword\">SELECT</span> <span class=\"token keyword\">DATABASE</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">FROM</span> DUAL<span class=\"token punctuation\">;</span></code></pre>\n</li>\n<li><p>查看指定数据库下保存的数据表</p>\n<pre class=\"language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token keyword\">SHOW</span> <span class=\"token keyword\">TABLES</span> <span class=\"token keyword\">FROM</span> 数据库名<span class=\"token punctuation\">;</span></code></pre></li>\n</ul>\n<h3 id=\"修改数据库\"><a href=\"#修改数据库\" class=\"headerlink\" title=\"修改数据库\"></a>修改数据库</h3><ul>\n<li><p>更改数据库字符集</p>\n<pre class=\"language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token keyword\">ALTER</span> <span class=\"token keyword\">DATABASE</span> mytest1 <span class=\"token keyword\">CHARACTER</span> <span class=\"token keyword\">SET</span> <span class=\"token string\">'utf8'</span><span class=\"token punctuation\">;</span></code></pre></li>\n</ul>\n<h3 id=\"删除数据库\"><a href=\"#删除数据库\" class=\"headerlink\" title=\"删除数据库\"></a>删除数据库</h3><ul>\n<li><p>方式一：</p>\n<pre class=\"language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token keyword\">DROP</span> <span class=\"token keyword\">DATABASE</span> mytest1<span class=\"token punctuation\">;</span></code></pre>\n</li>\n<li><p>方式二：</p>\n<pre class=\"language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token keyword\">DROP</span> <span class=\"token keyword\">DATABASE</span> <span class=\"token keyword\">IF</span> <span class=\"token keyword\">EXISTS</span> mytest1<span class=\"token punctuation\">;</span></code></pre></li>\n</ul>\n<h3 id=\"创建数据表\"><a href=\"#创建数据表\" class=\"headerlink\" title=\"创建数据表\"></a>创建数据表</h3><ul>\n<li><p>方式一：</p>\n<pre class=\"language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token keyword\">USE</span> mytest1<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">TABLE</span> <span class=\"token keyword\">IF</span> <span class=\"token operator\">NOT</span> <span class=\"token keyword\">EXISTS</span> myemp1<span class=\"token punctuation\">(</span> <span class=\"token comment\"># 需要用户具有创建表的权限</span>\n\tid <span class=\"token keyword\">INT</span><span class=\"token punctuation\">,</span>\n    emp_name <span class=\"token keyword\">VARCHAR</span><span class=\"token punctuation\">(</span><span class=\"token number\">15</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token comment\"># 使用VARCHAR字符串必须指定长度</span>\n    hire_date <span class=\"token keyword\">DATE</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n\n<span class=\"token comment\"># 查看表的创建信息</span>\n<span class=\"token keyword\">SHOW</span> <span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">TABLE</span> myemp1<span class=\"token punctuation\">;</span><span class=\"token comment\"># 如果创建表时没有指定字符集，默认使用表所在的数据库的字符集</span></code></pre>\n</li>\n<li><p>方式二：基于现有的表，同时导入数据</p>\n<pre class=\"language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">TABLE</span> myemp2\n<span class=\"token keyword\">AS</span>\n<span class=\"token keyword\">SELECT</span> employee_id<span class=\"token punctuation\">,</span> last_name <span class=\"token punctuation\">,</span>salary\n<span class=\"token keyword\">FROM</span> employees<span class=\"token punctuation\">;</span></code></pre>\n</li>\n<li><p>MySQL8新特性：计算列</p>\n<pre class=\"language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token comment\"># 计算列，是某一列的值是通过其他列计算得来的，其他列变化时计算列会随之更新。</span>\n<span class=\"token comment\"># 创建表时声明计算列：</span>\n<span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">TABLE</span> tb1<span class=\"token punctuation\">(</span>\n    id <span class=\"token keyword\">INT</span><span class=\"token punctuation\">,</span>\n\ta <span class=\"token keyword\">INT</span><span class=\"token punctuation\">,</span>\n    b <span class=\"token keyword\">INT</span><span class=\"token punctuation\">,</span>\n    c <span class=\"token keyword\">INT</span> GENERATED ALWAYS <span class=\"token keyword\">AS</span> <span class=\"token punctuation\">(</span>a <span class=\"token operator\">+</span> b<span class=\"token punctuation\">)</span> VIRTUAL <span class=\"token comment\"># c就是计算列，它的值总等于a+b</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\"># 向表中插入值</span>\n<span class=\"token keyword\">INSERT</span> <span class=\"token keyword\">INTO</span> tb1<span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">,</span>a<span class=\"token punctuation\">,</span>b<span class=\"token punctuation\">)</span> <span class=\"token comment\"># 这里只插入了a=11和b=22</span>\n<span class=\"token keyword\">VALUES</span>\n<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">11</span><span class=\"token punctuation\">,</span><span class=\"token number\">22</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\"># 查询</span>\n<span class=\"token keyword\">SELECT</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">FROM</span> tb1<span class=\"token punctuation\">;</span>\n<span class=\"token comment\"># c已经被同步成了11+22=33</span>\n<span class=\"token operator\">+</span><span class=\"token comment\">------+------+------+------+</span>\n<span class=\"token operator\">|</span> id   <span class=\"token operator\">|</span> a    <span class=\"token operator\">|</span> b    <span class=\"token operator\">|</span> c    <span class=\"token operator\">|</span>\n<span class=\"token operator\">+</span><span class=\"token comment\">------+------+------+------+</span>\n<span class=\"token operator\">|</span>    <span class=\"token number\">1</span> <span class=\"token operator\">|</span>   <span class=\"token number\">11</span> <span class=\"token operator\">|</span>   <span class=\"token number\">22</span> <span class=\"token operator\">|</span>   <span class=\"token number\">33</span> <span class=\"token operator\">|</span>\n<span class=\"token operator\">+</span><span class=\"token comment\">------+------+------+------+</span>\n<span class=\"token number\">1</span> <span class=\"token keyword\">row</span> <span class=\"token operator\">in</span> <span class=\"token keyword\">set</span> <span class=\"token punctuation\">(</span><span class=\"token number\">0.02</span> sec<span class=\"token punctuation\">)</span></code></pre></li>\n</ul>\n<h3 id=\"查看表结构\"><a href=\"#查看表结构\" class=\"headerlink\" title=\"查看表结构\"></a>查看表结构</h3><pre class=\"language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token keyword\">DESC</span> myemp1<span class=\"token punctuation\">;</span></code></pre>\n\n<h3 id=\"修改表\"><a href=\"#修改表\" class=\"headerlink\" title=\"修改表\"></a>修改表</h3><ul>\n<li><p>添加字段</p>\n<pre class=\"language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token keyword\">ALTER</span> <span class=\"token keyword\">TABLE</span> myemp1\n<span class=\"token keyword\">ADD</span> salary <span class=\"token keyword\">DOUBLE</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 一共十位数字，小数点后两位，默认添加到表的最后面</span>\n\n<span class=\"token keyword\">ALTER</span> <span class=\"token keyword\">TABLE</span> myemp1\n<span class=\"token keyword\">ADD</span> phone_number <span class=\"token keyword\">VARCHAR</span><span class=\"token punctuation\">(</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">FIRST</span><span class=\"token punctuation\">;</span> <span class=\"token comment\"># 把phone_number添加到第一个字段的位置</span>\n\n<span class=\"token keyword\">ALTER</span> <span class=\"token keyword\">TABLE</span> myemp1\n<span class=\"token keyword\">ADD</span> email <span class=\"token keyword\">VARCHAR</span><span class=\"token punctuation\">(</span><span class=\"token number\">45</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">AFTER</span> emp_name<span class=\"token punctuation\">;</span> <span class=\"token comment\"># 把email放到emp_name后面</span></code></pre>\n\n\n</li>\n<li><p>修改字段</p>\n<pre class=\"language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token keyword\">ALTER</span> <span class=\"token keyword\">TABLE</span> myemp1\n<span class=\"token keyword\">MODIFY</span> emp_name <span class=\"token keyword\">VARCHAR</span><span class=\"token punctuation\">(</span><span class=\"token number\">35</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">DEFAULT</span> <span class=\"token string\">'AAA'</span><span class=\"token punctuation\">;</span></code></pre>\n\n\n</li>\n<li><p>重命名一个字段</p>\n<pre class=\"language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token keyword\">ALTER</span> <span class=\"token keyword\">TABLE</span> myemp1\nCHANGE salary monthly_salary <span class=\"token keyword\">DOUBLE</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">ALTER</span> <span class=\"token keyword\">TABLE</span> myemp1\nCHANGE email my_email <span class=\"token keyword\">VARCHAR</span><span class=\"token punctuation\">(</span><span class=\"token number\">50</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n\n\n</li>\n<li><p>删除一个字段</p>\n<pre class=\"language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token keyword\">ALTER</span> <span class=\"token keyword\">TABLE</span> myemp1\n<span class=\"token keyword\">DROP</span> <span class=\"token keyword\">COLUMN</span> my_email<span class=\"token punctuation\">;</span></code></pre></li>\n</ul>\n<h3 id=\"重命名表\"><a href=\"#重命名表\" class=\"headerlink\" title=\"重命名表\"></a>重命名表</h3><ul>\n<li><p>方式一：</p>\n<pre class=\"language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token keyword\">RENAME</span> <span class=\"token keyword\">TABLE</span> emp1\n<span class=\"token keyword\">TO</span> myemp11<span class=\"token punctuation\">;</span></code></pre>\n</li>\n<li><p>方式二：</p>\n<pre class=\"language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token keyword\">ALTER</span> <span class=\"token keyword\">TABLE</span> myemp2\n<span class=\"token keyword\">RENAME</span> <span class=\"token keyword\">TO</span> myemp12<span class=\"token punctuation\">;</span></code></pre></li>\n</ul>\n<h3 id=\"删除表\"><a href=\"#删除表\" class=\"headerlink\" title=\"删除表\"></a>删除表</h3><pre class=\"language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token keyword\">DROP</span> <span class=\"token keyword\">TABLE</span> <span class=\"token keyword\">IF</span> <span class=\"token keyword\">EXISTS</span> 表名<span class=\"token punctuation\">;</span></code></pre>\n\n<h3 id=\"清空表\"><a href=\"#清空表\" class=\"headerlink\" title=\"清空表\"></a>清空表</h3><pre class=\"language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token comment\"># 清空表中的数据，但是结构还在</span>\n<span class=\"token keyword\">TRUNCATE</span> <span class=\"token keyword\">TABLE</span> 表名<span class=\"token punctuation\">;</span></code></pre>\n\n<h3 id=\"COMMIT-和-ROLLBACK\"><a href=\"#COMMIT-和-ROLLBACK\" class=\"headerlink\" title=\"COMMIT 和 ROLLBACK\"></a>COMMIT 和 ROLLBACK</h3><ul>\n<li>COMMIT: 提交数据， 一旦执行，数据就被永久保存到了数据库中，不可以回滚。</li>\n<li>ROLLBACK：回滚数据，一旦执行，可以实现数据的回滚。回滚到最近的一次COMMIT之后。</li>\n</ul>\n<h3 id=\"对比TRUNCATE-和-DELETE\"><a href=\"#对比TRUNCATE-和-DELETE\" class=\"headerlink\" title=\"对比TRUNCATE 和 DELETE\"></a>对比TRUNCATE 和 DELETE</h3><ul>\n<li>相同点：都可以实现对表中所有数据的删除，同时保留表结构</li>\n<li>不同点：一旦执行TRUNCATE，表数据全部清除，不可以回滚；DELETE 可以全部清除（不带WHERE），数据可以实现回滚</li>\n</ul>\n<h3 id=\"DDL和DML的说明\"><a href=\"#DDL和DML的说明\" class=\"headerlink\" title=\"DDL和DML的说明\"></a>DDL和DML的说明</h3><ol>\n<li>DDL的操作一旦执行，就不可以回滚，<code>SET autocommit = FALSE</code>对DDL无效，因为在执行完DDL之后，一定会执行一次COMMIT。MySQL8.0以后，DDL的操作引入了原子性，要么都执行，要么都不执行、</li>\n<li>DML操作默认情况也是不可以回滚的，但是如果在执行DML之前，执行了<code>SET autocommit = FALSE</code>，则执行的DML操作就可以回滚。</li>\n</ol>\n<p>演示：</p>\n<pre class=\"language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token comment\"># 创建一个备份表，在备份表里面操作</span>\n<span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">TABLE</span> employee_copy\n<span class=\"token keyword\">AS</span>\n<span class=\"token keyword\">SELECT</span> <span class=\"token operator\">*</span>\n<span class=\"token keyword\">FROM</span> employees<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\"># 看一下备份表里面的数据</span>\n<span class=\"token keyword\">SELECT</span> employee_id<span class=\"token punctuation\">,</span>last_name<span class=\"token punctuation\">,</span> salary\n<span class=\"token keyword\">FROM</span> employee_copy<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\"># 和employee表一样，共107条数据</span>\n<span class=\"token operator\">+</span><span class=\"token comment\">-------------+-------------+----------+</span>\n<span class=\"token operator\">|</span> employee_id <span class=\"token operator\">|</span> last_name   <span class=\"token operator\">|</span> salary   <span class=\"token operator\">|</span>\n<span class=\"token operator\">+</span><span class=\"token comment\">-------------+-------------+----------+</span>\n<span class=\"token operator\">|</span>         <span class=\"token number\">100</span> <span class=\"token operator\">|</span> King        <span class=\"token operator\">|</span> <span class=\"token number\">24000.00</span> <span class=\"token operator\">|</span>\n<span class=\"token operator\">|</span>         <span class=\"token number\">101</span> <span class=\"token operator\">|</span> Kochhar     <span class=\"token operator\">|</span> <span class=\"token number\">17000.00</span> <span class=\"token operator\">|</span>\n<span class=\"token operator\">|</span>         <span class=\"token number\">102</span> <span class=\"token operator\">|</span> De Haan     <span class=\"token operator\">|</span> <span class=\"token number\">17000.00</span> <span class=\"token operator\">|</span>\n<span class=\"token operator\">|</span>         <span class=\"token number\">103</span> <span class=\"token operator\">|</span> Hunold      <span class=\"token operator\">|</span>  <span class=\"token number\">9000.00</span> <span class=\"token operator\">|</span>\n<span class=\"token operator\">|</span>         <span class=\"token number\">104</span> <span class=\"token operator\">|</span> Ernst       <span class=\"token operator\">|</span>  <span class=\"token number\">6000.00</span> <span class=\"token operator\">|</span>\n<span class=\"token operator\">|</span>         <span class=\"token number\">105</span> <span class=\"token operator\">|</span> Austin      <span class=\"token operator\">|</span>  <span class=\"token number\">4800.00</span> <span class=\"token operator\">|</span>\n<span class=\"token operator\">|</span>         <span class=\"token number\">106</span> <span class=\"token operator\">|</span> Pataballa   <span class=\"token operator\">|</span>  <span class=\"token number\">4800.00</span> <span class=\"token operator\">|</span>\n<span class=\"token operator\">|</span>         <span class=\"token number\">107</span> <span class=\"token operator\">|</span> Lorentz     <span class=\"token operator\">|</span>  <span class=\"token number\">4200.00</span> <span class=\"token operator\">|</span>\n<span class=\"token operator\">|</span>         <span class=\"token number\">108</span> <span class=\"token operator\">|</span> Greenberg   <span class=\"token operator\">|</span> <span class=\"token number\">12000.00</span> <span class=\"token operator\">|</span>\n<span class=\"token operator\">|</span>         <span class=\"token number\">109</span> <span class=\"token operator\">|</span> Faviet      <span class=\"token operator\">|</span>  <span class=\"token number\">9000.00</span> <span class=\"token operator\">|</span>\n<span class=\"token operator\">|</span>         <span class=\"token number\">110</span> <span class=\"token operator\">|</span> Chen        <span class=\"token operator\">|</span>  <span class=\"token number\">8200.00</span> <span class=\"token operator\">|</span>\n<span class=\"token operator\">|</span>         <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token operator\">|</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>         <span class=\"token operator\">|</span>       <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token operator\">|</span>\n<span class=\"token operator\">+</span><span class=\"token comment\">-------------+-------------+----------+</span>\n<span class=\"token number\">107</span> <span class=\"token keyword\">rows</span> <span class=\"token operator\">in</span> <span class=\"token keyword\">set</span> <span class=\"token punctuation\">(</span><span class=\"token number\">0.11</span> sec<span class=\"token punctuation\">)</span>\n\n\n<span class=\"token comment\"># 先提交，相当于存档，保证能够回滚</span>\n<span class=\"token keyword\">COMMIT</span><span class=\"token punctuation\">;</span>\n <span class=\"token comment\">-- Query OK, 0 rows affected (0.09 sec)</span>\n\n<span class=\"token comment\"># 关闭自动提交事务</span>\n<span class=\"token keyword\">SET</span> autocommit <span class=\"token operator\">=</span> <span class=\"token boolean\">FALSE</span><span class=\"token punctuation\">;</span>\n <span class=\"token comment\">-- Query OK, 0 rows affected (0.02 sec)</span>\n\n<span class=\"token comment\"># 删除所有表数据</span>\n<span class=\"token keyword\">DELETE</span> <span class=\"token keyword\">FROM</span> employee_copy<span class=\"token punctuation\">;</span>\n <span class=\"token comment\">-- Query OK, 107 rows affected (0.02 sec)</span>\n \n<span class=\"token comment\"># 查看表数据，确定已经删掉了</span>\n<span class=\"token keyword\">SELECT</span> employee_id<span class=\"token punctuation\">,</span>last_name<span class=\"token punctuation\">,</span> salary\n<span class=\"token keyword\">FROM</span> employee_copy<span class=\"token punctuation\">;</span>\n <span class=\"token comment\">-- Empty set (0.02 sec)</span>\n \n<span class=\"token comment\"># 回滚</span>\n<span class=\"token keyword\">ROLLBACK</span><span class=\"token punctuation\">;</span>\n <span class=\"token comment\">-- Query OK, 0 rows affected (0.02 sec)</span>\n\n<span class=\"token comment\"># 查看表数据，发现已经回来了</span>\n<span class=\"token keyword\">SELECT</span> employee_id<span class=\"token punctuation\">,</span>last_name<span class=\"token punctuation\">,</span> salary\n<span class=\"token keyword\">FROM</span> employee_copy<span class=\"token punctuation\">;</span>\n<span class=\"token operator\">+</span><span class=\"token comment\">-------------+-------------+----------+</span>\n<span class=\"token operator\">|</span> employee_id <span class=\"token operator\">|</span> last_name   <span class=\"token operator\">|</span> salary   <span class=\"token operator\">|</span>\n<span class=\"token operator\">+</span><span class=\"token comment\">-------------+-------------+----------+</span>\n<span class=\"token operator\">|</span>         <span class=\"token number\">100</span> <span class=\"token operator\">|</span> King        <span class=\"token operator\">|</span> <span class=\"token number\">24000.00</span> <span class=\"token operator\">|</span>\n<span class=\"token operator\">|</span>         <span class=\"token number\">101</span> <span class=\"token operator\">|</span> Kochhar     <span class=\"token operator\">|</span> <span class=\"token number\">17000.00</span> <span class=\"token operator\">|</span>\n<span class=\"token operator\">|</span>         <span class=\"token number\">102</span> <span class=\"token operator\">|</span> De Haan     <span class=\"token operator\">|</span> <span class=\"token number\">17000.00</span> <span class=\"token operator\">|</span>\n<span class=\"token operator\">|</span>         <span class=\"token number\">103</span> <span class=\"token operator\">|</span> Hunold      <span class=\"token operator\">|</span>  <span class=\"token number\">9000.00</span> <span class=\"token operator\">|</span>\n<span class=\"token operator\">|</span>         <span class=\"token number\">104</span> <span class=\"token operator\">|</span> Ernst       <span class=\"token operator\">|</span>  <span class=\"token number\">6000.00</span> <span class=\"token operator\">|</span>\n<span class=\"token operator\">|</span>         <span class=\"token number\">105</span> <span class=\"token operator\">|</span> Austin      <span class=\"token operator\">|</span>  <span class=\"token number\">4800.00</span> <span class=\"token operator\">|</span>\n<span class=\"token operator\">|</span>         <span class=\"token number\">106</span> <span class=\"token operator\">|</span> Pataballa   <span class=\"token operator\">|</span>  <span class=\"token number\">4800.00</span> <span class=\"token operator\">|</span>\n<span class=\"token operator\">|</span>         <span class=\"token number\">107</span> <span class=\"token operator\">|</span> Lorentz     <span class=\"token operator\">|</span>  <span class=\"token number\">4200.00</span> <span class=\"token operator\">|</span>\n<span class=\"token operator\">|</span>         <span class=\"token number\">108</span> <span class=\"token operator\">|</span> Greenberg   <span class=\"token operator\">|</span> <span class=\"token number\">12000.00</span> <span class=\"token operator\">|</span>\n<span class=\"token operator\">|</span>         <span class=\"token number\">109</span> <span class=\"token operator\">|</span> Faviet      <span class=\"token operator\">|</span>  <span class=\"token number\">9000.00</span> <span class=\"token operator\">|</span>\n<span class=\"token operator\">|</span>         <span class=\"token number\">110</span> <span class=\"token operator\">|</span> Chen        <span class=\"token operator\">|</span>  <span class=\"token number\">8200.00</span> <span class=\"token operator\">|</span>\n<span class=\"token operator\">|</span>         <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token operator\">|</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>         <span class=\"token operator\">|</span>       <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token operator\">|</span>\n<span class=\"token operator\">+</span><span class=\"token comment\">-------------+-------------+----------+</span>\n<span class=\"token number\">107</span> <span class=\"token keyword\">rows</span> <span class=\"token operator\">in</span> <span class=\"token keyword\">set</span> <span class=\"token punctuation\">(</span><span class=\"token number\">0.11</span> sec<span class=\"token punctuation\">)</span></code></pre>\n\n\n\n\n\n"}],"PostAsset":[{"_id":"source/_posts/matlab编译dll文件/deploytool.png","slug":"deploytool.png","post":"clusa3wnm000c2s7e70n135fp","modified":0,"renderable":0},{"_id":"source/_posts/matlab编译dll文件/deploytool2.png","slug":"deploytool2.png","post":"clusa3wnm000c2s7e70n135fp","modified":0,"renderable":0},{"_id":"source/_posts/matlab编译dll文件/deploytool3.png","slug":"deploytool3.png","post":"clusa3wnm000c2s7e70n135fp","modified":0,"renderable":0},{"_id":"source/_posts/thymeleaf基本使用/thymeleaf1.png","slug":"thymeleaf1.png","post":"clusa3wnn000d2s7eh2zh68tl","modified":0,"renderable":0},{"_id":"source/_posts/ubuntu安装mysql8-0流程记录/mysql8安装1.png","slug":"mysql8安装1.png","post":"clusa3wnp000j2s7e3secgcw2","modified":0,"renderable":0},{"_id":"source/_posts/ubuntu安装mysql8-0流程记录/mysql8安装2.png","slug":"mysql8安装2.png","post":"clusa3wnp000j2s7e3secgcw2","modified":0,"renderable":0},{"_id":"source/_posts/ubuntu安装mysql8-0流程记录/mysql8安装3.png","slug":"mysql8安装3.png","post":"clusa3wnp000j2s7e3secgcw2","modified":0,"renderable":0},{"_id":"source/_posts/ubuntu安装mysql8-0流程记录/mysql8安装4.png","slug":"mysql8安装4.png","post":"clusa3wnp000j2s7e3secgcw2","modified":0,"renderable":0},{"_id":"source/_posts/ubuntu安装mysql8-0流程记录/mysql8安装5.png","slug":"mysql8安装5.png","post":"clusa3wnp000j2s7e3secgcw2","modified":0,"renderable":0},{"_id":"source/_posts/ubuntu安装mysql8-0流程记录/小丑.png","slug":"小丑.png","post":"clusa3wnp000j2s7e3secgcw2","modified":0,"renderable":0},{"_id":"source/_posts/解决failed to configure a datasource ‘url‘ attribute is not specified/application.png","slug":"application.png","post":"clusa3wnu000t2s7ega7h1ukz","modified":0,"renderable":0},{"_id":"source/_posts/Spring-Boot常用注解/@Bean1.png","slug":"@Bean1.png","post":"clusa3woc002l2s7e24luaxb4","modified":0,"renderable":0},{"_id":"source/_posts/Spring-Boot常用注解/@Bean2.png","slug":"@Bean2.png","post":"clusa3woc002l2s7e24luaxb4","modified":0,"renderable":0},{"_id":"source/_posts/Spring-Boot常用注解/@Bean3.png","slug":"@Bean3.png","post":"clusa3woc002l2s7e24luaxb4","modified":0,"renderable":0},{"_id":"source/_posts/Spring-Boot常用注解/@Bean4.png","slug":"@Bean4.png","post":"clusa3woc002l2s7e24luaxb4","modified":0,"renderable":0},{"_id":"source/_posts/Spring-Boot常用注解/@Component1.png","slug":"@Component1.png","post":"clusa3woc002l2s7e24luaxb4","modified":0,"renderable":0},{"_id":"source/_posts/Spring-Boot常用注解/@Component2.png","slug":"@Component2.png","post":"clusa3woc002l2s7e24luaxb4","modified":0,"renderable":0},{"_id":"source/_posts/Spring-Boot常用注解/@Configuration1.png","slug":"@Configuration1.png","post":"clusa3woc002l2s7e24luaxb4","modified":0,"renderable":0},{"_id":"source/_posts/Spring-Boot常用注解/@Configuration2.png","slug":"@Configuration2.png","post":"clusa3woc002l2s7e24luaxb4","modified":0,"renderable":0},{"_id":"source/_posts/Spring-Boot常用注解/@ControllerAdvice1.png","slug":"@ControllerAdvice1.png","post":"clusa3woc002l2s7e24luaxb4","modified":0,"renderable":0},{"_id":"source/_posts/Spring-Boot常用注解/@ControllerAdvice2.png","slug":"@ControllerAdvice2.png","post":"clusa3woc002l2s7e24luaxb4","modified":0,"renderable":0},{"_id":"source/_posts/Spring-Boot常用注解/@Lazy1.png","slug":"@Lazy1.png","post":"clusa3woc002l2s7e24luaxb4","modified":0,"renderable":0},{"_id":"source/_posts/Spring-Boot常用注解/@ModelAttribute1.png","slug":"@ModelAttribute1.png","post":"clusa3woc002l2s7e24luaxb4","modified":0,"renderable":0},{"_id":"source/_posts/Spring-Boot常用注解/@ModelAttribute2.png","slug":"@ModelAttribute2.png","post":"clusa3woc002l2s7e24luaxb4","modified":0,"renderable":0},{"_id":"source/_posts/Spring-Boot常用注解/@PreDestroy1.png","slug":"@PreDestroy1.png","post":"clusa3woc002l2s7e24luaxb4","modified":0,"renderable":0},{"_id":"source/_posts/Spring-Boot常用注解/@RequestBody1.png","slug":"@RequestBody1.png","post":"clusa3woc002l2s7e24luaxb4","modified":0,"renderable":0},{"_id":"source/_posts/mysql-基础篇/JOIN.png","slug":"JOIN.png","post":"clusa3woh00302s7e26uz3yv8","modified":0,"renderable":0}],"PostCategory":[{"post_id":"clusa3wnd00012s7eewuo901j","category_id":"clusa3wnh00042s7eclplbq79","_id":"clusa3wnn000e2s7e5hev1w5m"},{"post_id":"clusa3wnf00032s7efjvia08p","category_id":"clusa3wnl000a2s7ebsx5007d","_id":"clusa3wnq000l2s7e1e0rejgw"},{"post_id":"clusa3wnj00072s7e8of58gkl","category_id":"clusa3wnn000f2s7efz4ld0c3","_id":"clusa3wnt000q2s7eghga7lp1"},{"post_id":"clusa3wnk00082s7e9czjgekl","category_id":"clusa3wnq000m2s7e6fek7jdo","_id":"clusa3wnv000w2s7e08ey9w3m"},{"post_id":"clusa3wnl00092s7e5ay9aoe0","category_id":"clusa3wnt000r2s7e3q5thnme","_id":"clusa3wny000z2s7e0d8qhrs4"},{"post_id":"clusa3wnn000d2s7eh2zh68tl","category_id":"clusa3wnw000x2s7e4qnx0pzc","_id":"clusa3wo000122s7e782wev7b"},{"post_id":"clusa3wno000h2s7eb9fg0wze","category_id":"clusa3wny00102s7eesrb7mnv","_id":"clusa3wo000152s7e2aqk6o8m"},{"post_id":"clusa3wnp000j2s7e3secgcw2","category_id":"clusa3wo000132s7e1ox9dt46","_id":"clusa3wo1001a2s7egkn2d501"},{"post_id":"clusa3wns000p2s7egy5s783o","category_id":"clusa3wo000162s7e16bhfzyu","_id":"clusa3wo2001f2s7e46pvgrft"},{"post_id":"clusa3wnu000t2s7ega7h1ukz","category_id":"clusa3wo1001b2s7e8o4bg9jd","_id":"clusa3wo2001h2s7ebj4x2sg4"},{"post_id":"clusa3wob002k2s7e6hihfk1c","category_id":"clusa3wny00102s7eesrb7mnv","_id":"clusa3woe002p2s7e8er507y0"},{"post_id":"clusa3woc002l2s7e24luaxb4","category_id":"clusa3wo1001b2s7e8o4bg9jd","_id":"clusa3woe002s2s7eauyh5snd"},{"post_id":"clusa3wod002n2s7ebdiadxyu","category_id":"clusa3woe002q2s7e9m6lgijc","_id":"clusa3wof002w2s7e4ppg9cz5"},{"post_id":"clusa3woh00302s7e26uz3yv8","category_id":"clusa3wo000132s7e1ox9dt46","_id":"clusa3woi00322s7e74l4b6ek"}],"PostTag":[{"post_id":"clusa3wnd00012s7eewuo901j","tag_id":"clusa3wni00052s7e9nmw2ggn","_id":"clusa3wno000i2s7eg7hdad41"},{"post_id":"clusa3wnd00012s7eewuo901j","tag_id":"clusa3wnl000b2s7eekp9cuow","_id":"clusa3wnp000k2s7e1j3246is"},{"post_id":"clusa3wnf00032s7efjvia08p","tag_id":"clusa3wno000g2s7ehtsc7mhj","_id":"clusa3wnv000u2s7ea0c141gq"},{"post_id":"clusa3wnf00032s7efjvia08p","tag_id":"clusa3wnq000n2s7e91lq80k4","_id":"clusa3wnv000v2s7e8d01h3gq"},{"post_id":"clusa3wnj00072s7e8of58gkl","tag_id":"clusa3wnt000s2s7eaf0v4tk1","_id":"clusa3wo100182s7e1pk47qez"},{"post_id":"clusa3wnj00072s7e8of58gkl","tag_id":"clusa3wnw000y2s7e061f5hfa","_id":"clusa3wo100192s7e2inq7wrp"},{"post_id":"clusa3wnj00072s7e8of58gkl","tag_id":"clusa3wnz00112s7e7x053j9f","_id":"clusa3wo2001d2s7eapsa8xcw"},{"post_id":"clusa3wnj00072s7e8of58gkl","tag_id":"clusa3wo000142s7e34u4amvl","_id":"clusa3wo2001e2s7e8r0a616s"},{"post_id":"clusa3wnk00082s7e9czjgekl","tag_id":"clusa3wo100172s7ehn704l45","_id":"clusa3wo4001l2s7eh7r1f39c"},{"post_id":"clusa3wnk00082s7e9czjgekl","tag_id":"clusa3wo1001c2s7e4svd289g","_id":"clusa3wo4001m2s7e38s97xwk"},{"post_id":"clusa3wnk00082s7e9czjgekl","tag_id":"clusa3wo2001g2s7eengr2x7b","_id":"clusa3wo4001o2s7ebxzgcoje"},{"post_id":"clusa3wnk00082s7e9czjgekl","tag_id":"clusa3wo2001i2s7egwu2cbd8","_id":"clusa3wo5001p2s7eg8htg11f"},{"post_id":"clusa3wnk00082s7e9czjgekl","tag_id":"clusa3wo2001j2s7ecrfl237f","_id":"clusa3wo5001r2s7ebld56pbr"},{"post_id":"clusa3wnl00092s7e5ay9aoe0","tag_id":"clusa3wo2001g2s7eengr2x7b","_id":"clusa3wo5001s2s7efbx79his"},{"post_id":"clusa3wnm000c2s7e70n135fp","tag_id":"clusa3wo4001n2s7e3g9jcl3h","_id":"clusa3wo5001u2s7efl6v5hqy"},{"post_id":"clusa3wnn000d2s7eh2zh68tl","tag_id":"clusa3wo5001q2s7edgae9pks","_id":"clusa3wo5001v2s7e4d6y6vn3"},{"post_id":"clusa3wno000h2s7eb9fg0wze","tag_id":"clusa3wo5001t2s7ehizqgdr2","_id":"clusa3wo600202s7efb7a9nne"},{"post_id":"clusa3wno000h2s7eb9fg0wze","tag_id":"clusa3wo5001w2s7ehaa430oz","_id":"clusa3wo600212s7e6f9uhagl"},{"post_id":"clusa3wno000h2s7eb9fg0wze","tag_id":"clusa3wo5001x2s7e7mnpf523","_id":"clusa3wo700232s7ea8zuho0s"},{"post_id":"clusa3wno000h2s7eb9fg0wze","tag_id":"clusa3wo6001y2s7ee4ns1om9","_id":"clusa3wo700242s7eghcod3sq"},{"post_id":"clusa3wnp000j2s7e3secgcw2","tag_id":"clusa3wo2001j2s7ecrfl237f","_id":"clusa3wo700262s7ehsbmh723"},{"post_id":"clusa3wnp000j2s7e3secgcw2","tag_id":"clusa3wo600222s7e7aou07lv","_id":"clusa3wo700272s7e9ndx2sf4"},{"post_id":"clusa3wnr000o2s7e0tz50uib","tag_id":"clusa3wo700252s7eclmd4pfh","_id":"clusa3wo700292s7eak9uhn3x"},{"post_id":"clusa3wns000p2s7egy5s783o","tag_id":"clusa3wo700282s7e21xx29dr","_id":"clusa3wo8002d2s7e1llwerwx"},{"post_id":"clusa3wns000p2s7egy5s783o","tag_id":"clusa3wo7002a2s7eglxd8are","_id":"clusa3wo8002e2s7egbppcc72"},{"post_id":"clusa3wns000p2s7egy5s783o","tag_id":"clusa3wo7002b2s7ec1yidufe","_id":"clusa3wo8002g2s7ed4zt8g2u"},{"post_id":"clusa3wnu000t2s7ega7h1ukz","tag_id":"clusa3wnq000n2s7e91lq80k4","_id":"clusa3wo8002h2s7e5jlehmrr"},{"post_id":"clusa3wnu000t2s7ega7h1ukz","tag_id":"clusa3wo8002c2s7e3xke5id6","_id":"clusa3wo9002i2s7e3vyhdtt9"},{"post_id":"clusa3wnu000t2s7ega7h1ukz","tag_id":"clusa3wo8002f2s7e989oavk0","_id":"clusa3wo9002j2s7egblc3zwq"},{"post_id":"clusa3woc002l2s7e24luaxb4","tag_id":"clusa3wno000g2s7ehtsc7mhj","_id":"clusa3woe002o2s7ebboage1y"},{"post_id":"clusa3woc002l2s7e24luaxb4","tag_id":"clusa3wnq000n2s7e91lq80k4","_id":"clusa3woe002r2s7edbbjax4i"},{"post_id":"clusa3wob002k2s7e6hihfk1c","tag_id":"clusa3wod002m2s7e51v8dq4t","_id":"clusa3wof002v2s7e8hn1g6tz"},{"post_id":"clusa3wob002k2s7e6hihfk1c","tag_id":"clusa3woe002t2s7ehl3ob1ar","_id":"clusa3wof002x2s7ehixu5ylq"},{"post_id":"clusa3wod002n2s7ebdiadxyu","tag_id":"clusa3wnl000b2s7eekp9cuow","_id":"clusa3wog002y2s7ehzz1a2ra"},{"post_id":"clusa3wod002n2s7ebdiadxyu","tag_id":"clusa3woe002u2s7e5wx39z0e","_id":"clusa3wog002z2s7ehjqv7544"},{"post_id":"clusa3woh00302s7e26uz3yv8","tag_id":"clusa3wo2001j2s7ecrfl237f","_id":"clusa3woi00312s7e6h5zhivu"}],"Tag":[{"name":"linux","_id":"clusa3wni00052s7e9nmw2ggn"},{"name":"cuda","_id":"clusa3wnl000b2s7eekp9cuow"},{"name":"spring","_id":"clusa3wno000g2s7ehtsc7mhj"},{"name":"spring boot","_id":"clusa3wnq000n2s7e91lq80k4"},{"name":"pytorch","_id":"clusa3wnt000s2s7eaf0v4tk1"},{"name":"ssd","_id":"clusa3wnw000y2s7e061f5hfa"},{"name":"yolov5","_id":"clusa3wnz00112s7e7x053j9f"},{"name":"centos","_id":"clusa3wo000142s7e34u4amvl"},{"name":"nginx","_id":"clusa3wo100172s7ehn704l45"},{"name":"ffmpeg","_id":"clusa3wo1001c2s7e4svd289g"},{"name":"docker","_id":"clusa3wo2001g2s7eengr2x7b"},{"name":"java","_id":"clusa3wo2001i2s7egwu2cbd8"},{"name":"mysql","_id":"clusa3wo2001j2s7ecrfl237f"},{"name":"matlab","_id":"clusa3wo4001n2s7e3g9jcl3h"},{"name":"thymeleaf","_id":"clusa3wo5001q2s7edgae9pks"},{"name":"素数","_id":"clusa3wo5001t2s7ehizqgdr2"},{"name":"单调栈","_id":"clusa3wo5001w2s7ehaa430oz"},{"name":"快速幂","_id":"clusa3wo5001x2s7e7mnpf523"},{"name":"贪心","_id":"clusa3wo6001y2s7ee4ns1om9"},{"name":"ubuntu","_id":"clusa3wo600222s7e7aou07lv"},{"name":"启用博客第一天","_id":"clusa3wo700252s7eclmd4pfh"},{"name":"高中数学","_id":"clusa3wo700282s7e21xx29dr"},{"name":"数列","_id":"clusa3wo7002a2s7eglxd8are"},{"name":"通项公式","_id":"clusa3wo7002b2s7ec1yidufe"},{"name":"spring boot错误记录","_id":"clusa3wo8002c2s7e3xke5id6"},{"name":"Maven","_id":"clusa3wo8002f2s7e989oavk0"},{"name":"LIS","_id":"clusa3wod002m2s7e51v8dq4t"},{"name":"二分查找","_id":"clusa3woe002t2s7ehl3ob1ar"},{"name":"opencv","_id":"clusa3woe002u2s7e5wx39z0e"}]}}